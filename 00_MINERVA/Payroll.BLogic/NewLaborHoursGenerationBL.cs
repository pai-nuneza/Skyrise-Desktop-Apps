using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using CommonLibrary;
using Payroll.DAL;
using System.Collections;

namespace Payroll.BLogic
{
    public class NewLaborHoursGenerationBL : BaseBL
    {
        #region <Global Variables>
        DALHelper dal;
        SystemCycleProcessingBL SystemCycleProcessingBL;
        CommonBL commonBL;

        string companyCode              = string.Empty;
        string centralProfile           = string.Empty;
        string dbCollation              = string.Empty;
        //Storage tables
        DataTable dtEmpTimeRegister      = null;
        DataTable dtEmpTimeRegisterMisc  = null;
        DataTable dtEmpPayTranHdr        = null;
        DataTable dtEmpPayTranHdrMisc    = null;
        DataTable dtEmpPayTranDtl        = null;
        DataTable dtEmpPayTranDtlMisc    = null;
        DataRow   drEmpPayTranHdr        = null;
        DataRow   drEmpPayTranHdrMisc    = null;
        DataRow   drEmpPayTranDtl        = null;
        DataRow   drEmpPayTranDtlMisc    = null;
        DataRow   drEmpPayTranDtlPrev    = null;
        DataTable dtOvertimeTable        = null;
        DataTable dtLeaveTable           = null;
        DataTable dtWorkAuthTable        = null;
        DataTable dtUnpaidLeaveTable     = null;
        //DataTable dtOffsetTable          = null;
        DataTable dtDayCodeMaster        = null;
        DataTable dtDayCodeFillers       = null;
        DataTable dtDefaultShift         = null;
        DataTable dtNextDayCodeLastDay   = null;

        //Temporary variable for the Hours
        double AbsentHr                    = 0.0;
        double RegularHr                   = 0.0;
        double RegularOTHr                 = 0.0;
        double RegularNDHr                 = 0.0;
        double RegularOTNDHr               = 0.0;
        double RestdayHr                   = 0.0;
        double RestdayOTHr                 = 0.0;
        double RestdayNDHr                 = 0.0;
        double RestdayOTNDHr               = 0.0;
        double LegalHolidayHr              = 0.0;
        double LegalHolidayOTHr            = 0.0;
        double LegalHolidayNDHr            = 0.0;
        double LegalHolidayOTNDHr          = 0.0;
        double SpecialHolidayHr            = 0.0;
        double SpecialHolidayOTHr          = 0.0;
        double SpecialHolidayNDHr          = 0.0;
        double SpecialHolidayOTNDHr        = 0.0;
        double PlantShutdownHr             = 0.0;
        double PlantShutdownOTHr           = 0.0;
        double PlantShutdownNDHr           = 0.0;
        double PlantShutdownOTNDHr         = 0.0;
        double CompanyHolidayHr            = 0.0;
        double CompanyHolidayOTHr          = 0.0;
        double CompanyHolidayNDHr          = 0.0;
        double CompanyHolidayOTNDHr        = 0.0;
        double RestdayLegalHolidayHr       = 0.0;
        double RestdayLegalHolidayOTHr     = 0.0;
        double RestdayLegalHolidayNDHr     = 0.0;
        double RestdayLegalHolidayOTNDHr   = 0.0;
        double RestdaySpecialHolidayHr     = 0.0;
        double RestdaySpecialHolidayOTHr   = 0.0;
        double RestdaySpecialHolidayNDHr   = 0.0;
        double RestdaySpecialHolidayOTNDHr = 0.0;
        double RestdayCompanyHolidayHr     = 0.0;
        double RestdayCompanyHolidayOTHr   = 0.0;
        double RestdayCompanyHolidayNDHr   = 0.0;
        double RestdayCompanyHolidayOTNDHr = 0.0;
        double RestdayPlantShutdownHr      = 0.0;
        double RestdayPlantShutdownOTHr    = 0.0;
        double RestdayPlantShutdownNDHr    = 0.0;
        double RestdayPlantShutdownOTNDHr  = 0.0;
        int RestdayLegalHolidayCount       = 0;
        int WorkingDay                     = 0;
        double RegularHrMonthlyDailyPay    = 0.0;
        double LateHours                   = 0.0;
        double UndertimeHours              = 0.0;
        double PaidLeaveHours              = 0.0;
        double UnpaidLeaveHours            = 0.0;
        double WholeDayAbsentHours         = 0.0;
        double LateUndertimeMaxAbsentHours = 0.0;
        double AbsentLegalHolidayHr        = 0.0;
        double AbsentSpecialHolidayHr      = 0.0;
        double AbsentCompanyHolidayHr      = 0.0;
        double AbsentPlantShutdownHr       = 0.0;
        double AbsentFillerHolidayHr       = 0.0;
        double PaidLegalHolidayHr          = 0.0;
        double PaidSpecialHolidayHr        = 0.0;
        double PaidCompanyHolidayHr        = 0.0;
        double PaidFillerHolidayHr         = 0.0;
        double PaidPlantShutdownHolidayHr  = 0.0;

        //Flags and parameters
        public string OTOFSETABS       = string.Empty;
        public string ONEPREVDAY       = string.Empty;
        public string REGPREVDAY       = string.Empty;
        public string LVHRENTRY        = string.Empty;
        public string NOABSNWHRE       = string.Empty;
        public string OTFORMGR         = string.Empty;
        public string MULTSAL          = string.Empty;
        //public string ALWPOST          = string.Empty;
        public string PSDMONTHLY       = string.Empty;
        public string NDOTAM           = string.Empty;  //old code: NONDOTDAY
        //public string NDPM             = string.Empty; //old code: NDREGSHIFT
        //public string NDPREM1ST8       = string.Empty; -- NDSPLTSHFT
        public string NDALL            = string.Empty;
        public string NDCNTBREAK       = string.Empty;
        public string HRFRCLBRHR       = string.Empty; //old code: HOURFRACFORMULA1 | HOURFRACFORMULA2
        public string LBRHRFORMULA     = string.Empty;
        public string EXTREGLVE        = string.Empty;
        public string EXTREGULVE       = string.Empty;
        public string LVWDSHIFT        = string.Empty; // old code: ATLVEADJ
        //public string OBCOMPOT         = string.Empty; - default to true
        public string MLPAYHOL         = string.Empty;
        public string OTROUNDING       = string.Empty;
        //public string LEGHOLINRG       = string.Empty; not in use
        public string CNTPDBRK         = string.Empty;
        //public string HOURFRACFORMULA1 = string.Empty; 
        //public string HOURFRACFORMULA2 = string.Empty;
        public string OTRNDFRAC        = string.Empty; //old code: RNDOTFRAC
        public string FLEXSHIFT        = string.Empty;
        public string NEWHIRE          = string.Empty;

        public double OTMINHR         = 0; //old code: MINOTHR
        public double OTMINHR_ORIG    = 0;
        public double OTMINHR_REG     = 0;
        public double OTMINHR_NONREG  = 0;
        public double NDMINHR_REG     = 0;
        public double NDMINHR_NONREG  = 0;
        public double OTFRACT         = 0;
        public double LATEMAXMIN      = 0; //old code: MAXLATEMIN
        public double MAXUTMIN        = 0;
        public double NDFRACTION      = 0;
        public int    ABSFRACT_REG    = 0; //old code: ABSFRACTRG
        public int    ABSFRACT_NONREG = 0;
        //public int    ABSFRACT        = 0;
        public int    TIMEFRAC        = 0;
        public double LATEGRACEIN1    = 0;
        public double LATEGRACEIN2    = 0;
        public double MDIVISOR        = 0;
        public int    LOGPAD          = 720; //Equivalent to 12Hrs
        public bool   MIDOT           = false;
        public int    POCKETGAP       = 0;
        public int    POCKETTIME      = 0;
        public int    POCKETSIZE      = 0;
        public int    NDBRCKTCNT      = 1;
        public int    NP1_BEGTIME     = 0;
        public int    NP1_ENDTIME     = 0;
        public int    NP2_BEGTIME     = 0;
        public int    NP2_ENDTIME     = 0;

        public string LATEFREQ                      = string.Empty;
        public DataTable LATEBRCKTD                 = null;
        public DataTable UTIMEBRCKT                 = null;
        public DataTable REGHRSREQD                 = null;
        public DataTable MINOTHR_TBL                = null;
        public DataTable ULPREVDAY                  = null;
        public DataTable LT2UT2LEAVETYPE            = null;


        public double    OTLIMITHR                  = 0;
        public double    OTLIMITHR_ORIG             = 0;
        public DataTable OTLIMITHR_TBL              = null;
        public double    OTLIMITEQV                 = 0;
        public double    OTLIMITEQV_ORIG            = 0;
        public DataTable OTLIMITEQV_TBL             = null;
        public double    OTLIMITAPP                 = 0;

        //Constants
        public int GRAVEYARD24                      = 24 * 60;
        public int NIGHTDIFFGRAVEYARDSTART          = 0;
        public int NIGHTDIFFGRAVEYARDEND            = 0;
        public int NIGHTDIFFAMSTART                 = 0;
        public int NIGHTDIFFAMEND                   = 0;
        public int FILLERCNT                        = 6;

        //public string MSTDFPM_SHIFT = string.Empty;

        //Labor Hour Report structure
        struct structLaborHourErrorReport
        {
            public string strEmployeeId;
            public string strLastName;
            public string strFirstName;
            public string strMiddleName;
            public string strProcessDate;
            public string strRemarks;
            public string strType;

            public structLaborHourErrorReport(string EmployeeId, string LastName, string FirstName, string MiddleName, string ProcessDate, string Remarks, string Type)
            {
                strEmployeeId   = EmployeeId;
                strLastName     = LastName;
                strFirstName    = FirstName;
                strMiddleName   = MiddleName;
                strProcessDate  = ProcessDate;
                strRemarks      = Remarks;
                strType         = Type;
            }
        }
        List<structLaborHourErrorReport> listLbrHrRept = new List<structLaborHourErrorReport>();

        //Hour Fraction structure
        public enum HourType { RegHour, OTHour, NDHour, NDOTHour };
        struct structHourFract
        {
            public int iStartMin;
            public int iEndMin;
            public int iCurrentDayMin;
            public int iNextDayMin;
            public HourType strHourType;

            public structHourFract(int StartMin, int EndMin, int CurrentDayMin, int NextDayMin, HourType HourType)
            {
                iStartMin = StartMin;
                iEndMin = EndMin;
                iCurrentDayMin = CurrentDayMin;
                iNextDayMin = NextDayMin;
                strHourType = HourType;
            }
        }
        List<structHourFract> listHourFract = new List<structHourFract>();


        //Regular|Leave|Absent structure
        public class clRegLeaveAbsType
        {
            public int iPocket;
            public string strBeginTime;
            public string strEndTime;
            public int iConvBeginMin;
            public int iConvEndMin;
            public int iConvMin;
            public int iActualStartMin;
            public int iActualEndMin;
            public string strLeaveType;
            public bool bPaidLeave;
            public bool bWithCredit;
            public string strDayUnit;
            public RegLeaveAbsType strRegLeaveAbsType;
            public string strRemarks;
            public bool bStatus;
            public string strRegLeaveAbsIndicator;
        }
        public enum RegLeaveAbsType { REG, LVE, ABS, OVT, NDF };

        List<clRegLeaveAbsType> listRegLeaveAbs = new List<clRegLeaveAbsType>();
        List<clRegLeaveAbsType> listOvt = new List<clRegLeaveAbsType>();

        //Index counters
        int indexPayTrans = -1;
        int indexPayTransExt = -1;

        //Hour Fraction
        int Cutoff = 1440;
        int CurrentDayMin, NextDayMin;
        int ActualStart, ActualEnd;
        int ActualStart2, ActualEnd2;
        int OTMins;

        //Miscellaneous
        string ProcessPayrollPeriod      = "";
        string PayrollStart              = "";
        string PayrollEnd                = "";
        string LoginUser                 = "";
        string EmpTimeRegisterTable      = CommonConstants.TableName.T_EmpTimeRegister;
        string EmpTimeRegisterMiscTable  = CommonConstants.TableName.T_EmpTimeRegisterMisc;
        string EmpPayTranHdrTable        = CommonConstants.TableName.T_EmpPayTranHdr;
        string EmpPayTranDtlTable        = CommonConstants.TableName.T_EmpPayTranDtl; 
        string EmpPayTranHdrMiscTable    = CommonConstants.TableName.T_EmpPayTranHdrMisc;
        string EmpPayTranDtlMiscTable    = CommonConstants.TableName.T_EmpPayTranDtlMisc; 
        bool   bHasDayCodeExt            = false;
        bool   bProcessTrail             = false;
        string AdjustPayrollPeriod       = "";
        string EmployeeList              = "";
        bool   bHasAddedCurrentHrs       = false;
        #endregion

        #region <Override Functions>

        public override int Add(System.Data.DataRow row)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override int Update(System.Data.DataRow row)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override int Delete(string code, string userLogin)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override System.Data.DataSet FetchAll()
        {
            throw new Exception("The method or operation is not implemented.");
        }

        public override System.Data.DataRow Fetch(string code)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        #endregion

        #region Event handlers for labor hours generation process
        public delegate void EmpDispEventHandler(object sender, EmpDispEventArgs e);
        public class EmpDispEventArgs : System.EventArgs
        {
            public string EmployeeId;
            public string LastName;
            public string FirstName;
            public string StatusMsg;

            public EmpDispEventArgs(string strEmployeeId, string strLast, string strFirst)
            {
                EmployeeId = strEmployeeId;
                LastName   = strLast;
                FirstName  = strFirst;
                StatusMsg  = "Successful";
            }

            public EmpDispEventArgs(string strEmployeeId, string strLast, string strFirst, string strStatusMsg)
            {
                EmployeeId = strEmployeeId;
                LastName   = strLast;
                FirstName  = strFirst;
                StatusMsg  = strStatusMsg;
            }
        }
        public event EmpDispEventHandler EmpDispHandler;

        public delegate void StatusEventHandler(object sender, StatusEventArgs e);
        public class StatusEventArgs : System.EventArgs
        {
            public string Status;
            public bool Done;

            public StatusEventArgs(string strStat, bool bDone)
            {
                Status = strStat;
                Done = bDone;
            }
        }
        public event StatusEventHandler StatusHandler;
        #endregion

        #region Main Functions
        public DataTable GenerateLaborHours(bool ProcessAll, bool ProcessCurrentPeriod, bool ProcessSeparated, string PayrollPeriod, string AdjustPayPeriod, bool ProcessTrail, string EmployeeId, string EmpList, string UserLogin, string CompanyCode, string CentralProfile, string DBCollation, DALHelper dalHelper)
        {
            AdjustPayrollPeriod = AdjustPayPeriod;
            bProcessTrail = ProcessTrail;
            EmployeeList = EmpList;

            return GenerateLaborHours(ProcessAll, ProcessCurrentPeriod, ProcessSeparated, PayrollPeriod, EmployeeId, UserLogin, CompanyCode, CentralProfile, DBCollation, dalHelper);
        }

        public DataTable GenerateLaborHours(bool ProcessAll, bool ProcessCurrentPeriod, bool ProcessSeparated, string PayrollPeriod, string EmployeeId, string UserLogin, string CompanyCode, string CentralProfile, string DBCollation, DALHelper dalHelper)
        {
            #region Variables
            string prevEmployeeID = "", curEmployeeID = "";
            string shiftCode = "";
            companyCode = CompanyCode;
            centralProfile = CentralProfile;
            dbCollation = DBCollation;
            DataTable dtUserGeneratedPayTrans       = null;
            DataRow[] drArrUserGeneratedPayTrans    = null;
            bool bUserGeneratedPayTrans             = false;

            DataTable dtHolidays    = null;
            int iDecrement;
            bool bIsFound;
            int iHolPrevDayInMin;
            DataRow drHol           = null;
            DataRow[] drArrPrevDay  = null;
            DataRow drPrevDay       = null;
            int iPrevCompDayWorkMin;
            string strPrevDayCode;
            int iPaidHolidayHrs;
            bool bPrevRestDay;
            int iSundayHolidayCount;
            int iShiftInHours;
            bool bIsNewHireOrResigned;
            bool bMetHolidayPreviousDay;
            DataRow[] drArrDayCode       = null;
            DataRow[] drArrDayCodeFiller = null;

            string strDayCode;
            string strProcessDate;
            bool bIsRestDay, bIsHoliday;
            bool bApplyLateChargeQuincena;
            bool bIsGraveyard;
            bool bIsOutsideShift;
            bool bIsRegOrReg5DayCode;
            bool bOverrideGraveyardConv;
            bool bDailiesNoWorkNoPay;
            bool bRequiredLogsOnBreak;

            string strActualTimeIn1;
            string strActualTimeOut1;
            string strActualTimeIn2;
            string strActualTimeOut2;

            int iActualTimeIn1Min, iActualTimeOut1Min, iActualTimeIn2Min, iActualTimeOut2Min;
            int iConvTimeIn1Min, iConvTimeOut1Min, iConvTimeIn2Min, iConvTimeOut2Min;
            int iCompTimeIn1Min, iCompTimeOut1Min, iCompTimeIn2Min, iCompTimeOut2Min;
            int iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min;
            int iMasterShiftTimeIn1Min, iMasterShiftTimeOut1Min, iMasterShiftTimeIn2Min, iMasterShiftTimeOut2Min;
            string strMasterShiftTimeIn1, strMasterShiftTimeOut1, strMasterShiftTimeIn2, strMasterShiftTimeOut2;

            int iAbsFraction;
            int iComputedDayWorkMin;
            int iComputedRegularMin;
            int iShiftMin;
            int iInitialAbsentMin;
            int iComputedAbsentMin;
            int iTotalComputedAbsentMin;
            int iOffsetOvertimeMin;
            int iPayLeaveMin;
            int iOrigPayLeaveMin;
            int iNoPayLeaveMin;
            int iExcessLeaveMin;
            int iLeaveMinToBeAddedToReg;
            int iLeaveMinOnPaidBreak;
            int iOTRoundBreak;
            string strPayType;
            string strPayLeaveType;
            string strScheduleType = "";
            bool bNDCount;
            string strAmnesty = "";
            int iComputedOvertimeMin;
            int iAdvOTMin;
            int iAdjShiftMin; //Advanced OT column
            int iCompOTMin;
            int iPaidBreak;
            int iPaidBreakOnReg;
            bool bDonePaidBreakAdd;
            int iMasterPaidBreak;
            int iNDFraction;
            int iCompRegNightPremMin;
            int iCompOvertimeNightPremMin;
            int iTimeMinTemp;
            int iTimeMinTemp2;
            int iTimeMinTemp3;
            int iTimeMinTemp4;
            int iOTFraction;
            int iOTFractionZero;
            int iOTTemp;
            int iOTTemp2;
            int iBreakMin;
            int iEncodedOvertimeMin;
            bool bIsOutsideShiftComputedOT;
            int iNDSum;
            int iComputedLateMin;
            int iComputedLate2Min;
            int iComputedUndertime1Min;
            int iComputedUndertime2Min;
            bool bIsNewHire = false;
            string strPreviousDayReference;
            string strPreviousDayLeaveType;
            string strHireDate;
            DataTable dtNewHire = null;
            DataTable dtLeaveType = null;
            DataRow[] drArrLeaveType;

            DataRow[] drArrOTApp; //Temporary
            DataRow[] drArrOTApproved;
            int iOTStartMin;
            int iOTEndMin;
            string strOTType;
            bool bCountOTFraction;

            DataRow[] drArrLeaveAppPaid;
            DataRow[] drArrLeaveAppUnpaid;
            DataRow[] drArrLeaveApp;

            string strMasterShiftReducedTimeOut2;
            int iShiftReducedTimeOut2Min;
            DataRow[] drArrWorkAuthApproved;
            bool bWorkAuthApproved;
            int iPrevShiftReducedTimeOut2Min;
            int iPrevShiftTimeIn1Min, iPrevShiftTimeOut1Min, iPrevShiftTimeIn2Min, iPrevShiftTimeOut2Min;

            int iActualTimeIn1MinOrig;
            int iActualTimeOut2MinOrig;
            int iActualLate1Mins;
            int iActualLate2Mins;
            int iActualUT1Mins;
            int iActualUT2Mins;
            int iPayLeaveMinsDummy;
            int iNoPayLeaveMinDummy;
            int iExcessLeaveMinDummy;
            int iLeaveMinToBeAddedToRegDummy;
            int iLeaveMinOnPaidBreakDummy;

            string fillerHrCol                  = "";
            string fillerOTHrCol                = "";
            string fillerNDHrCol                = "";
            string fillerOTNDHrCol              = "";

            string fillerHrColD                 = "";
            string fillerOTHrColD               = "";
            string fillerNDHrColD               = "";
            string fillerOTNDHrColD             = "";

            string previousPayPeriod             = "";
            DataSet dsManagerLogLedger           = null;
            //DataTable dtEmpWithSalaryMovement    = null;
            //DataRow[] drArrEmpWithSalaryMovement = null;
            DataTable dtErrList = new DataTable();

            //Multiple Pocket Logic
            DataRow[] drArrEmpTimeRegisterMisc  = null;
            string strActualTimeInExt           = "";
            string strActualTimeOutExt          = "";

            int iActualTimeInExtMinOrig         = 0;
            int iActualTimeOutExtMinOrig        = 0;
            int iActualTimeInExtMin             = 0;
            int iActualTimeOutExtMin            = 0;
            int iActualTimeInExtNxtMin          = 0; //Next In Pocket Logs
            int iActualTimeOutExtNxtMin         = 0; //Next Out Pocket Logs
            int iConvTimeInExtMin               = 0;
            int iConvTimeOutExtMin              = 0;
            int iConvTimeInExtNxtMin            = 0;
            int iConvTimeOutExtNxtMin           = 0;
            int iPrevConvTimeOutExtMin          = 0; //For POCKETGAP Checking
            int iSecondHalfActualTimeInExtMin   = 0;
            int iSecondHalfConvTimeInExtMin     = 0;
            int iEXPHourMin                     = 0;
            int iTempMultPockVar                = 0;
            int iTempMultPockVar2               = 0;
            int iTempMultPockVar3               = 0;
            bool bConvLate2                     = false;
            bool bWholeDayLogs                  = false;
            bool bWholeDayLeave                 = false;

            int iStartTime                      = 0;
            int iEndTime                        = 0;
            string strType                      = "";
            string strDayUnit                   = "";
            int iPocket                         = 0;
            bool bPaidLeave                     = false;
            int iStartTimeNxt                   = 0;
            int iEndTimeNxt                     = 0;
            string strTypeNxt                   = "";
            string strDayUnitNxt                = "";
            int iPocketNxt                      = 0;
            int iRowNxt                         = 0;
            bool bPaidLeaveNxt                  = false;
            string strRemarks                   = "";
            #endregion

            try
            {
                #region Initial Setup
                //dal = new DALHelper();
                this.dal = dalHelper;
                SystemCycleProcessingBL = new SystemCycleProcessingBL(dal, PayrollPeriod, UserLogin, CompanyCode, CentralProfile);
                commonBL = new CommonBL();
                //-----------------------------
                //Check for Existing Day Codes
                dtDayCodeMaster = GetDayCodeMasterData();
                if (commonBL.GetFillerDayCodesCount(CompanyCode, CentralProfile, dal) > 0)
                {
                    bHasDayCodeExt = true;
                    dtDayCodeFillers = commonBL.GetDayCodeFillers(CompanyCode, CentralProfile, dal);
                }
                else
                {
                    bHasDayCodeExt = false;
                    dtDayCodeFillers = null;
                }
                //dtDefaultShift = GetDefaultShift();
                //-----------------------------
                //Create and initialize payroll transaction tables
                #region Create payroll trans table
                DALHelper dalTemp = new DALHelper();
                
                if (ProcessCurrentPeriod)
                {
                    if (ProcessSeparated)
                    {
                        EmpPayTranHdrTable      = CommonConstants.TableName.T_EmpPayTranHdrFinalPay;
                        EmpPayTranDtlTable      = CommonConstants.TableName.T_EmpPayTranDtlFinalPay;      
                        EmpPayTranHdrMiscTable  = CommonConstants.TableName.T_EmpPayTranHdrMiscFinalPay; 
                        EmpPayTranDtlMiscTable  = CommonConstants.TableName.T_EmpPayTranDtlMiscFinalPay;
                        dtEmpPayTranHdr         = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranHdrFinalPay, dalTemp);
                        dtEmpPayTranHdrMisc     = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranHdrMiscFinalPay, dalTemp);
                        dtEmpPayTranDtl         = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranDtlFinalPay, dalTemp);
                        dtEmpPayTranDtlMisc     = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranDtlMiscFinalPay, dalTemp);
                    }
                    else
                    {
                        EmpPayTranHdrTable      = CommonConstants.TableName.T_EmpPayTranHdr;
                        EmpPayTranDtlTable      = CommonConstants.TableName.T_EmpPayTranDtl; 
                        EmpPayTranHdrMiscTable  = CommonConstants.TableName.T_EmpPayTranHdrMisc;  
                        EmpPayTranDtlMiscTable  = CommonConstants.TableName.T_EmpPayTranDtlMisc;  
                        dtEmpPayTranHdr         = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranHdr, dalTemp);
                        dtEmpPayTranHdrMisc     = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranHdrMisc, dalTemp);
                        dtEmpPayTranDtl         = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranDtl, dalTemp);
                        dtEmpPayTranDtlMisc     = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranDtlMisc, dalTemp);
                    }
                }
                else
                {
                    if (!ProcessSeparated)
                    {
                        EmpPayTranHdrTable      = CommonConstants.TableName.T_EmpPayTranHdrHst;
                        EmpPayTranDtlTable      = CommonConstants.TableName.T_EmpPayTranDtlHst; 
                        EmpPayTranHdrMiscTable  = CommonConstants.TableName.T_EmpPayTranHdrMiscHst;  
                        EmpPayTranDtlMiscTable  = CommonConstants.TableName.T_EmpPayTranDtlMiscHst; 
                        dtEmpPayTranHdr         = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranHdrHst, dalTemp);
                        dtEmpPayTranHdrMisc     = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranHdrMiscHst, dalTemp);
                        dtEmpPayTranDtl         = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranDtlHst, dalTemp);
                        dtEmpPayTranDtlMisc     = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranDtlMiscHst, dalTemp);
                    }
                    else
                    {
                        EmpPayTranHdrTable      = CommonConstants.TableName.T_EmpPayTranHdrFinalPay;
                        EmpPayTranDtlTable      = CommonConstants.TableName.T_EmpPayTranDtlFinalPay;
                        EmpPayTranHdrMiscTable  = CommonConstants.TableName.T_EmpPayTranHdrMiscFinalPay;
                        EmpPayTranDtlMiscTable  = CommonConstants.TableName.T_EmpPayTranDtlMiscFinalPay;  
                        dtEmpPayTranHdr         = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranHdrFinalPay, dalTemp);
                        dtEmpPayTranHdrMisc     = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranHdrMiscFinalPay, dalTemp);
                        dtEmpPayTranDtl         = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranDtlFinalPay, dalTemp);
                        dtEmpPayTranDtlMisc     = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranDtlMiscFinalPay, dalTemp);
                    }   

                    if (bProcessTrail)
                    {
                        EmpPayTranHdrTable      = CommonConstants.TableName.T_EmpPayTranHdrTrl;
                        EmpPayTranDtlTable      = CommonConstants.TableName.T_EmpPayTranDtlTrl; 
                        EmpPayTranHdrMiscTable  = CommonConstants.TableName.T_EmpPayTranHdrMiscTrl; 
                        EmpPayTranDtlMiscTable  = CommonConstants.TableName.T_EmpPayTranDtlMiscTrl;
                        dtEmpPayTranHdr         = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranHdrTrl, dalTemp);
                        dtEmpPayTranHdrMisc     = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranHdrMiscTrl, dalTemp);
                        dtEmpPayTranDtl         = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranDtlTrl, dalTemp);
                        dtEmpPayTranDtlMisc     = DbRecord.GenerateTable(CommonConstants.TableName.T_EmpPayTranDtlMiscTrl, dalTemp);
                    }
                }
                indexPayTrans = -1;
                indexPayTransExt = -1;
                #endregion
                #region Initialize payroll trans row
                drEmpPayTranHdr = dtEmpPayTranHdr.NewRow();
                if (bHasDayCodeExt)
                    drEmpPayTranHdrMisc = dtEmpPayTranHdrMisc.NewRow();

                drEmpPayTranDtlPrev = null;
                drEmpPayTranDtl = dtEmpPayTranDtl.NewRow();
                if (bHasDayCodeExt)
                    drEmpPayTranDtlMisc = dtEmpPayTranDtlMisc.NewRow();
                #region Initialize payroll trans detail hours
                drEmpPayTranDtl["Tpd_LTHr"]                     = 0;
                drEmpPayTranDtl["Tpd_UTHr"]                     = 0;
                drEmpPayTranDtl["Tpd_UPLVHr"]                   = 0;
                drEmpPayTranDtl["Tpd_ABSLEGHOLHr"]              = 0;
                drEmpPayTranDtl["Tpd_ABSSPLHOLHr"]              = 0;
                drEmpPayTranDtl["Tpd_ABSCOMPHOLHr"]             = 0;
                drEmpPayTranDtl["Tpd_ABSPSDHr"]                 = 0;
                drEmpPayTranDtl["Tpd_ABSOTHHOLHr"]              = 0;
                drEmpPayTranDtl["Tpd_WDABSHr"]                  = 0;
                drEmpPayTranDtl["Tpd_LTUTMaxHr"]                = 0;
                drEmpPayTranDtl["Tpd_REGHr"]                    = 0;
                drEmpPayTranDtl["Tpd_PDLVHr"]                   = 0;
                drEmpPayTranDtl["Tpd_PDLEGHOLHr"]               = 0;
                drEmpPayTranDtl["Tpd_PDSPLHOLHr"]               = 0;
                drEmpPayTranDtl["Tpd_PDCOMPHOLHr"]              = 0;
                drEmpPayTranDtl["Tpd_PDPSDHr"]                  = 0; 
                drEmpPayTranDtl["Tpd_PDOTHHOLHr"]               = 0;
                drEmpPayTranDtl["Tpd_PDRESTLEGHOLHr"]           = 0;
                drEmpPayTranDtl["Tpd_REGOTHr"]                  = 0;
                drEmpPayTranDtl["Tpd_REGNDHr"]                  = 0;
                drEmpPayTranDtl["Tpd_REGNDOTHr"]                = 0;
                drEmpPayTranDtl["Tpd_RESTHr"]                   = 0;
                drEmpPayTranDtl["Tpd_RESTOTHr"]                 = 0;
                drEmpPayTranDtl["Tpd_RESTNDHr"]                 = 0;
                drEmpPayTranDtl["Tpd_RESTNDOTHr"]               = 0;
                drEmpPayTranDtl["Tpd_LEGHOLHr"]                 = 0;
                drEmpPayTranDtl["Tpd_LEGHOLOTHr"]               = 0;
                drEmpPayTranDtl["Tpd_LEGHOLNDHr"]               = 0;
                drEmpPayTranDtl["Tpd_LEGHOLNDOTHr"]             = 0;
                drEmpPayTranDtl["Tpd_SPLHOLHr"]                 = 0;
                drEmpPayTranDtl["Tpd_SPLHOLOTHr"]               = 0;
                drEmpPayTranDtl["Tpd_SPLHOLNDHr"]               = 0;
                drEmpPayTranDtl["Tpd_SPLHOLNDOTHr"]             = 0;
                drEmpPayTranDtl["Tpd_PSDHr"]                    = 0;
                drEmpPayTranDtl["Tpd_PSDOTHr"]                  = 0;
                drEmpPayTranDtl["Tpd_PSDNDHr"]                  = 0;
                drEmpPayTranDtl["Tpd_PSDNDOTHr"]                = 0;
                drEmpPayTranDtl["Tpd_COMPHOLHr"]                = 0;
                drEmpPayTranDtl["Tpd_COMPHOLOTHr"]              = 0;
                drEmpPayTranDtl["Tpd_COMPHOLNDHr"]              = 0;
                drEmpPayTranDtl["Tpd_COMPHOLNDOTHr"]            = 0;
                drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]             = 0;
                drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"]           = 0;
                drEmpPayTranDtl["Tpd_RESTLEGHOLNDHr"]           = 0;
                drEmpPayTranDtl["Tpd_RESTLEGHOLNDOTHr"]         = 0;
                drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]             = 0;
                drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"]           = 0;
                drEmpPayTranDtl["Tpd_RESTSPLHOLNDHr"]           = 0;
                drEmpPayTranDtl["Tpd_RESTSPLHOLNDOTHr"]         = 0;
                drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]            = 0;
                drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"]          = 0;
                drEmpPayTranDtl["Tpd_RESTCOMPHOLNDHr"]          = 0;
                drEmpPayTranDtl["Tpd_RESTCOMPHOLNDOTHr"]        = 0;
                drEmpPayTranDtl["Tpd_RESTPSDHr"]                = 0;
                drEmpPayTranDtl["Tpd_RESTPSDOTHr"]              = 0;
                drEmpPayTranDtl["Tpd_RESTPSDNDHr"]              = 0;
                drEmpPayTranDtl["Tpd_RESTPSDNDOTHr"]            = 0;
                #endregion
                #region Initialize payroll trans detail ext hours
                if (bHasDayCodeExt)
                {
                    for (int i = 1; i <= FILLERCNT; i++)
                    {
                        //initialize
                        fillerHrCol     = string.Format("Tph_Misc{0:0}Hr", i);
                        fillerOTHrCol   = string.Format("Tph_Misc{0:0}OTHr", i);
                        fillerNDHrCol   = string.Format("Tph_Misc{0:0}NDHr", i);
                        fillerOTNDHrCol = string.Format("Tph_Misc{0:0}NDOTHr", i);

                        fillerHrColD = string.Format("Tpd_Misc{0:0}Hr", i);
                        fillerOTHrColD = string.Format("Tpd_Misc{0:0}OTHr", i);
                        fillerNDHrColD = string.Format("Tpd_Misc{0:0}NDHr", i);
                        fillerOTNDHrColD = string.Format("Tpd_Misc{0:0}NDOTHr", i);

                        drEmpPayTranHdrMisc[fillerHrCol]        = 0;
                        drEmpPayTranHdrMisc[fillerOTHrCol]      = 0;
                        drEmpPayTranHdrMisc[fillerNDHrCol]      = 0;
                        drEmpPayTranHdrMisc[fillerOTNDHrCol]    = 0;

                        drEmpPayTranDtlMisc[fillerHrColD]        = 0;
                        drEmpPayTranDtlMisc[fillerOTHrColD]      = 0;
                        drEmpPayTranDtlMisc[fillerNDHrColD]      = 0;
                        drEmpPayTranDtlMisc[fillerOTNDHrColD]    = 0;
                    }
                }
                #endregion
                #endregion
                //-----------------------------
                //dal.OpenDB();
                //dal.BeginTransactionSnapshot();
                //code start
                //-----------------------------
                if (!ProcessCurrentPeriod)
                {
                    EmpTimeRegisterTable        = CommonConstants.TableName.T_EmpTimeRegisterHst;
                    EmpTimeRegisterMiscTable    = CommonConstants.TableName.T_EmpTimeRegisterMiscHst;
                    if (bProcessTrail)
                        EmpTimeRegisterTable    = CommonConstants.TableName.T_EmpTimeRegisterTrl;
                }
                else
                {
                    EmpTimeRegisterTable        = CommonConstants.TableName.T_EmpTimeRegister;
                    EmpTimeRegisterMiscTable    = CommonConstants.TableName.T_EmpTimeRegisterMisc;
                }
                ProcessPayrollPeriod = PayrollPeriod;
                LoginUser = UserLogin;

                DataTable dtPayPeriod = GetPayPeriodCycle(ProcessPayrollPeriod);
                if (dtPayPeriod.Rows.Count > 0)
                {
                    PayrollStart = dtPayPeriod.Rows[0][1].ToString();
                    PayrollEnd = dtPayPeriod.Rows[0][2].ToString();
                }
                //-----------------------------
                SetProcessFlags();
                InitializeLaborHourReport();
                //-----------------------------
                //No OT for managers during first quincena
                if (!Convert.ToBoolean(OTFORMGR))
                    previousPayPeriod = GetPrevPayPeriod(ProcessPayrollPeriod, dal);
                //-----------------------------
                //StatusHandler(this, new StatusEventArgs("Execute Pre-Labor Hours Generation Procedures", false));
                //string strFormulaQuery = GetPreLaborHoursFormula();
                //if (strFormulaQuery != "")
                //{
                //    if (!ProcessAll && EmployeeId != "")
                //        dal.ExecuteNonQuery(strFormulaQuery.Replace("@PayPeriod", "'" + ProcessPayrollPeriod + "'").Replace("@EmployeeID", "'" + EmployeeId + "'").Replace("@EmployeeList", "''").Replace("@IsEmployeeList", (EmployeeList != "") ? "1" : "0"));
                //    else if (ProcessAll == true && EmployeeList != "")
                //        dal.ExecuteNonQuery(strFormulaQuery.Replace("@PayPeriod", "'" + ProcessPayrollPeriod + "'").Replace("@EmployeeID", "''").Replace("@EmployeeList", EmployeeList).Replace("@IsEmployeeList", (EmployeeList != "") ? "1" : "0"));
                //    else if (ProcessAll == true)
                //        dal.ExecuteNonQuery(strFormulaQuery.Replace("@PayPeriod", "'" + ProcessPayrollPeriod + "'").Replace("@EmployeeID", "''").Replace("@EmployeeList", "''").Replace("@IsEmployeeList", (EmployeeList != "") ? "1" : "0"));
                //}
                //StatusHandler(this, new StatusEventArgs("Execute Pre-Labor Hours Generation Procedures", true));
                //-----------------------------
                //Prepare master data for processing
                dtUserGeneratedPayTrans = GetUserGeneratedPayrollTransactionRecords(ProcessAll, EmployeeId);
                StatusHandler(this, new StatusEventArgs("Cleaning Time & Attendance Tables", false));
                if (ProcessCurrentPeriod || ProcessSeparated)
                {
                    ClearTransactionTables(ProcessAll, EmployeeId, PayrollPeriod, false);
                    CleanUpBeforeGeneration(ProcessAll, EmployeeId);
                }
                else if (!ProcessCurrentPeriod && !bProcessTrail)
                {
                    ClearTransactionHistTables(ProcessAll, EmployeeId, PayrollPeriod);
                }
                StatusHandler(this, new StatusEventArgs("Cleaning Time & Attendance Tables", true));

                StatusHandler(this, new StatusEventArgs("Extracting Time Register Records", false));
                dtEmpTimeRegister     = GetAllEmployeeForProcess(ProcessAll, EmployeeId, Convert.ToBoolean(FLEXSHIFT));
                dtEmpTimeRegisterMisc = GetLogLedgerExtensionRecords(ProcessAll, EmployeeId);
                StatusHandler(this, new StatusEventArgs("Extracting Time Register Records", true));

                if (!bProcessTrail)
                {
                    StatusHandler(this, new StatusEventArgs("Extracting Overtime and Leave Records", false));
                    dtOvertimeTable    = GetAllOvertimeRecords(ProcessAll, EmployeeId, Convert.ToBoolean(FLEXSHIFT));
                    dtWorkAuthTable    = GetAllWorkAuthorizationRecords(ProcessAll, EmployeeId, Convert.ToBoolean(FLEXSHIFT));
                    dtLeaveTable       = GetAllLeaveAvailmentRecords(ProcessAll, EmployeeId, true);
                    dtUnpaidLeaveTable = GetAllLeaveAvailmentRecords(ProcessAll, EmployeeId, false);
                    //if (Convert.ToBoolean(TKOFFSET))
                    //    dtOffsetTable = GetAllOffsetApplications(ProcessAll, EmployeeId);
                    StatusHandler(this, new StatusEventArgs("Extracting Overtime and Leave Records", true));

                    StatusHandler(this, new StatusEventArgs("Extracting Holiday Records", false));
                    dtHolidays = GetAllHolidaysForCurrentPeriod();
                    StatusHandler(this, new StatusEventArgs("Extracting Holiday Records", true));

                    dtNewHire   = GetNewHireInCurrentPayPeriod(ProcessAll, EmployeeId);
                    dtLeaveType = GetLeaveTypes();
                }
                #endregion
                //-----------------------------START MAIN PROCESS
                if (dtEmpTimeRegister.Rows.Count > 0)
                {
                    //Initialize some variables
                    bApplyLateChargeQuincena = false;
                    //dtEmpWithSalaryMovement = GetEmployeesWithSalaryMovement(ProcessAll, EmployeeId);
                    if (Convert.ToBoolean(HRFRCLBRHR))
                        dtNextDayCodeLastDay = GetNextDayCodeForLastDay(Convert.ToDateTime(PayrollEnd), ProcessAll, EmployeeId);

                    for (int i = 0; i < dtEmpTimeRegister.Rows.Count + 1; i++) //add extra loop to save last employee record
                    {
                        try
                        {
                            //checking of current employee processed
                            if (i < dtEmpTimeRegister.Rows.Count)
                                curEmployeeID = dtEmpTimeRegister.Rows[i]["Ttr_IDNo"].ToString();
                            else
                                curEmployeeID = "";

                            #region Save to Payroll Transaction
                            if (curEmployeeID != prevEmployeeID)
                            {
                                //process previous employee record
                                if (indexPayTrans >= 0)
                                {
                                    EmpDispHandler(this, new EmpDispEventArgs(prevEmployeeID, dtEmpTimeRegister.Rows[i - 1]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i - 1]["Mem_FirstName"].ToString()));

                                    #region Check OT Hours Quota
                                    if (!Convert.ToBoolean(OTFORMGR))
                                    {
                                        if (GetApplicableHrsFromCommaDelimitedTable(OTLIMITHR_TBL
                                                                                    , dtEmpTimeRegister.Rows[i - 1]["Mem_PayrollGroup"].ToString()
                                                                                    , dtEmpTimeRegister.Rows[i - 1]["Mem_EmploymentStatusCode"].ToString()
                                                                                    , dtEmpTimeRegister.Rows[i - 1]["Mem_PayrollType"].ToString()
                                                                                    , dtEmpTimeRegister.Rows[i - 1]["Mem_PositionGrade"].ToString()
                                                                                    , OTLIMITHR_ORIG
                                                                                    , ref OTLIMITHR) == true)
                                        {
                                            if (OTLIMITAPP == 2)
                                            {
                                                if (ProcessPayrollPeriod.Substring(6, 1).Equals("1"))
                                                {
                                                    #region Zero-out all overtime hours
                                                    RegularOTHr                     = 0;
                                                    RestdayHr                       = 0;
                                                    RestdayOTHr                     = 0;
                                                    LegalHolidayHr                  = 0;
                                                    LegalHolidayOTHr                = 0;
                                                    SpecialHolidayHr                = 0;
                                                    SpecialHolidayOTHr              = 0;
                                                    PlantShutdownHr                 = 0;
                                                    PlantShutdownOTHr               = 0;
                                                    CompanyHolidayHr                = 0;
                                                    CompanyHolidayOTHr              = 0;
                                                    RestdayLegalHolidayHr           = 0;
                                                    RestdayLegalHolidayOTHr         = 0;
                                                    RestdaySpecialHolidayHr         = 0;
                                                    RestdaySpecialHolidayOTHr       = 0;
                                                    RestdayCompanyHolidayHr         = 0;
                                                    RestdayCompanyHolidayOTHr       = 0;
                                                    RestdayPlantShutdownHr          = 0;
                                                    RestdayPlantShutdownOTHr        = 0;

                                                    #region Payroll Transaction Detail Update
                                                    if (!ProcessCurrentPeriod || Convert.ToBoolean(HRFRCLBRHR) == true || Convert.ToBoolean(MULTSAL) == true)
                                                    {
                                                        drArrOTApp = dtEmpPayTranDtl.Select("Tpd_IDNo = '" + prevEmployeeID + "'");
                                                        foreach (DataRow drRow in drArrOTApp)
                                                        {
                                                            drRow["Tpd_REGOTHr"]            = 0;
                                                            drRow["Tpd_RESTHr"]             = 0;
                                                            drRow["Tpd_RESTOTHr"]           = 0;
                                                            drRow["Tpd_LEGHOLHr"]           = 0;
                                                            drRow["Tpd_LEGHOLOTHr"]         = 0;
                                                            drRow["Tpd_SPLHOLHr"]           = 0;
                                                            drRow["Tpd_SPLHOLOTHr"]         = 0;
                                                            drRow["Tpd_PSDHr"]              = 0;
                                                            drRow["Tpd_PSDOTHr"]            = 0;
                                                            drRow["Tpd_COMPHOLHr"]          = 0;
                                                            drRow["Tpd_COMPHOLOTHr"]        = 0;
                                                            drRow["Tpd_RESTLEGHOLHr"]       = 0;
                                                            drRow["Tpd_RESTLEGHOLOTHr"]     = 0;
                                                            drRow["Tpd_RESTSPLHOLHr"]       = 0;
                                                            drRow["Tpd_RESTSPLHOLOTHr"]     = 0;
                                                            drRow["Tpd_RESTCOMPHOLHr"]      = 0;
                                                            drRow["Tpd_RESTCOMPHOLOTHr"]    = 0;
                                                            drRow["Tpd_RESTPSDHr"]          = 0;
                                                            drRow["Tpd_RESTPSDOTHr"]        = 0;
                                                        }

                                                        if (bHasDayCodeExt)
                                                        {
                                                            drArrOTApp = dtEmpPayTranDtlMisc.Select("Tpd_IDNo = '" + prevEmployeeID + "'");
                                                            foreach (DataRow drRow in drArrOTApp)
                                                            {
                                                                for (int k = 1; k <= FILLERCNT; k++)
                                                                {
                                                                    fillerHrColD            = string.Format("Tpd_Misc{0:0}Hr", k);
                                                                    fillerOTHrColD          = string.Format("Tpd_Misc{0:0}OTHr", k);
                                                                    drRow[fillerHrColD]     = 0;
                                                                    drRow[fillerOTHrColD]   = 0;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    #endregion

                                                    if (bHasDayCodeExt)
                                                    {
                                                        for (int k = 1; k <= FILLERCNT; k++)
                                                        {
                                                            fillerHrCol = string.Format("Tph_Misc{0:0}Hr", k);
                                                            fillerOTHrCol = string.Format("Tph_Misc{0:0}OTHr", k);
                                                            drEmpPayTranHdrMisc[fillerHrCol] = 0;
                                                            drEmpPayTranHdrMisc[fillerOTHrCol] = 0;
                                                        }
                                                    }
                                                    #endregion
                                                }
                                                else if (ProcessPayrollPeriod.Substring(6, 1).Equals("2"))
                                                {
                                                    #region Check if exceed OT quota
                                                    dsManagerLogLedger = GetPrevPayPeriodOTSumAndJobStatus(prevEmployeeID, previousPayPeriod, dal);
                                                    if (dsManagerLogLedger.Tables[1].Rows.Count > 0)
                                                    {
                                                        if (GetApplicableHrsFromCommaDelimitedTable(OTLIMITHR_TBL
                                                                                                    , dsManagerLogLedger.Tables[1].Rows[0][1].ToString()
                                                                                                    , dsManagerLogLedger.Tables[1].Rows[0][2].ToString()
                                                                                                    , dsManagerLogLedger.Tables[1].Rows[0][3].ToString()
                                                                                                    , dsManagerLogLedger.Tables[1].Rows[0][4].ToString()
                                                                                                    , OTLIMITHR_ORIG
                                                                                                    , ref OTLIMITHR) == true)
                                                        {
                                                            if (dsManagerLogLedger.Tables[0].Rows.Count > 0)
                                                            {
                                                                #region Add hours to current
                                                                RegularOTHr                 += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_REGOTHrTemp"]);
                                                                RestdayOTHr                 += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_RESTOTHr"]);
                                                                LegalHolidayOTHr            += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_LEGHOLOTHr"]);
                                                                SpecialHolidayOTHr          += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_SPLHOLOTHr"]);
                                                                PlantShutdownOTHr           += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_PSDOTHr"]);
                                                                CompanyHolidayOTHr          += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_COMPHOLOTHr"]);
                                                                RestdayLegalHolidayOTHr     += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_RESTLEGHOLOTHr"]);
                                                                RestdaySpecialHolidayOTHr   += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_RESTSPLHOLOTHr"]);
                                                                RestdayCompanyHolidayOTHr   += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_RESTCOMPHOLOTHr"]);
                                                                RestdayPlantShutdownOTHr    += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_RESTPSDOTHr"]);
                                                                //(Counted as OT)
                                                                RestdayHr                   += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_RESTHr"]);
                                                                LegalHolidayHr              += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_LEGHOLHr"]);
                                                                SpecialHolidayHr            += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_SPLHOLHr"]);
                                                                PlantShutdownHr             += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_PSDHr"]);
                                                                CompanyHolidayHr            += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_COMPHOLHr"]);
                                                                RestdayLegalHolidayHr       += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_RESTLEGHOLHr"]);
                                                                RestdaySpecialHolidayHr     += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_RESTSPLHOLHr"]);
                                                                RestdayCompanyHolidayHr     += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_RESTCOMPHOLHr"]);
                                                                RestdayPlantShutdownHr      += Convert.ToDouble(dsManagerLogLedger.Tables[0].Rows[0]["Tph_RESTPSDHr"]);
                                                                #endregion
                                                            }
                                                        }
                                                    }
                                                    #endregion
                                                }
                                            }

                                            //Get sum
                                            double OTSum = 0.0;
                                            OTSum += RegularOTHr + RestdayOTHr + LegalHolidayOTHr + SpecialHolidayOTHr + PlantShutdownOTHr + CompanyHolidayOTHr
                                                    + RestdayLegalHolidayOTHr + RestdaySpecialHolidayOTHr + RestdayCompanyHolidayOTHr + RestdayPlantShutdownOTHr
                                                    + RestdayHr + LegalHolidayHr + SpecialHolidayHr + PlantShutdownHr + CompanyHolidayHr
                                                    + RestdayLegalHolidayHr + RestdaySpecialHolidayHr + RestdayCompanyHolidayHr + RestdayPlantShutdownHr;
                                            if (bHasDayCodeExt)
                                            {
                                                for (int l = 1; l <= FILLERCNT; l++)
                                                {
                                                    fillerHrCol = string.Format("Tph_Misc{0:0}Hr", l);
                                                    fillerOTHrCol = string.Format("Tph_Misc{0:0}OTHr", l);
                                                    OTSum += Convert.ToDouble(drEmpPayTranHdrMisc[fillerHrCol]);
                                                    OTSum += Convert.ToDouble(drEmpPayTranHdrMisc[fillerOTHrCol]);
                                                }
                                            }

                                            #region Zero-out all overtime hours
                                            RegularOTHr                 = 0;
                                            RestdayHr                   = 0;
                                            RestdayOTHr                 = 0;
                                            LegalHolidayHr              = 0;
                                            LegalHolidayOTHr            = 0;
                                            SpecialHolidayHr            = 0;
                                            SpecialHolidayOTHr          = 0;
                                            PlantShutdownHr             = 0;
                                            PlantShutdownOTHr           = 0;
                                            CompanyHolidayHr            = 0;
                                            CompanyHolidayOTHr          = 0;
                                            RestdayLegalHolidayHr       = 0;
                                            RestdayLegalHolidayOTHr     = 0;
                                            RestdaySpecialHolidayHr     = 0;
                                            RestdaySpecialHolidayOTHr   = 0;
                                            RestdayCompanyHolidayHr     = 0;
                                            RestdayCompanyHolidayOTHr   = 0;
                                            RestdayPlantShutdownHr      = 0;
                                            RestdayPlantShutdownOTHr    = 0;

                                            #region Payroll Transaction Detail Update
                                            if (!ProcessCurrentPeriod || Convert.ToBoolean(HRFRCLBRHR) == true || Convert.ToBoolean(MULTSAL) == true)
                                            {
                                                drArrOTApp = dtEmpPayTranDtl.Select("Tpd_IDNo = '" + prevEmployeeID + "'");
                                                foreach (DataRow drRow in drArrOTApp)
                                                {
                                                    drRow["Tpd_REGOTHr"]        = 0;
                                                    drRow["Tpd_RESTHr"]         = 0;
                                                    drRow["Tpd_RESTOTHr"]       = 0;
                                                    drRow["Tpd_LEGHOLHr"]       = 0;
                                                    drRow["Tpd_LEGHOLOTHr"]     = 0;
                                                    drRow["Tpd_SPLHOLHr"]       = 0;
                                                    drRow["Tpd_SPLHOLOTHr"]     = 0;
                                                    drRow["Tpd_PSDHr"]          = 0;
                                                    drRow["Tpd_PSDOTHr"]        = 0;
                                                    drRow["Tpd_COMPHOLHr"]      = 0;
                                                    drRow["Tpd_COMPHOLOTHr"]    = 0;
                                                    drRow["Tpd_RESTLEGHOLHr"]   = 0;
                                                    drRow["Tpd_RESTLEGHOLOTHr"] = 0;
                                                    drRow["Tpd_RESTSPLHOLHr"]   = 0;
                                                    drRow["Tpd_RESTSPLHOLOTHr"] = 0;
                                                    drRow["Tpd_RESTCOMPHOLHr"]  = 0;
                                                    drRow["Tpd_RESTCOMPHOLOTHr"] = 0;
                                                    drRow["Tpd_RESTPSDHr"]      = 0;
                                                    drRow["Tpd_RESTPSDOTHr"]    = 0;
                                                }

                                                if (bHasDayCodeExt)
                                                {
                                                    drArrOTApp = dtEmpPayTranDtlMisc.Select("Tpd_IDNo = '" + prevEmployeeID + "'");
                                                    foreach (DataRow drRow in drArrOTApp)
                                                    {
                                                        for (int k = 1; k <= FILLERCNT; k++)
                                                        {
                                                            fillerHrColD = string.Format("Tpd_Misc{0:0}Hr", k);
                                                            fillerOTHrColD = string.Format("Tpd_Misc{0:0}OTHr", k);
                                                            drRow[fillerHrColD] = 0;
                                                            drRow[fillerOTHrColD] = 0;
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion

                                            if (bHasDayCodeExt)
                                            {
                                                for (int m = 1; m <= FILLERCNT; m++)
                                                {
                                                    fillerHrCol = string.Format("Tph_Misc{0:0}Hr", m);
                                                    fillerOTHrCol = string.Format("Tph_Misc{0:0}OTHr", m);
                                                    drEmpPayTranHdrMisc[fillerHrCol] = 0;
                                                    drEmpPayTranHdrMisc[fillerOTHrCol] = 0;
                                                }
                                            }
                                            #endregion

                                            GetApplicableHrsFromCommaDelimitedTable(OTLIMITEQV_TBL
                                                                                    , dtEmpTimeRegister.Rows[i - 1]["Mem_PayrollGroup"].ToString()
                                                                                    , dtEmpTimeRegister.Rows[i - 1]["Mem_EmploymentStatusCode"].ToString()
                                                                                    , dtEmpTimeRegister.Rows[i - 1]["Mem_PayrollType"].ToString()
                                                                                    , dtEmpTimeRegister.Rows[i - 1]["Mem_PositionGrade"].ToString()
                                                                                    , OTLIMITEQV_ORIG
                                                                                    , ref OTLIMITEQV);
                                            if (OTSum >= OTLIMITHR)
                                            {
                                                RegularOTHr = OTLIMITEQV;

                                                drArrOTApp = dtEmpPayTranDtl.Select("Tpd_IDNo = '" + prevEmployeeID + "'"); //
                                                if (drArrOTApp.Length > 0)
                                                    drArrOTApp[0]["Tpd_REGOTHr"] = OTLIMITEQV;
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Copy to employee payroll transaction table
                                    if (bUserGeneratedPayTrans == false || !ProcessCurrentPeriod) //allow save if past pay period
                                    {
                                        drEmpPayTranHdr["Tph_IDNo"]                     = prevEmployeeID;
                                        drEmpPayTranHdr["Tph_PayCycle"]                 = ProcessPayrollPeriod;
                                        drEmpPayTranHdr["Tph_LTHr"]                     = LateHours;
                                        drEmpPayTranHdr["Tph_UTHr"]                     = UndertimeHours;
                                        drEmpPayTranHdr["Tph_UPLVHr"]                   = UnpaidLeaveHours;
                                        drEmpPayTranHdr["Tph_ABSLEGHOLHr"]              = AbsentLegalHolidayHr;
                                        drEmpPayTranHdr["Tph_ABSSPLHOLHr"]              = AbsentSpecialHolidayHr;
                                        drEmpPayTranHdr["Tph_ABSCOMPHOLHr"]             = AbsentCompanyHolidayHr;
                                        drEmpPayTranHdr["Tph_ABSPSDHr"]                 = AbsentPlantShutdownHr;
                                        drEmpPayTranHdr["Tph_ABSOTHHOLHr"]              = AbsentFillerHolidayHr;
                                        drEmpPayTranHdr["Tph_WDABSHr"]                  = WholeDayAbsentHours;
                                        drEmpPayTranHdr["Tph_LTUTMaxHr"]                = LateUndertimeMaxAbsentHours;
                                        drEmpPayTranHdr["Tph_ABSHr"]                    = AbsentHr;
                                        drEmpPayTranHdr["Tph_REGHr"]                    = RegularHrMonthlyDailyPay;
                                        drEmpPayTranHdr["Tph_PDLVHr"]                   = PaidLeaveHours;
                                        drEmpPayTranHdr["Tph_PDLEGHOLHr"]               = PaidLegalHolidayHr;
                                        drEmpPayTranHdr["Tph_PDSPLHOLHr"]               = PaidSpecialHolidayHr;
                                        drEmpPayTranHdr["Tph_PDCOMPHOLHr"]              = PaidCompanyHolidayHr;
                                        drEmpPayTranHdr["Tph_PDPSDHr"]                  = PaidPlantShutdownHolidayHr; //new
                                        drEmpPayTranHdr["Tph_PDOTHHOLHr"]               = PaidFillerHolidayHr;
                                        drEmpPayTranHdr["Tph_PDRESTLEGHOLHr"]           = RestdayLegalHolidayCount;
                                        drEmpPayTranHdr["Tph_REGOTHr"]                  = RegularOTHr;
                                        drEmpPayTranHdr["Tph_REGNDHr"]                  = RegularNDHr;
                                        drEmpPayTranHdr["Tph_REGNDOTHr"]                = RegularOTNDHr;
                                        drEmpPayTranHdr["Tph_RESTHr"]                   = RestdayHr;
                                        drEmpPayTranHdr["Tph_RESTOTHr"]                 = RestdayOTHr;
                                        drEmpPayTranHdr["Tph_RESTNDHr"]                 = RestdayNDHr;
                                        drEmpPayTranHdr["Tph_RESTNDOTHr"]               = RestdayOTNDHr;
                                        drEmpPayTranHdr["Tph_LEGHOLHr"]                 = LegalHolidayHr;
                                        drEmpPayTranHdr["Tph_LEGHOLOTHr"]               = LegalHolidayOTHr;
                                        drEmpPayTranHdr["Tph_LEGHOLNDHr"]               = LegalHolidayNDHr;
                                        drEmpPayTranHdr["Tph_LEGHOLNDOTHr"]             = LegalHolidayOTNDHr;
                                        drEmpPayTranHdr["Tph_SPLHOLHr"]                 = SpecialHolidayHr;
                                        drEmpPayTranHdr["Tph_SPLHOLOTHr"]               = SpecialHolidayOTHr;
                                        drEmpPayTranHdr["Tph_SPLHOLNDHr"]               = SpecialHolidayNDHr;
                                        drEmpPayTranHdr["Tph_SPLHOLNDOTHr"]             = SpecialHolidayOTNDHr;
                                        drEmpPayTranHdr["Tph_PSDHr"]                    = PlantShutdownHr;
                                        drEmpPayTranHdr["Tph_PSDOTHr"]                  = PlantShutdownOTHr;
                                        drEmpPayTranHdr["Tph_PSDNDHr"]                  = PlantShutdownNDHr;
                                        drEmpPayTranHdr["Tph_PSDNDOTHr"]                = PlantShutdownOTNDHr;
                                        drEmpPayTranHdr["Tph_COMPHOLHr"]                = CompanyHolidayHr;
                                        drEmpPayTranHdr["Tph_COMPHOLOTHr"]              = CompanyHolidayOTHr;
                                        drEmpPayTranHdr["Tph_COMPHOLNDHr"]              = CompanyHolidayNDHr;
                                        drEmpPayTranHdr["Tph_COMPHOLNDOTHr"]            = CompanyHolidayOTNDHr;
                                        drEmpPayTranHdr["Tph_RESTLEGHOLHr"]             = RestdayLegalHolidayHr;
                                        drEmpPayTranHdr["Tph_RESTLEGHOLOTHr"]           = RestdayLegalHolidayOTHr;
                                        drEmpPayTranHdr["Tph_RESTLEGHOLNDHr"]           = RestdayLegalHolidayNDHr;
                                        drEmpPayTranHdr["Tph_RESTLEGHOLNDOTHr"]         = RestdayLegalHolidayOTNDHr;
                                        drEmpPayTranHdr["Tph_RESTSPLHOLHr"]             = RestdaySpecialHolidayHr;
                                        drEmpPayTranHdr["Tph_RESTSPLHOLOTHr"]           = RestdaySpecialHolidayOTHr;
                                        drEmpPayTranHdr["Tph_RESTSPLHOLNDHr"]           = RestdaySpecialHolidayNDHr;
                                        drEmpPayTranHdr["Tph_RESTSPLHOLNDOTHr"]         = RestdaySpecialHolidayOTNDHr;
                                        drEmpPayTranHdr["Tph_RESTCOMPHOLHr"]            = RestdayCompanyHolidayHr;
                                        drEmpPayTranHdr["Tph_RESTCOMPHOLOTHr"]          = RestdayCompanyHolidayOTHr;
                                        drEmpPayTranHdr["Tph_RESTCOMPHOLNDHr"]          = RestdayCompanyHolidayNDHr;
                                        drEmpPayTranHdr["Tph_RESTCOMPHOLNDOTHr"]        = RestdayCompanyHolidayOTNDHr;
                                        drEmpPayTranHdr["Tph_RESTPSDHr"]                = RestdayPlantShutdownHr;
                                        drEmpPayTranHdr["Tph_RESTPSDOTHr"]              = RestdayPlantShutdownOTHr;
                                        drEmpPayTranHdr["Tph_RESTPSDNDHr"]              = RestdayPlantShutdownNDHr;
                                        drEmpPayTranHdr["Tph_RESTPSDNDOTHr"]            = RestdayPlantShutdownOTNDHr;
                                        drEmpPayTranHdr["Tph_SRGAdjHr"]                 = 0;
                                        drEmpPayTranHdr["Tph_SRGAdjAmt"]                = 0;
                                        drEmpPayTranHdr["Tph_SOTAdjHr"]                 = 0;
                                        drEmpPayTranHdr["Tph_SOTAdjAmt"]                = 0;
                                        drEmpPayTranHdr["Tph_SHOLAdjHr"]                = 0;
                                        drEmpPayTranHdr["Tph_SHOLAdjAmt"]               = 0;
                                        drEmpPayTranHdr["Tph_SNDAdjHr"]                 = 0;
                                        drEmpPayTranHdr["Tph_SNDAdjAmt"]                = 0;
                                        drEmpPayTranHdr["Tph_SLVAdjHr"]                 = 0;
                                        drEmpPayTranHdr["Tph_SLVAdjAmt"]                = 0;
                                        drEmpPayTranHdr["Tph_MRGAdjHr"]                 = 0;
                                        drEmpPayTranHdr["Tph_MRGAdjAmt"]                = 0;
                                        drEmpPayTranHdr["Tph_MOTAdjHr"]                 = 0;
                                        drEmpPayTranHdr["Tph_MOTAdjAmt"]                = 0;
                                        drEmpPayTranHdr["Tph_MHOLAdjHr"]                = 0;
                                        drEmpPayTranHdr["Tph_MHOLAdjAmt"]               = 0;
                                        drEmpPayTranHdr["Tph_MNDAdjHr"]                 = 0;
                                        drEmpPayTranHdr["Tph_MNDAdjAmt"]                = 0;
                                        drEmpPayTranHdr["Tph_TotalAdjAmt"]              = 0;
                                        drEmpPayTranHdr["Tph_TaxableIncomeAmt"]         = 0;
                                        drEmpPayTranHdr["Tph_NontaxableIncomeAmt"]      = 0;
                                        drEmpPayTranHdr["Tph_WorkDay"]                  = WorkingDay;
                                        drEmpPayTranHdr["Tph_PayrollType"]              = dtEmpTimeRegister.Rows[i - 1]["Mem_PayrollType"].ToString();
                                        drEmpPayTranHdr["Tph_PremiumGrpCode"]           = dtEmpTimeRegister.Rows[i - 1]["Mem_PremiumGrpCode"].ToString();
                                        drEmpPayTranHdr["Tph_RetainUserEntry"]          = 0;
                                        drEmpPayTranHdr["Usr_Login"]                    = LoginUser;
                                        drEmpPayTranHdr["Ludatetime"]                   = DateTime.Now;

                                        if (bProcessTrail)
                                            drEmpPayTranHdr["Tph_AdjPayCycle"] = AdjustPayrollPeriod;

                                        if (bHasDayCodeExt)
                                        {
                                            drEmpPayTranHdrMisc["Tph_IDNo"] = prevEmployeeID;
                                            drEmpPayTranHdrMisc["Tph_PayCycle"] = ProcessPayrollPeriod;
                                            drEmpPayTranHdrMisc["Usr_Login"] = LoginUser;
                                            drEmpPayTranHdrMisc["Ludatetime"] = DateTime.Now;
                                            if (bProcessTrail)
                                                drEmpPayTranHdrMisc["Tph_AdjPayCycle"] = AdjustPayrollPeriod;
                                        }

                                        //copy to table
                                        dtEmpPayTranHdr.Rows.Add(drEmpPayTranHdr);
                                        if (bHasDayCodeExt)
                                            dtEmpPayTranHdrMisc.Rows.Add(drEmpPayTranHdrMisc);
                                    }
                                    #endregion

                                    //initialize
                                    #region Initialize payroll trans variables
                                    AbsentHr                        = 0.0;
                                    RegularHr                       = 0.0;
                                    RegularOTHr                     = 0.0;
                                    RegularNDHr                     = 0.0;
                                    RegularOTNDHr                   = 0.0;
                                    RestdayHr                       = 0.0;
                                    RestdayOTHr                     = 0.0;
                                    RestdayNDHr                     = 0.0;
                                    RestdayOTNDHr                   = 0.0;
                                    LegalHolidayHr                  = 0.0;
                                    LegalHolidayOTHr                = 0.0;
                                    LegalHolidayNDHr                = 0.0;
                                    LegalHolidayOTNDHr              = 0.0;
                                    SpecialHolidayHr                = 0.0;
                                    SpecialHolidayOTHr              = 0.0;
                                    SpecialHolidayNDHr              = 0.0;
                                    SpecialHolidayOTNDHr            = 0.0;
                                    PlantShutdownHr                 = 0.0;
                                    PlantShutdownOTHr               = 0.0;
                                    PlantShutdownNDHr               = 0.0;
                                    PlantShutdownOTNDHr             = 0.0;
                                    CompanyHolidayHr                = 0.0;
                                    CompanyHolidayOTHr              = 0.0;
                                    CompanyHolidayNDHr              = 0.0;
                                    CompanyHolidayOTNDHr            = 0.0;
                                    RestdayLegalHolidayHr           = 0.0;
                                    RestdayLegalHolidayOTHr         = 0.0;
                                    RestdayLegalHolidayNDHr         = 0.0;
                                    RestdayLegalHolidayOTNDHr       = 0.0;
                                    RestdaySpecialHolidayHr         = 0.0;
                                    RestdaySpecialHolidayOTHr       = 0.0;
                                    RestdaySpecialHolidayNDHr       = 0.0;
                                    RestdaySpecialHolidayOTNDHr     = 0.0;
                                    RestdayCompanyHolidayHr         = 0.0;
                                    RestdayCompanyHolidayOTHr       = 0.0;
                                    RestdayCompanyHolidayNDHr       = 0.0;
                                    RestdayCompanyHolidayOTNDHr     = 0.0;
                                    RestdayPlantShutdownHr          = 0.0;
                                    RestdayPlantShutdownOTHr        = 0.0;
                                    RestdayPlantShutdownNDHr        = 0.0;
                                    RestdayPlantShutdownOTNDHr      = 0.0;
                                    RestdayLegalHolidayCount        = 0;
                                    WorkingDay                      = 0;
                                    RegularHrMonthlyDailyPay        = 0.0;
                                    LateHours                       = 0.0;
                                    UndertimeHours                  = 0.0;
                                    PaidLeaveHours                  = 0.0;
                                    UnpaidLeaveHours                = 0.0;
                                    WholeDayAbsentHours             = 0.0;
                                    LateUndertimeMaxAbsentHours     = 0.0;
                                    AbsentLegalHolidayHr            = 0.0;
                                    AbsentSpecialHolidayHr          = 0.0;
                                    AbsentCompanyHolidayHr          = 0.0;
                                    AbsentPlantShutdownHr           = 0.0;
                                    AbsentFillerHolidayHr           = 0.0;
                                    PaidLegalHolidayHr              = 0.0;
                                    PaidSpecialHolidayHr            = 0.0;
                                    PaidCompanyHolidayHr            = 0.0;
                                    PaidFillerHolidayHr             = 0.0;
                                    PaidPlantShutdownHolidayHr      = 0.0;
                                    #endregion

                                    #region Initialize payroll trans row
                                    drEmpPayTranHdr = dtEmpPayTranHdr.NewRow();
                                    if (bHasDayCodeExt)
                                    {
                                        drEmpPayTranHdrMisc = dtEmpPayTranHdrMisc.NewRow();
                                        for (int j = 1; j <= FILLERCNT; j++)
                                        {
                                            //initialize
                                            fillerHrCol = string.Format("Tph_Misc{0:0}Hr", j);
                                            fillerOTHrCol = string.Format("Tph_Misc{0:0}OTHr", j);
                                            fillerNDHrCol = string.Format("Tph_Misc{0:0}NDHr", j);
                                            fillerOTNDHrCol = string.Format("Tph_Misc{0:0}NDOTHr", j);
                                            drEmpPayTranHdrMisc[fillerHrCol] = 0;
                                            drEmpPayTranHdrMisc[fillerOTHrCol] = 0;
                                            drEmpPayTranHdrMisc[fillerNDHrCol] = 0;
                                            drEmpPayTranHdrMisc[fillerOTNDHrCol] = 0;
                                        }
                                    }
                                    drEmpPayTranDtlPrev = null; //reset previous record
                                    #endregion
                                }

                                //increment payroll transaction row count
                                indexPayTrans++;
                                //increment payroll transaction ext row count
                                if (bHasDayCodeExt)
                                    indexPayTransExt++;
                            }
                            #endregion

                            if (i == dtEmpTimeRegister.Rows.Count)
                                break; //exit main loop

                            strProcessDate  = dtEmpTimeRegister.Rows[i]["Ttr_Date"].ToString();
                            strPayType      = dtEmpTimeRegister.Rows[i]["Ttr_PayrollType"].ToString();

                            if (!bProcessTrail)
                            {
                                #region Save initial data
                                dtEmpTimeRegister.Rows[i]["Ttr_ShiftMin"] = Convert.ToInt32(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Msh_ShiftHours"]) * 60);
                                dtEmpTimeRegister.Rows[i]["Ttr_ScheduleType"] = dtEmpTimeRegister.Rows[i]["Msh_Schedule"].ToString();

                                //Check user-generated flag
                                drArrUserGeneratedPayTrans = dtUserGeneratedPayTrans.Select("Tph_IDNo = '" + curEmployeeID + "'");
                                bUserGeneratedPayTrans = false;
                                if (drArrUserGeneratedPayTrans.Length > 0)
                                    bUserGeneratedPayTrans = true;
                                #endregion

                                #region Variable Initialization

                                #region Retrieve Necessary Columns
                                shiftCode               = dtEmpTimeRegister.Rows[i]["Ttr_ShiftCode"].ToString();
                                strDayCode              = dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString();
                                strProcessDate          = dtEmpTimeRegister.Rows[i]["Ttr_Date"].ToString();

                                bIsRestDay              = (dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"].ToString().Equals("False")) ? false : true;
                                bIsHoliday              = (dtEmpTimeRegister.Rows[i]["Ttr_HolidayFlag"].ToString().Equals("False")) ? false : true;

                                strActualTimeIn1        = dtEmpTimeRegister.Rows[i]["Ttr_ActIn_1"].ToString().Trim();
                                strActualTimeOut1       = dtEmpTimeRegister.Rows[i]["Ttr_ActOut_1"].ToString().Trim();
                                strActualTimeIn2        = dtEmpTimeRegister.Rows[i]["Ttr_ActIn_2"].ToString().Trim();
                                strActualTimeOut2       = dtEmpTimeRegister.Rows[i]["Ttr_ActOut_2"].ToString().Trim();

                                iActualTimeIn1Min       = GetMinsFromHourStr(strActualTimeIn1);
                                iActualTimeOut1Min      = GetMinsFromHourStr(strActualTimeOut1);
                                iActualTimeIn2Min       = GetMinsFromHourStr(strActualTimeIn2);
                                iActualTimeOut2Min      = GetMinsFromHourStr(strActualTimeOut2);

                                iConvTimeIn1Min         = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_ConvIn_1Min"].ToString());
                                iConvTimeOut1Min        = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_ConvOut_1Min"].ToString());
                                iConvTimeIn2Min         = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_ConvIn_2Min"].ToString());
                                iConvTimeOut2Min        = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_ConvOut_2Min"].ToString());

                                iCompTimeIn1Min         = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_CompIn_1Min"].ToString());
                                iCompTimeOut1Min        = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_CompOut_1Min"].ToString());
                                iCompTimeIn2Min         = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_CompIn_2Min"].ToString());
                                iCompTimeOut2Min        = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_CompOut_2Min"].ToString());

                                iShiftTimeIn1Min        = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_ShiftIn_1Min"].ToString());
                                iShiftTimeOut1Min       = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_ShiftOut_1Min"].ToString());
                                iShiftTimeIn2Min        = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_ShiftIn_2Min"].ToString());
                                iShiftTimeOut2Min       = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_ShiftOut_2Min"].ToString());

                                strMasterShiftTimeIn1   = dtEmpTimeRegister.Rows[i]["Msh_ShiftIn1"].ToString();
                                strMasterShiftTimeOut1  = dtEmpTimeRegister.Rows[i]["Msh_ShiftOut1"].ToString();
                                strMasterShiftTimeIn2   = dtEmpTimeRegister.Rows[i]["Msh_ShiftIn2"].ToString();
                                strMasterShiftTimeOut2  = dtEmpTimeRegister.Rows[i]["Msh_ShiftOut2"].ToString();
                                bRequiredLogsOnBreak    = (dtEmpTimeRegister.Rows[i]["Msh_RequiredLogsOnBreak"].ToString().Equals("False")) ? false : true;
                                strMasterShiftReducedTimeOut2 = dtEmpTimeRegister.Rows[i]["Msh_ReducedTimeOut2"].ToString();
                                iOTRoundBreak = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Msh_OTRoundBreak"].ToString());
                                #endregion

                                #region Miscellaneous Variables
                                iMasterShiftTimeIn1Min      = 0;
                                iMasterShiftTimeOut1Min     = 0;
                                iMasterShiftTimeIn2Min      = 0;
                                iMasterShiftTimeOut2Min     = 0;
                                iShiftReducedTimeOut2Min    = 0;
                                iComputedLateMin            = 0;
                                iComputedLate2Min           = 0;
                                iComputedUndertime1Min      = 0;
                                iComputedUndertime2Min      = 0;
                                iPayLeaveMin                = 0;
                                iNoPayLeaveMin              = 0;
                                iExcessLeaveMin             = 0;
                                iLeaveMinToBeAddedToReg     = 0;
                                iLeaveMinOnPaidBreak        = 0;
                                iComputedDayWorkMin         = 0;
                                iComputedRegularMin         = 0;
                                iInitialAbsentMin           = 0;
                                iComputedAbsentMin          = 0;
                                iTotalComputedAbsentMin     = 0;
                                iOffsetOvertimeMin          = 0;
                                iEXPHourMin                 = 0;
                                iShiftMin                   = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_ShiftMin"].ToString());
                                strPayLeaveType             = dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"].ToString();
                                strScheduleType             = dtEmpTimeRegister.Rows[i]["Msh_Schedule"].ToString();
                                strAmnesty                  = dtEmpTimeRegister.Rows[i]["Ttr_Amnesty"].ToString().Trim();
                                bNDCount                    = Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Msh_NDCount"].ToString().Trim());
                                //iExcessOffset = 0;
                                //iForOffsetMin = 0;
                                iTimeMinTemp                = 0;
                                iTimeMinTemp2               = 0;
                                iOTFraction                 = Convert.ToInt32(OTFRACT);
                                iOTFractionZero             = (iOTFraction == 0) ? 1 : iOTFraction;
                                iEncodedOvertimeMin         = 0;

                                //For Actual Late and Undertime
                                iActualTimeIn1MinOrig       = iActualTimeIn1Min;
                                iActualTimeOut2MinOrig      = iActualTimeOut2Min;
                                iActualLate1Mins            = 0;
                                iActualLate2Mins            = 0;
                                iActualUT1Mins              = 0;
                                iActualUT2Mins              = 0;

                                //Initialize Dummy Variables
                                iPayLeaveMinsDummy          = 0;
                                iNoPayLeaveMinDummy         = 0;
                                iExcessLeaveMinDummy        = 0;
                                iLeaveMinToBeAddedToRegDummy = 0;
                                iLeaveMinOnPaidBreakDummy   = 0;

                                //Check if New Hire
                                strHireDate = "";
                                bIsNewHire = false;
                                drArrOTApp = dtNewHire.Select(string.Format("Ttr_IDNo = '{0}' AND Ttr_Date = '{1}'", curEmployeeID, strProcessDate));
                                if (drArrOTApp.Length > 0)
                                {
                                    bIsNewHire = true;
                                    strHireDate = drArrOTApp[0]["Mem_IntakeDate"].ToString();
                                }

                                //Get Minimum OT Hr
                                //GetApplicableHrsFromCommaDelimitedTable(MINOTHR_TBL
                                //                                        , dtEmpTimeRegister.Rows[i]["Ttr_PayrollGroup"].ToString()
                                //                                        , dtEmpTimeRegister.Rows[i]["Ttr_EmploymentStatusCode"].ToString()
                                //                                        , dtEmpTimeRegister.Rows[i]["Ttr_PayrollType"].ToString()
                                //                                        , dtEmpTimeRegister.Rows[i]["Mem_PositionCode"].ToString()
                                //                                        , OTMINHR_ORIG
                                //                                        , ref OTMINHR);

                                //Set Flags
                                bIsGraveyard = dtEmpTimeRegister.Rows[i]["Msh_Schedule"].ToString().Equals("G");
                                bOverrideGraveyardConv = false;
                                bIsOutsideShift = false;
                                bIsRegOrReg5DayCode = false;
                                bDailiesNoWorkNoPay = false;
                                #endregion

                                #region Day Code Initialization
                                drArrDayCode = dtDayCodeMaster.Select(string.Format("Mdy_DayCode = '{0}'", strDayCode));
                                if (drArrDayCode != null && drArrDayCode.Length > 0)
                                {
                                    //For Regular Days
                                    if (strDayCode.Equals("REG") || strDayCode.Equals("REG5") || strDayCode.Equals("REGN")
                                        || (Convert.ToBoolean(drArrDayCode[0]["Mdy_RestdayFlag"]) == false && Convert.ToBoolean(drArrDayCode[0]["Mdy_HolidayFlag"]) == false))
                                    {
                                        bIsRegOrReg5DayCode = true;
                                        bIsRestDay = false;
                                        bIsHoliday = false;
                                        dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"] = false;
                                        dtEmpTimeRegister.Rows[i]["Ttr_HolidayFlag"] = false;
                                    }
                                    //For Holidays
                                    if (strDayCode.Equals("HOL") || strDayCode.Equals("SPL") || strDayCode.Equals("PSD")
                                        || bIsHoliday == true
                                        || Convert.ToBoolean(drArrDayCode[0]["Mdy_HolidayFlag"]) == true)
                                    {
                                        drArrPrevDay = dtHolidays.Select(string.Format("Thl_CompanyCode = '{0}' AND Thl_HolidayDate = '{1}' AND (Thl_LocationCode = 'ALL' OR Thl_LocationCode = '{2}')", companyCode, Convert.ToDateTime(strProcessDate), dtEmpTimeRegister.Rows[i]["Ttr_WorkLocationCode"]));
                                        if (drArrPrevDay != null && drArrPrevDay.Length > 0 && drArrPrevDay[0]["Thl_HolidayCode"].ToString() == strDayCode)
                                        {
                                            bIsHoliday = true;
                                            dtEmpTimeRegister.Rows[i]["Ttr_HolidayFlag"] = true;
                                        }
                                        else
                                        {
                                            #region Day Code Not in Holiday Master
                                            AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Day Code Not in Holiday Master", "AW");
                                            strDayCode                                      = "REG";
                                            bIsRegOrReg5DayCode                             = true;
                                            bIsRestDay                                      = false;
                                            bIsHoliday                                      = false;
                                            iActualTimeIn1Min                               = 0;
                                            iActualTimeOut1Min                              = 0;
                                            iActualTimeIn2Min                               = 0;
                                            iActualTimeOut2Min                              = 0;
                                            dtEmpTimeRegister.Rows[i]["Ttr_DayCode"]        = "REG";
                                            dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]    = false;
                                            dtEmpTimeRegister.Rows[i]["Ttr_HolidayFlag"]    = false;
                                            dtEmpTimeRegister.Rows[i]["Ttr_ActIn_1"]        = "0000";
                                            dtEmpTimeRegister.Rows[i]["Ttr_ActOut_1"]       = "0000";
                                            dtEmpTimeRegister.Rows[i]["Ttr_ActIn_2"]        = "0000";
                                            dtEmpTimeRegister.Rows[i]["Ttr_ActOut_2"]       = "0000";
                                            dtEmpTimeRegister.Rows[i]["Ttr_AssumedFlag"]    = false;
                                            #endregion
                                        }
                                    }
                                    //For Restdays (Normal)
                                    if (strDayCode.Equals("REST")
                                        || (Convert.ToBoolean(drArrDayCode[0]["Mdy_RestdayFlag"]) == true && Convert.ToBoolean(drArrDayCode[0]["Mdy_HolidayFlag"]) == false))
                                    {
                                        bIsRestDay = true;
                                        bIsHoliday = false;
                                        dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"] = true;
                                        dtEmpTimeRegister.Rows[i]["Ttr_HolidayFlag"] = false;
                                    }
                                }
                                else
                                {
                                    #region Invalid Day Code
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Invalid Day Code", "AW");
                                    strDayCode              = "REG";
                                    bIsRegOrReg5DayCode     = true;
                                    bIsRestDay              = false;
                                    bIsHoliday              = false;
                                    iActualTimeIn1Min       = 0;
                                    iActualTimeOut1Min      = 0;
                                    iActualTimeIn2Min       = 0;
                                    iActualTimeOut2Min      = 0;
                                    dtEmpTimeRegister.Rows[i]["Ttr_DayCode"]        = "REG";
                                    dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]    = false;
                                    dtEmpTimeRegister.Rows[i]["Ttr_HolidayFlag"]    = false;
                                    dtEmpTimeRegister.Rows[i]["Ttr_ActIn_1"]        = "0000";
                                    dtEmpTimeRegister.Rows[i]["Ttr_ActOut_1"]       = "0000";
                                    dtEmpTimeRegister.Rows[i]["Ttr_ActIn_2"]        = "0000";
                                    dtEmpTimeRegister.Rows[i]["Ttr_ActOut_2"]       = "0000";
                                    dtEmpTimeRegister.Rows[i]["Ttr_AssumedFlag"]    = false;
                                    #endregion
                                }

                                if ((!bIsRestDay && strDayCode.Equals("PSD") && !strPayType.Equals("M")) //Plant Shutdown for Daily/Hourly
                                        || (!bIsRestDay && strDayCode.Equals("PSD") && strPayType.Equals("M") && !Convert.ToBoolean(PSDMONTHLY)) //Plant Shutdown for Monthly
                                        || (!bIsRestDay && strDayCode.Equals("SPL") && strPayType.Equals("D")) //Special Holiday for Daily
                                        || (!bIsRestDay && strDayCode.Equals("CMPY") && strPayType.Equals("D"))) //Company Holiday for Daily (HOGP)
                                {
                                    bDailiesNoWorkNoPay = true;
                                }
                                #endregion

                                #region Shift Initialization
                                if (iShiftMin <= 0)
                                {
                                    #region //Invalid Shift Code
                                    //if (dtDefaultShift.Rows.Count > 0)
                                    //{
                                    //    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Invalid Shift Code", "AW");
                                    //    strDayCode = "REG";
                                    //    bIsRegOrReg5DayCode = true;
                                    //    bIsRestDay = false;
                                    //    bIsHoliday = false;
                                    //    iActualTimeIn1Min = 0;
                                    //    iActualTimeOut1Min = 0;
                                    //    iActualTimeIn2Min = 0;
                                    //    iActualTimeOut2Min = 0;
                                    //    dtEmpTimeRegister.Rows[i]["Ttr_DayCode"]        = "REG";
                                    //    dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]    = false;
                                    //    dtEmpTimeRegister.Rows[i]["Ttr_HolidayFlag"]    = false;
                                    //    dtEmpTimeRegister.Rows[i]["Ttr_ActIn_1"]        = "0000";
                                    //    dtEmpTimeRegister.Rows[i]["Ttr_ActOut_1"]       = "0000";
                                    //    dtEmpTimeRegister.Rows[i]["Ttr_ActIn_2"]        = "0000";
                                    //    dtEmpTimeRegister.Rows[i]["Ttr_ActOut_2"]       = "0000";
                                    //    dtEmpTimeRegister.Rows[i]["Ttr_AssumedFlag"]    = false;

                                    //    shiftCode                                       = dtDefaultShift.Rows[0]["Msh_ShiftCode"].ToString();
                                    //    strMasterShiftTimeIn1                           = dtDefaultShift.Rows[0]["Msh_ShiftIn1"].ToString();
                                    //    strMasterShiftTimeOut1                          = dtDefaultShift.Rows[0]["Msh_ShiftOut1"].ToString();
                                    //    strMasterShiftTimeIn2                           = dtDefaultShift.Rows[0]["Msh_ShiftIn2"].ToString();
                                    //    strMasterShiftTimeOut2                          = dtDefaultShift.Rows[0]["Msh_ShiftOut2"].ToString();
                                    //    iShiftMin                                       = Convert.ToInt32(Convert.ToDouble(dtDefaultShift.Rows[0]["Msh_ShiftHours"]) * 60);
                                    //    strScheduleType                                 = dtDefaultShift.Rows[0]["Msh_Schedule"].ToString();

                                    //    dtEmpTimeRegister.Rows[i]["Ttr_ShiftCode"]      = shiftCode;
                                    //    dtEmpTimeRegister.Rows[i]["Msh_ShiftIn1"]       = strMasterShiftTimeIn1;
                                    //    dtEmpTimeRegister.Rows[i]["Msh_ShiftOut1"]      = strMasterShiftTimeOut1;
                                    //    dtEmpTimeRegister.Rows[i]["Msh_ShiftIn2"]       = strMasterShiftTimeIn2;
                                    //    dtEmpTimeRegister.Rows[i]["Msh_ShiftOut2"]      = strMasterShiftTimeOut2;
                                    //    dtEmpTimeRegister.Rows[i]["Ttr_ShiftMin"]       = iShiftMin;
                                    //    dtEmpTimeRegister.Rows[i]["Ttr_ScheduleType"]   = strScheduleType;
                                    //    dtEmpTimeRegister.Rows[i]["Msh_PaidBreak"]      = Convert.ToDouble(dtDefaultShift.Rows[0]["Msh_PaidBreak"]);
                                    //}
                                    //else
                                    //    throw new Exception("Invalid Shift Code");
                                    #endregion
                                    throw new Exception("Invalid Shift Code");
                                }

                                //HOUR FRACTION CUTOFF TIME
                                if (dtEmpTimeRegister.Rows[i]["Msh_HourFractionCutoff"].ToString() == "")
                                    Cutoff = 1440; //24:00
                                else
                                    Cutoff = GetMinsFromHourStr(dtEmpTimeRegister.Rows[i]["Msh_HourFractionCutoff"].ToString());

                                //SHIFT TIME IN 1 
                                iMasterShiftTimeIn1Min = GetMinsFromHourStr(strMasterShiftTimeIn1);
                                iShiftTimeIn1Min = iMasterShiftTimeIn1Min;

                                //SHIFT TIME OUT 1 
                                iMasterShiftTimeOut1Min = GetMinsFromHourStr(strMasterShiftTimeOut1);
                                if (iMasterShiftTimeIn1Min > iMasterShiftTimeOut1Min)
                                {
                                    iMasterShiftTimeOut1Min = ConvertToGraveyardTime(iMasterShiftTimeOut1Min, bIsGraveyard);
                                }
                                iShiftTimeOut1Min = iMasterShiftTimeOut1Min;

                                //SHIFT TIME IN 2 
                                iMasterShiftTimeIn2Min = GetMinsFromHourStr(strMasterShiftTimeIn2);
                                if (iMasterShiftTimeIn1Min > iMasterShiftTimeIn2Min)
                                {
                                    iMasterShiftTimeIn2Min = ConvertToGraveyardTime(iMasterShiftTimeIn2Min, bIsGraveyard);
                                }
                                iShiftTimeIn2Min = iMasterShiftTimeIn2Min;

                                //SHIFT TIME OUT 2 
                                iMasterShiftTimeOut2Min = GetMinsFromHourStr(strMasterShiftTimeOut2);
                                iShiftReducedTimeOut2Min = GetMinsFromHourStr(strMasterShiftReducedTimeOut2);
                                if (iMasterShiftTimeIn1Min > iMasterShiftTimeOut2Min)
                                {
                                    iMasterShiftTimeOut2Min = ConvertToGraveyardTime(iMasterShiftTimeOut2Min, bIsGraveyard);
                                    if (iShiftReducedTimeOut2Min > 0)
                                        iShiftReducedTimeOut2Min = ConvertToGraveyardTime(iShiftReducedTimeOut2Min, bIsGraveyard);
                                }
                                iShiftTimeOut2Min = iMasterShiftTimeOut2Min;
                                #endregion

                                #region Work Authorization Initialization
                                drArrWorkAuthApproved = GetCorrectedWorkAuthorizationRecords(curEmployeeID
                                                                                            , strProcessDate
                                                                                            , !bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode
                                                                                            , bIsGraveyard && !bOverrideGraveyardConv
                                                                                            , iShiftTimeIn1Min
                                                                                            , iShiftTimeOut1Min
                                                                                            , iShiftTimeIn2Min
                                                                                            , iShiftTimeOut2Min
                                                                                            , Convert.ToBoolean(FLEXSHIFT));

                                bWorkAuthApproved = false;
                                if (iShiftReducedTimeOut2Min != 0 && drArrWorkAuthApproved.Length > 0)
                                    bWorkAuthApproved = true;

                                #endregion

                                #region OT Variables
                                //Get All Approved Overtime Records (with Flex Shift checking)
                                drArrOTApproved = GetCorrectedOvertimeRecords(curEmployeeID
                                                                                , strProcessDate
                                                                                , !bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode
                                                                                , bIsGraveyard && !bOverrideGraveyardConv
                                                                                , iShiftTimeIn1Min
                                                                                , iShiftTimeOut1Min
                                                                                , iShiftTimeIn2Min
                                                                                , iShiftTimeOut2Min
                                                                                , (iActualTimeIn1Min == 0) ? iActualTimeIn2Min : iActualTimeIn1Min
                                                                                , Convert.ToBoolean(FLEXSHIFT)
                                                                                , strPayType);

                                iComputedOvertimeMin        = 0;
                                iAdvOTMin                   = 0;
                                iAdjShiftMin                = 0; //Advanced OT column
                                iCompOTMin                  = 0;
                                iPaidBreak                  = 0;
                                iPaidBreakOnReg             = 0;
                                iMasterPaidBreak            = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Msh_PaidBreak"].ToString());

                                iNDFraction                 = Convert.ToInt32(Convert.ToDecimal(NDFRACTION));
                                iCompRegNightPremMin        = 0;
                                iCompOvertimeNightPremMin   = 0;
                                iTimeMinTemp2               = 0;
                                iOTTemp                     = 0;
                                iOTTemp2                    = 0;
                                iBreakMin                   = 0;
                                bIsOutsideShiftComputedOT   = false; //(Solution to Duplicate OT computation)
                                #endregion

                                #endregion

                                if (iActualTimeIn1Min == 6039 && POCKETSIZE > 2) //99:99 (Flag for log ledger extension)
                                {
                                    #region Multiple Pockets Logic
                                    iTempMultPockVar                = 0;
                                    iTempMultPockVar2               = 0;
                                    iTempMultPockVar3               = 0;
                                    iExcessLeaveMin                 = 0;
                                    iLeaveMinToBeAddedToReg         = 0;
                                    iPrevConvTimeOutExtMin          = 0;
                                    iSecondHalfActualTimeInExtMin   = 0;
                                    iSecondHalfConvTimeInExtMin     = 0;
                                    bDonePaidBreakAdd               = false;
                                    bConvLate2                      = false;
                                    bWholeDayLogs                   = false;
                                    bWholeDayLeave                  = false;

                                    //Initialize Hour Fraction Table
                                    InitializeHourFractionTable();
                                    InitializeRegLeaveAbs();

                                    #region Check Leave Parameters
                                    drArrLeaveAppPaid = GetCorrectedLeaveRecordsMultPockets(curEmployeeID, strProcessDate, true, bIsGraveyard && !bOverrideGraveyardConv, iShiftTimeIn1Min, iShiftTimeOut2Min);
                                    drArrLeaveAppUnpaid = GetCorrectedLeaveRecordsMultPockets(curEmployeeID, strProcessDate, false, bIsGraveyard && !bOverrideGraveyardConv, iShiftTimeIn1Min, iShiftTimeOut2Min);

                                    //Encoded Paid Leave
                                    dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"]    = "";
                                    dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVHr"]      = 0;
                                    foreach (DataRow drRow in drArrLeaveAppPaid)
                                    {
                                        if (Convert.ToDouble(drRow["LeaveHours"]) != 0)
                                        {
                                            //Check if combined leave
                                            if (dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"].ToString() != ""
                                                && dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"].ToString() != drRow["LeaveType"].ToString())
                                            {
                                                drArrLeaveType = dtLeaveType.Select(string.Format("Mlv_LeaveDescription = '{0} + {1}' OR Mlv_LeaveDescription = '{1} + {0}'", dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"].ToString(), drRow["LeaveType"].ToString()));
                                                if (drArrLeaveType.Length > 0)
                                                    dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"] = drArrLeaveType[0]["Mlv_LeaveCode"];
                                                else
                                                    dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"] = dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"].ToString().Substring(0, 1) + drRow["LeaveType"].ToString().Substring(0, 1);
                                            }
                                            else
                                                dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"] = drRow["LeaveType"];
                                            dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVHr"]) + Convert.ToDouble(drRow["LeaveHours"]);
                                        }
                                    }

                                    //Encoded Unpaid Leave
                                    dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"]  = "";
                                    dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVHr"]    = 0;
                                    foreach (DataRow drRow in drArrLeaveAppUnpaid)
                                    {
                                        if (Convert.ToDouble(drRow["LeaveHours"]) != 0)
                                        {
                                            //Check if combined leave
                                            if (dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"].ToString() != ""
                                                && dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"].ToString() != drRow["LeaveType"].ToString())
                                            {
                                                drArrLeaveType = dtLeaveType.Select(string.Format("Mlv_LeaveDescription = '{0} + {1}' OR Mlv_LeaveDescription = '{1} + {0}'", dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"].ToString(), drRow["LeaveType"].ToString()));
                                                if (drArrLeaveType.Length > 0)
                                                    dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"] = drArrLeaveType[0]["Mlv_LeaveCode"];
                                                else
                                                    dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"] = dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"].ToString().Substring(0, 1) + drRow["LeaveType"].ToString().Substring(0, 1);
                                            }
                                            else
                                                dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"] = drRow["LeaveType"];
                                            dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVHr"]) + Convert.ToDouble(drRow["LeaveHours"]);
                                        }
                                    }

                                    //Clear Leave Availments if Assumed Postback is set to TRUE
                                    if (dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"] != DBNull.Value //Assumed Postback flag is equal to T
                                        && dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString().Equals("T") == true)
                                    {
                                        drArrLeaveAppPaid = dtLeaveTable.Select("EmployeeId = ''");
                                        drArrLeaveAppUnpaid = dtLeaveTable.Select("EmployeeId = ''");
                                    }

                                    //Automatic Leave Availment Adjust to Shift
                                    if (Convert.ToBoolean(LVWDSHIFT))
                                    {
                                        AdjustLeaveBasedOnShift(drArrLeaveAppPaid, curEmployeeID, strProcessDate, iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min);
                                        AdjustLeaveBasedOnShift(drArrLeaveAppUnpaid, curEmployeeID, strProcessDate, iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min);
                                    }

                                    #endregion

                                    #region Combine Regular, Leave and Overtime
                                    drArrEmpTimeRegisterMisc = dtEmpTimeRegisterMisc.Select(string.Format("Ttm_IDNo = '{0}' AND Ttm_Date = '{1}'", curEmployeeID, strProcessDate));
                                    drArrLeaveApp = new DataRow[drArrLeaveAppPaid.Length + drArrLeaveAppUnpaid.Length];
                                    Array.Copy(drArrLeaveAppPaid, drArrLeaveApp, drArrLeaveAppPaid.Length);
                                    Array.Copy(drArrLeaveAppUnpaid, 0, drArrLeaveApp, drArrLeaveAppPaid.Length, drArrLeaveAppUnpaid.Length);

                                    if (drArrEmpTimeRegisterMisc.Length > 0)
                                    {
                                        #region Generate Regular records
                                        if (!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode //Regular Day
                                            && (
                                                (Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_AssumedFlag"]) == true
                                                && (dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString() == "N"
                                                    || dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString() == ""
                                                    || dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString().Equals("T"))
                                                ) || (dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"] != DBNull.Value
                                                    && dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString().Equals("T"))
                                               )
                                            )
                                        {
                                            if (Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_AssumedFlag"]) == true
                                                && (dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString() == "N"
                                                    || dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString() == ""
                                                    || dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString().Equals("T"))
                                                )
                                            {
                                                #region Assumed Present
                                                iEXPHourMin = iShiftMin;
                                                if  (iShiftReducedTimeOut2Min != 0 && !bWorkAuthApproved)
                                                {
                                                    AddToRegLeaveAbs(1, strMasterShiftTimeIn1, strMasterShiftReducedTimeOut2, iShiftTimeIn1Min, iShiftReducedTimeOut2Min, iShiftTimeIn1Min, iShiftReducedTimeOut2Min, "", false, false, "", RegLeaveAbsType.REG, "AE", false, "LR", bIsGraveyard);
                                                }
                                                else
                                                {
                                                    AddToRegLeaveAbs(1, strMasterShiftTimeIn1, strMasterShiftTimeOut2, iShiftTimeIn1Min, iShiftTimeOut2Min, iShiftTimeIn1Min, iShiftTimeOut2Min, "", false, false, "", RegLeaveAbsType.REG, "AE", false, "LR", bIsGraveyard);
                                                    bWholeDayLogs = true;
                                                }
                                                #endregion
                                            }
                                            else if (dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"] != DBNull.Value
                                                    && dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString().Equals("T"))
                                            {
                                                #region Assumed Post
                                                iEXPHourMin = iShiftMin;
                                                if (iShiftReducedTimeOut2Min != 0 && !bWorkAuthApproved)
                                                {
                                                    AddToRegLeaveAbs(1, strMasterShiftTimeIn1, strMasterShiftReducedTimeOut2, iShiftTimeIn1Min, iShiftReducedTimeOut2Min, iShiftTimeIn1Min, iShiftReducedTimeOut2Min, "", false, false, "", RegLeaveAbsType.REG, "AD", false, "LR", bIsGraveyard);
                                                }
                                                else
                                                {
                                                    AddToRegLeaveAbs(1, strMasterShiftTimeIn1, strMasterShiftTimeOut2, iShiftTimeIn1Min, iShiftTimeOut2Min, iShiftTimeIn1Min, iShiftTimeOut2Min, "", false, false, "", RegLeaveAbsType.REG, "AD", false, "LR", bIsGraveyard);
                                                    bWholeDayLogs = true;
                                                }
                                                #endregion
                                            }
                                        }
                                        else
                                        {
                                            for (int xPocket = 1; xPocket <= 12; xPocket++)
                                            {
                                                strActualTimeInExt          = drArrEmpTimeRegisterMisc[0][string.Format("Ttm_ActIn_{0:00}", xPocket)].ToString().Trim();
                                                strActualTimeOutExt         = drArrEmpTimeRegisterMisc[0][string.Format("Ttm_ActOut_{0:00}", xPocket)].ToString().Trim();

                                                #region Logs not required during break
                                                if (!bRequiredLogsOnBreak)
                                                {
                                                    if (xPocket == 1 && strActualTimeInExt != "0000" && strActualTimeOutExt == "0000"
                                                        && drArrEmpTimeRegisterMisc[0][string.Format("Ttm_ActIn_02")].ToString().Trim() == "0000"
                                                        && drArrEmpTimeRegisterMisc[0][string.Format("Ttm_ActOut_02")].ToString().Trim() != "0000")
                                                    {
                                                        iActualTimeInExtMin = GetMinsFromHourStr(strActualTimeInExt);
                                                        iActualTimeOutExtMin = GetMinsFromHourStr(drArrEmpTimeRegisterMisc[0][string.Format("Ttm_ActOut_02")].ToString().Trim());

                                                        if (iActualTimeInExtMin > iActualTimeOutExtMin)
                                                            iActualTimeOutExtMin = ConvertToGraveyardTime(iActualTimeOutExtMin, bIsGraveyard);

                                                        if (iActualTimeInExtMin > iShiftTimeOut1Min || iActualTimeOutExtMin < iShiftTimeIn2Min)
                                                            strActualTimeOutExt = "0000";
                                                        else
                                                            strActualTimeOutExt = strMasterShiftTimeOut1;
                                                    }


                                                    if (xPocket == 2 && strActualTimeInExt == "0000" && strActualTimeOutExt != "0000"
                                                        && drArrEmpTimeRegisterMisc[0][string.Format("Ttm_ActIn_01")].ToString().Trim() != "0000"
                                                        && drArrEmpTimeRegisterMisc[0][string.Format("Ttm_ActOut_01")].ToString().Trim() == "0000")
                                                    {
                                                        iActualTimeInExtMin = GetMinsFromHourStr(drArrEmpTimeRegisterMisc[0][string.Format("Ttm_ActIn_01")].ToString().Trim());
                                                        iActualTimeOutExtMin = GetMinsFromHourStr(strActualTimeOutExt);


                                                        if (iActualTimeInExtMin > iActualTimeOutExtMin)
                                                            iActualTimeOutExtMin = ConvertToGraveyardTime(iActualTimeOutExtMin, bIsGraveyard);

                                                        if (iActualTimeInExtMin > iShiftTimeOut1Min || iActualTimeOutExtMin < iShiftTimeIn2Min)
                                                            strActualTimeInExt = "0000";
                                                        else
                                                            strActualTimeInExt = strMasterShiftTimeIn2;
                                                    }

                                                }
                                                #endregion

                                                #region Initialization
                                                iActualTimeInExtMin         = GetMinsFromHourStr(strActualTimeInExt);
                                                iActualTimeOutExtMin        = GetMinsFromHourStr(strActualTimeOutExt);
                                                iActualTimeInExtNxtMin      = 0;
                                                iActualTimeOutExtNxtMin     = 0;
                                                iActualTimeInExtMinOrig     = iActualTimeInExtMin;
                                                iActualTimeOutExtMinOrig    = iActualTimeOutExtMin;
                                                bIsOutsideShift             = false;
                                                string xReMarks             = "";
                                                #endregion

                                                if (!bIsGraveyard && iActualTimeInExtMin > iActualTimeOutExtMin)
                                                {
                                                    iActualTimeInExtMin     = 0;
                                                    iActualTimeOutExtMin    = 0;
                                                    iActualTimeInExtMinOrig = 0;
                                                    iActualTimeOutExtMinOrig = 0;

                                                    if (iActualTimeOutExtMin == 0)
                                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, string.Format("Pocket {0:00} unpaired logs.", xPocket), "BW");
                                                    else if (iActualTimeOutExtMin != 0)
                                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, string.Format("Time In {0:00}", xPocket) + " is greater than " + string.Format("Time Out {0:00}", xPocket), "BE");

                                                }

                                                if (xPocket < 12)
                                                {
                                                    iActualTimeInExtNxtMin = GetMinsFromHourStr(drArrEmpTimeRegisterMisc[0][string.Format("Ttm_ActIn_{0:00}", xPocket + 1)].ToString());
                                                    iActualTimeOutExtNxtMin = GetMinsFromHourStr(drArrEmpTimeRegisterMisc[0][string.Format("Ttm_ActOut_{0:00}", xPocket + 1)].ToString());
                                                }

                                                #region LATEFREQ | LATEGRACE | LATEBRCKTD | UTIMEBRCKT
                                                if (iActualTimeInExtMin < iShiftTimeOut1Min)
                                                {
                                                    #region First Half
                                                    if (xPocket == 1)
                                                    {
                                                        #region Late Charge (Daily)
                                                        //LATE CHARGE DAILY 
                                                        if (bIsRegOrReg5DayCode == true && LATEFREQ.Equals("D") && LATEGRACEIN1 > 0)
                                                        {
                                                            iActualTimeInExtMin = GetTimeWithLateChargeDailyMultPockets(iActualTimeInExtMin, iShiftTimeIn1Min, LATEGRACEIN1);
                                                            if (iActualTimeInExtMin == iShiftTimeIn1Min) 
                                                                xReMarks = "LG";
                                                        }
                                                        #endregion

                                                        #region Late Charge (Quincena)
                                                        //LATE CHARGE QUINCENA INITIALIZATION
                                                        if (curEmployeeID != prevEmployeeID && LATEFREQ.Equals("Q") && LATEGRACEIN1 > 0)
                                                        {
                                                            bApplyLateChargeQuincena = IsLateChargeQuincenaMetMultPockets(curEmployeeID, ProcessPayrollPeriod, true, dal);
                                                        }

                                                        if (iActualTimeInExtMin != 0 && bApplyLateChargeQuincena)
                                                        {
                                                            iActualTimeInExtMin = iShiftTimeIn1Min;
                                                            xReMarks = "LG";
                                                        }
                                                        #endregion

                                                        #region Late Bracket Deduction
                                                        if (bIsRegOrReg5DayCode == true && LATEBRCKTD != null)
                                                        {
                                                            iActualTimeInExtMin = GetTimeInWithLateBracketFilter(iActualTimeInExtMin, iShiftTimeIn1Min);
                                                            //xReMarks = "T3";
                                                        }
                                                        #endregion
                                                    }
                                                    else
                                                    {
                                                        #region Undertime Bracket Deduction
                                                        if (iActualTimeInExtNxtMin > 0 && iActualTimeInExtNxtMin < iShiftTimeOut1Min)
                                                        {   }
                                                        else
                                                        {
                                                            if (bIsRegOrReg5DayCode == true && UTIMEBRCKT != null)
                                                            {
                                                                iActualTimeInExtMin = GetTimeOutWithUndertimePMBracketFilter(iActualTimeInExtMin, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min);
                                                                //xReMarks = "N3";
                                                            }
                                                        }
                                                        #endregion
                                                    }
                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region Second Half
                                                    if (iSecondHalfActualTimeInExtMin == 0)
                                                    {
                                                        #region Late Charge (Daily)
                                                        //LATE CHARGE DAILY 
                                                        if (bIsRegOrReg5DayCode == true && LATEFREQ.Equals("D") && LATEGRACEIN2 > 0)
                                                        {
                                                            iActualTimeInExtMin = GetTimeWithLateChargeDailyMultPockets(iActualTimeInExtMin, iShiftTimeIn2Min, LATEGRACEIN2);
                                                            if (iActualTimeInExtMin == iShiftTimeIn2Min)
                                                                xReMarks = "LG";
                                                        }
                                                        #endregion

                                                        #region Late Charge (Quincena)
                                                        //LATE CHARGE QUINCENA INITIALIZATION
                                                        if (curEmployeeID != prevEmployeeID && LATEFREQ.Equals("Q") && LATEGRACEIN2 > 0)
                                                        {
                                                            bApplyLateChargeQuincena = IsLateChargeQuincenaMetMultPockets(curEmployeeID, ProcessPayrollPeriod, false, dal);
                                                        }

                                                        if (iActualTimeInExtMin != 0 && bApplyLateChargeQuincena)
                                                        {
                                                            iActualTimeInExtMin = iShiftTimeIn2Min;
                                                            xReMarks = "LG";
                                                        }
                                                        #endregion

                                                        #region Late Bracket Deduction
                                                        if (bIsRegOrReg5DayCode == true && LATEBRCKTD != null)
                                                        {
                                                            iActualTimeInExtMin = GetTimeInWithLatePMBracketFilter(iActualTimeInExtMin, iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min);
                                                            //xReMarks = "T4";
                                                        }
                                                        #endregion

                                                        #region Undertime Bracket Deduction
                                                        if (iActualTimeInExtNxtMin == 0 && iActualTimeOutExtNxtMin == 0)
                                                        {
                                                            if (bIsRegOrReg5DayCode == true && UTIMEBRCKT != null)
                                                            {
                                                                iActualTimeOutExtMin = GetTimeOutWithUndertimeBracketFilter(iActualTimeOutExtMin, iShiftTimeOut2Min);
                                                                //xReMarks = "N4";
                                                            }
                                                        }
                                                        #endregion

                                                        iSecondHalfActualTimeInExtMin = iActualTimeInExtMin;
                                                    }
                                                    else
                                                    {
                                                        #region Undertime Bracket Deduction
                                                        if (iActualTimeInExtNxtMin == 0 && iActualTimeOutExtNxtMin == 0)
                                                        {
                                                            if (bIsRegOrReg5DayCode == true && UTIMEBRCKT != null)
                                                            {
                                                                iActualTimeOutExtMin = GetTimeOutWithUndertimeBracketFilter(iActualTimeOutExtMin, iShiftTimeOut2Min);
                                                                //xReMarks = "N4";
                                                            }
                                                        }
                                                        #endregion
                                                    }

                                                    #endregion
                                                }
                                                #endregion

                                                #region Round Logs Based on Time Fraction
                                                if (TIMEFRAC > 0)
                                                {
                                                    iActualTimeInExtMin = CleanUpByRoundHigh(iActualTimeInExtMin, TIMEFRAC, dal);
                                                    iActualTimeOutExtMin = CleanUpByRoundLow(iActualTimeOutExtMin, TIMEFRAC, dal);

                                                    iActualTimeInExtNxtMin = CleanUpByRoundHigh(iActualTimeInExtNxtMin, TIMEFRAC, dal);
                                                    iActualTimeOutExtNxtMin = CleanUpByRoundLow(iActualTimeOutExtNxtMin, TIMEFRAC, dal);
                                                }
                                                #endregion

                                                #region Converted Time
                                                //CONVERTED TIME 
                                                iAbsFraction = (bIsRegOrReg5DayCode == true) ? ABSFRACT_REG : ABSFRACT_NONREG;
                                                iConvTimeInExtMin = GenerateLaborHours_GetConvertedTimeIn1(iActualTimeInExtMin, iMasterShiftTimeIn1Min, dtEmpTimeRegister.Rows[i]["Msh_PadIn1"].ToString(), iAbsFraction, bIsGraveyard);
                                                iConvTimeOutExtMin = GenerateLaborHours_GetConvertedTimeOut1(iConvTimeInExtMin, iActualTimeOutExtMin, iMasterShiftTimeOut1Min, dtEmpTimeRegister.Rows[i]["Msh_PadOut2"].ToString(), iAbsFraction, bIsGraveyard);

                                                iConvTimeInExtNxtMin = GenerateLaborHours_GetConvertedTimeIn1(iActualTimeInExtNxtMin, iMasterShiftTimeIn1Min, dtEmpTimeRegister.Rows[i]["Msh_PadIn1"].ToString(), iAbsFraction, bIsGraveyard);
                                                iConvTimeOutExtNxtMin = GenerateLaborHours_GetConvertedTimeOut1(iConvTimeInExtNxtMin, iActualTimeOutExtNxtMin, iMasterShiftTimeOut1Min, dtEmpTimeRegister.Rows[i]["Msh_PadOut2"].ToString(), iAbsFraction, bIsGraveyard);

                                                //Check if time logs are outside shift range
                                                if (iConvTimeInExtMin >= iMasterShiftTimeOut2Min || (iConvTimeOutExtMin > 0 && iConvTimeOutExtMin <= iMasterShiftTimeIn1Min))
                                                {
                                                    bIsOutsideShift = true; //Enable flag used to check for logs outside shift ranges
                                                }
                                                #endregion

                                                #region Pocket Gap and Pocket Time Gap
                                                //POCKET GAP
                                                if (xPocket != 1)
                                                {
                                                    if (iConvTimeInExtMin != 0 && iConvTimeInExtMin < iPrevConvTimeOutExtMin + POCKETGAP)
                                                    {
                                                        if ((iShiftTimeOut1Min + iShiftTimeIn2Min == 0 || iShiftTimeOut1Min == iShiftTimeIn2Min) 
                                                            && (iPrevConvTimeOutExtMin + iConvTimeInExtMin == 0 || iPrevConvTimeOutExtMin == iConvTimeInExtMin))
                                                        {
                                                            //No break time in shift
                                                        }
                                                        else
                                                        {
                                                            AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, string.Format("Time In {0:00} - {1}", xPocket, strActualTimeInExt) + " is within " + POCKETGAP + " mins. from previous logout.", "AW");
                                                            iConvTimeInExtMin = iPrevConvTimeOutExtMin + POCKETGAP;
                                                        }
                                                    }
                                                }
                                                //POCKET TIME
                                                if (iConvTimeOutExtMin - iConvTimeInExtMin < POCKETTIME)
                                                {
                                                    iConvTimeOutExtMin = 0;
                                                    iConvTimeInExtMin = 0;
                                                }
                                                iPrevConvTimeOutExtMin = iConvTimeOutExtMin;
                                                #endregion

                                                if (iConvTimeInExtMin != 0 && iConvTimeOutExtMin != 0)
                                                {
                                                    string regIndicator = "";
                                                    if (iActualTimeInExtNxtMin == 0 && iActualTimeOutExtNxtMin == 0)
                                                        regIndicator = "LR";

                                                    if (iConvTimeOutExtMin > iShiftTimeOut2Min)
                                                        regIndicator = "LR";

                                                    #region Save First In1 and First In2
                                                    if (iConvTimeInExtMin < iShiftTimeOut1Min)
                                                    {
                                                        if (xPocket == 1)
                                                            iConvTimeIn1Min = iConvTimeInExtMin;
                                                        else
                                                            iConvTimeOut1Min = iConvTimeOutExtMin;
                                                    } 
                                                    else
                                                    {
                                                        if (iSecondHalfConvTimeInExtMin == 0)
                                                        {
                                                            iConvTimeIn2Min = iConvTimeInExtMin;
                                                            iSecondHalfConvTimeInExtMin = iConvTimeInExtMin;
                                                        }
                                                        else
                                                            iConvTimeOut2Min = iConvTimeOutExtMin;
                                                    }
                                                    #endregion

                                                    #region Identify Regular Day or Overtime

                                                    if (!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode) //Regular Day 
                                                    {
                                                        if (iShiftReducedTimeOut2Min != 0 && !bWorkAuthApproved)
                                                        {
                                                            iTempMultPockVar = 0;
                                                            iTempMultPockVar2 = 0;
                                                            iTempMultPockVar = Math.Min(iConvTimeInExtMin, iShiftReducedTimeOut2Min);
                                                            iTempMultPockVar2 = Math.Min(iConvTimeOutExtMin, iShiftReducedTimeOut2Min);

                                                            if (GetOTHoursInMinutes(iTempMultPockVar, iTempMultPockVar2, Math.Min(iShiftTimeIn1Min, iShiftReducedTimeOut2Min), Math.Min(iShiftTimeOut2Min, iShiftReducedTimeOut2Min)) != 0)
                                                            {
                                                                if (bIsOutsideShift)
                                                                {
                                                                    if (iTempMultPockVar > 0 && iTempMultPockVar2 < iMasterShiftTimeIn1Min)
                                                                        xReMarks = "AO";
                                                                    else
                                                                        xReMarks = "PO";

                                                                    AddToRegLeaveAbs(xPocket, GetHourStrFromMins(iTempMultPockVar), GetHourStrFromMins(iTempMultPockVar2), iTempMultPockVar, iTempMultPockVar2, (iActualTimeInExtMinOrig > iShiftReducedTimeOut2Min ? iShiftReducedTimeOut2Min : iActualTimeInExtMinOrig), (iActualTimeOutExtMinOrig > iShiftReducedTimeOut2Min ? iShiftReducedTimeOut2Min : iActualTimeOutExtMinOrig), "", false, false, "", RegLeaveAbsType.OVT, xReMarks, false, "", bIsGraveyard);
                                                                }
                                                                else
                                                                    AddToRegLeaveAbs(xPocket, GetHourStrFromMins(iTempMultPockVar), GetHourStrFromMins(iTempMultPockVar2), iTempMultPockVar, iTempMultPockVar2, (iActualTimeInExtMinOrig > iShiftReducedTimeOut2Min ? iShiftReducedTimeOut2Min : iActualTimeInExtMinOrig), (iActualTimeOutExtMinOrig > iShiftReducedTimeOut2Min ? iShiftReducedTimeOut2Min : iActualTimeOutExtMinOrig), "", false, false, "", RegLeaveAbsType.REG, xReMarks, false, regIndicator, bIsGraveyard);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            iTempMultPockVar = 0;
                                                            iTempMultPockVar = GetOTHoursInMinutes(iConvTimeInExtMin, iConvTimeOutExtMin, iShiftTimeIn1Min, iShiftTimeOut1Min);
                                                            iTempMultPockVar += GetOTHoursInMinutes(iConvTimeInExtMin, iConvTimeOutExtMin, iShiftTimeIn2Min, iShiftTimeOut2Min);
                                                            if (iTempMultPockVar >= iShiftMin)
                                                                bWholeDayLogs = true;

                                                            if (bIsOutsideShift)
                                                            {
                                                                if (iConvTimeInExtMin > 0 && iConvTimeInExtMin < iMasterShiftTimeIn1Min)
                                                                    xReMarks = "AO";
                                                                else
                                                                    xReMarks = "PO";

                                                                AddToRegLeaveAbs(xPocket, GetHourStrFromMins(iConvTimeInExtMin), GetHourStrFromMins(iConvTimeOutExtMin), iConvTimeInExtMin, iConvTimeOutExtMin, iActualTimeInExtMinOrig, iActualTimeOutExtMinOrig, "", false, false, "", RegLeaveAbsType.OVT, xReMarks, false, "", bIsGraveyard);
                                                            }
                                                            else
                                                                AddToRegLeaveAbs(xPocket, GetHourStrFromMins(iConvTimeInExtMin), GetHourStrFromMins(iConvTimeOutExtMin), iConvTimeInExtMin, iConvTimeOutExtMin, iActualTimeInExtMinOrig, iActualTimeOutExtMinOrig, "", false, false, "", RegLeaveAbsType.REG, xReMarks, false, regIndicator, bIsGraveyard);
                                                        }
                                                    }
                                                    else
                                                        AddToRegLeaveAbs(xPocket, GetHourStrFromMins(iConvTimeInExtMin), GetHourStrFromMins(iConvTimeOutExtMin), iConvTimeInExtMin, iConvTimeOutExtMin, iActualTimeInExtMinOrig, iActualTimeOutExtMinOrig, "", false, false, "", RegLeaveAbsType.OVT, "PO", false, "", bIsGraveyard);
                                                    #endregion
                                                }

                                                if (!strActualTimeInExt.Equals("") && strActualTimeInExt.Length < 4)
                                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, string.Format("Invalid Time In {0:00}", xPocket), "BW");
                                                if (!strActualTimeOutExt.Equals("") && strActualTimeOutExt.Length < 4)
                                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, string.Format("Invalid Time Out {0:00}", xPocket), "BW");

                                                #region Actual Hours Computation
                                                iEXPHourMin += GetOTHoursInMinutes(iActualTimeInExtMin, iActualTimeOutExtMin, Math.Min(iActualTimeInExtMin,iShiftTimeIn1Min), iShiftTimeOut1Min);
                                                iEXPHourMin += GetOTHoursInMinutes(iActualTimeInExtMin, iActualTimeOutExtMin, iShiftTimeIn2Min, Math.Max(iActualTimeOutExtMin, iShiftTimeOut2Min));
                                                #endregion

                                                if (xPocket > 2 && iActualTimeInExtNxtMin == 0 && iActualTimeOutExtNxtMin == 0) //Always execute in the first two pockets
                                                    break;
                                            }

                                            #region Add Mid OT Logs - Break Start and Break End
                                            if (MIDOT == true && !bRequiredLogsOnBreak && iShiftTimeOut1Min != iShiftTimeIn2Min)
                                            {
                                                foreach (DataRow drOTApp in drArrOTApproved)
                                                {
                                                    iOTStartMin = GetMinsFromHourStr(drOTApp["Tot_StartTime"].ToString());
                                                    iOTEndMin = GetMinsFromHourStr(drOTApp["Tot_EndTime"].ToString());
                                                    if (drOTApp["Tot_OvertimeType"].ToString() == "M" && (iOTEndMin - iOTStartMin > 0))
                                                    {
                                                        AddToRegLeaveAbs(strMasterShiftTimeOut1, strMasterShiftTimeIn2, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut1Min, iShiftTimeIn2Min, RegLeaveAbsType.OVT, "MO", false, bIsGraveyard);
                                                        break;
                                                    }
                                                }  
                                            }
                                            #endregion
                                            
                                        }
                                        #endregion
                                    }
                                    else
                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No record in Time Register Misc table", "BE");

                                    if (drArrLeaveApp.Length > 0)
                                    {
                                        #region Generate Leave records
                                        for (int lv = 0; lv < drArrLeaveApp.Length; lv++)
                                        {
                                            int iLeaveStartMin = GetMinsFromHourStr(drArrLeaveApp[lv]["StartTime"].ToString());
                                            int iLeaveEndMin = GetMinsFromHourStr(drArrLeaveApp[lv]["EndTime"].ToString());

                                            if (bIsGraveyard) //Graveyard shift 
                                            {
                                                if (iLeaveStartMin < (iShiftTimeIn1Min - LOGPAD))
                                                {
                                                    iLeaveStartMin += GRAVEYARD24;
                                                }
                                                if (iLeaveEndMin < (iShiftTimeOut2Min - LOGPAD))
                                                {
                                                    iLeaveEndMin += GRAVEYARD24;
                                                }
                                            }

                                            if (GetOTHoursInMinutes(iLeaveStartMin, iLeaveEndMin, iShiftTimeIn1Min, iShiftTimeOut2Min) > 0)
                                            {
                                                if ((!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode) || bDailiesNoWorkNoPay) //Regular
                                                {
                                                    #region Check if Leave is within Shift
                                                    iTempMultPockVar    = 0;
                                                    iTempMultPockVar2   = 0;
                                                    iTempMultPockVar    = Math.Max(iLeaveStartMin, iShiftTimeIn1Min);
                                                    iTempMultPockVar2   = Math.Min(iLeaveEndMin, iShiftTimeOut2Min);

                                                    iTempMultPockVar3   = 0;
                                                    iTempMultPockVar3   = GetOTHoursInMinutes(iLeaveStartMin, iLeaveEndMin, iShiftTimeIn1Min, iShiftTimeOut1Min);
                                                    iTempMultPockVar3   += GetOTHoursInMinutes(iLeaveStartMin, iLeaveEndMin, iShiftTimeIn2Min, iShiftTimeOut2Min);
                                                    if (iTempMultPockVar3 >= iShiftMin && Convert.ToBoolean(drArrLeaveApp[lv]["PaidLeave"]))
                                                        bWholeDayLeave = true;
                                                    #endregion
                                                    if (!bWholeDayLogs)
                                                    {
                                                        if (Convert.ToBoolean(EXTREGLVE) && Convert.ToBoolean(drArrLeaveApp[lv]["PaidLeave"]))
                                                            AddToRegLeaveAbs(GetHourStrFromMins(iTempMultPockVar), GetHourStrFromMins(iTempMultPockVar2), iTempMultPockVar, iTempMultPockVar2, iTempMultPockVar, iTempMultPockVar2, drArrLeaveApp[lv]["LeaveType"].ToString(), Convert.ToBoolean(drArrLeaveApp[lv]["PaidLeave"]), Convert.ToBoolean(drArrLeaveApp[lv]["WithCredit"]), drArrLeaveApp[lv]["DayUnit"].ToString(), RegLeaveAbsType.LVE, "PL", false, bIsGraveyard);

                                                        if (Convert.ToBoolean(EXTREGULVE) && !Convert.ToBoolean(drArrLeaveApp[lv]["PaidLeave"]))
                                                        {
                                                            //if (!CheckLeaveStartEndTimeifHasEquivLogs(iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min, iLeaveStartMin, iLeaveEndMin, drArrLeaveApp[lv]["DayUnit"].ToString())) //Do not add unpaid leave if has equivalent logs
                                                            AddToRegLeaveAbs(GetHourStrFromMins(iTempMultPockVar), GetHourStrFromMins(iTempMultPockVar2), iTempMultPockVar, iTempMultPockVar2, iTempMultPockVar, iTempMultPockVar2, drArrLeaveApp[lv]["LeaveType"].ToString(), Convert.ToBoolean(drArrLeaveApp[lv]["PaidLeave"]), Convert.ToBoolean(drArrLeaveApp[lv]["WithCredit"]), drArrLeaveApp[lv]["DayUnit"].ToString(), RegLeaveAbsType.LVE, "UL", false, bIsGraveyard);
                                                        }
                                                            
                                                    }

                                                    if (!Convert.ToBoolean(EXTREGLVE) && Convert.ToBoolean(drArrLeaveApp[lv]["PaidLeave"]))
                                                    {
                                                        AddToRegLeaveAbs(GetHourStrFromMins(iTempMultPockVar), GetHourStrFromMins(iTempMultPockVar2), iTempMultPockVar, iTempMultPockVar2, iTempMultPockVar, iTempMultPockVar2, drArrLeaveApp[lv]["LeaveType"].ToString(), Convert.ToBoolean(drArrLeaveApp[lv]["PaidLeave"]), Convert.ToBoolean(drArrLeaveApp[lv]["WithCredit"]), drArrLeaveApp[lv]["DayUnit"].ToString(), RegLeaveAbsType.LVE, "PL", false, bIsGraveyard);
                                                    }

                                                    if (!Convert.ToBoolean(EXTREGULVE) && !Convert.ToBoolean(drArrLeaveApp[lv]["PaidLeave"]))
                                                    {
                                                        AddToRegLeaveAbs(GetHourStrFromMins(iTempMultPockVar), GetHourStrFromMins(iTempMultPockVar2), iTempMultPockVar, iTempMultPockVar2, iTempMultPockVar, iTempMultPockVar2, drArrLeaveApp[lv]["LeaveType"].ToString(), Convert.ToBoolean(drArrLeaveApp[lv]["PaidLeave"]), Convert.ToBoolean(drArrLeaveApp[lv]["WithCredit"]), drArrLeaveApp[lv]["DayUnit"].ToString(), RegLeaveAbsType.LVE, "UL", false, bIsGraveyard);
                                                    }


                                                    if (Convert.ToBoolean(drArrLeaveApp[lv]["PaidLeave"]) && !Convert.ToBoolean(drArrLeaveApp[lv]["WithCredit"])) //Excess of OB
                                                    {
                                                        if (iLeaveStartMin > 0 && iLeaveStartMin < iMasterShiftTimeIn1Min)
                                                            AddToRegLeaveAbs(GetHourStrFromMins(iLeaveStartMin), strMasterShiftTimeIn1, iLeaveStartMin, iShiftTimeIn1Min, iLeaveStartMin, iShiftTimeIn1Min, RegLeaveAbsType.OVT, "AO", false, bIsGraveyard);

                                                        else if (iLeaveEndMin > iShiftTimeOut2Min) //Trim if OB exceeds Shift Out 2 and is a candidate for OT
                                                            AddToRegLeaveAbs(strMasterShiftTimeOut2, GetHourStrFromMins(iLeaveEndMin), iShiftTimeOut2Min, iLeaveEndMin, iShiftTimeOut2Min, iLeaveEndMin, RegLeaveAbsType.OVT, "PO", false, bIsGraveyard);
                                                    }  
                                                }
                                                else //Non-Regular
                                                {
                                                    if (Convert.ToBoolean(drArrLeaveApp[lv]["PaidLeave"]) && !Convert.ToBoolean(drArrLeaveApp[lv]["WithCredit"])) //OB
                                                        AddToRegLeaveAbs(GetHourStrFromMins(iLeaveStartMin), GetHourStrFromMins(iLeaveEndMin), iLeaveStartMin, iLeaveEndMin, iLeaveStartMin, iLeaveEndMin, RegLeaveAbsType.OVT, "PO", false, bIsGraveyard);
                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                    if ((!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode) && listRegLeaveAbs.Count == 0)  //Absent on Regular Day

                                        AddToRegLeaveAbs(strMasterShiftTimeIn1, strMasterShiftTimeOut2, iShiftTimeIn1Min, iShiftTimeOut2Min, RegLeaveAbsType.ABS, "WD", bIsGraveyard);
                                    #endregion

                                    #region Clean-up
                                    //Sort
                                    listRegLeaveAbs.Sort((x, y) => x.iConvBeginMin.CompareTo(y.iConvBeginMin));
                                    if ((!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode) || bDailiesNoWorkNoPay) //Regular
                                    {
                                        #region First Pass
                                        for (int idx = 0; idx < listRegLeaveAbs.Count; idx++)
                                        {
                                            if (listRegLeaveAbs[idx].strRegLeaveAbsType == RegLeaveAbsType.REG)
                                            {
                                                if (bWholeDayLeave)
                                                {
                                                    //Trim logs before Shift In1 as Advance Overtime
                                                    if (listRegLeaveAbs[idx].iConvBeginMin < iShiftTimeOut1Min)
                                                    {
                                                        #region Trim First Punch to Shift In1
                                                        if (listRegLeaveAbs[idx].iPocket == 1 && listRegLeaveAbs[idx].iConvBeginMin < iShiftTimeIn1Min && listRegLeaveAbs[idx].iConvEndMin > iShiftTimeIn1Min)
                                                        {
                                                            AddToRegLeaveAbs(listRegLeaveAbs[idx].strBeginTime, strMasterShiftTimeIn1, listRegLeaveAbs[idx].iConvBeginMin, iShiftTimeIn1Min, RegLeaveAbsType.OVT, "AO", bIsGraveyard);

                                                            listRegLeaveAbs[idx].strBeginTime = strMasterShiftTimeIn1;
                                                            listRegLeaveAbs[idx].iConvBeginMin = iShiftTimeIn1Min;
                                                            listRegLeaveAbs[idx].iActualStartMin = iShiftTimeIn1Min;
                                                        }
                                                        #endregion

                                                        iTempMultPockVar = 0;
                                                        iTempMultPockVar = Math.Min(listRegLeaveAbs[idx].iConvEndMin, iShiftTimeOut1Min);

                                                        if (iTempMultPockVar != listRegLeaveAbs[idx].iConvEndMin)
                                                        {
                                                            listRegLeaveAbs[idx].strBeginTime = strMasterShiftTimeOut1;
                                                            listRegLeaveAbs[idx].iConvBeginMin = iShiftTimeOut1Min;
                                                            listRegLeaveAbs[idx].iActualStartMin = iShiftTimeOut1Min;
                                                        }
                                                        else
                                                            listRegLeaveAbs.RemoveAt(idx);
                                                    }
                                                    else
                                                    {
                                                        iTempMultPockVar    = 0;
                                                        iTempMultPockVar2   = 0;
                                                        iTempMultPockVar    = Math.Max(listRegLeaveAbs[idx].iConvBeginMin, iShiftTimeOut1Min);
                                                        iTempMultPockVar2   = Math.Min(listRegLeaveAbs[idx].iConvEndMin, iShiftTimeIn2Min);

                                                        if (iTempMultPockVar != iTempMultPockVar2)
                                                            AddToRegLeaveAbs(GetHourStrFromMins(iTempMultPockVar), GetHourStrFromMins(iTempMultPockVar2), iTempMultPockVar, iTempMultPockVar2, iTempMultPockVar, iTempMultPockVar2, RegLeaveAbsType.OVT, "MO", false, bIsGraveyard);

                                                        //Trim logs after Shift Out as Post Overtime
                                                        #region Trim Last Punch to Shift Out 2
                                                        if (listRegLeaveAbs[idx].strRegLeaveAbsIndicator.Equals("LR") && listRegLeaveAbs[idx].iConvEndMin > iShiftTimeOut2Min)
                                                        {
                                                            AddToRegLeaveAbs(strMasterShiftTimeOut2, listRegLeaveAbs[idx].strEndTime, iShiftTimeOut2Min, listRegLeaveAbs[idx].iConvEndMin, RegLeaveAbsType.OVT, "PO", bIsGraveyard);

                                                            listRegLeaveAbs[idx].strEndTime = strMasterShiftTimeOut2;
                                                            listRegLeaveAbs[idx].iConvEndMin = iShiftTimeOut2Min;
                                                            listRegLeaveAbs[idx].iActualEndMin = iShiftTimeOut2Min;
                                                        }
                                                        #endregion

                                                        listRegLeaveAbs.RemoveAt(idx);
                                                    }
                                                }
                                            }
                                        }
                                        #endregion

                                        #region Logic with more than one record
                                        //Sort
                                        listRegLeaveAbs.Sort((x, y) => x.iConvBeginMin.CompareTo(y.iConvBeginMin));
                                        if (listRegLeaveAbs.Count > 1)
                                        {
                                            #region Clean-up Loop
                                            for (int x = 0; x < listRegLeaveAbs.Count; x++)
                                            {
                                                iStartTime      	= listRegLeaveAbs[x].iConvBeginMin;
                                                iEndTime        	= listRegLeaveAbs[x].iConvEndMin;
                                                strType         	= listRegLeaveAbs[x].strRegLeaveAbsType.ToString();
                                                iPocket         	= listRegLeaveAbs[x].iPocket;
                                                strDayUnit      	= listRegLeaveAbs[x].strDayUnit;
                                                bPaidLeave      	= listRegLeaveAbs[x].bPaidLeave;
                                                iStartTimeNxt   	= 0;
                                                iEndTimeNxt     	= 0;
                                                strTypeNxt      	= "";
                                                iPocketNxt      	= 0;
                                                strDayUnitNxt   	= "";
                                                iRowNxt         	= x+1;
                                                bPaidLeaveNxt   	= false;

                                                if (iStartTime != 0 && iEndTime != 0)
                                                {
                                                    if (x < listRegLeaveAbs.Count - 1)
                                                    {

                                                        iStartTimeNxt   = listRegLeaveAbs[iRowNxt].iConvBeginMin;
                                                        iEndTimeNxt     = listRegLeaveAbs[iRowNxt].iConvEndMin;
                                                        strTypeNxt      = listRegLeaveAbs[iRowNxt].strRegLeaveAbsType.ToString();
                                                        iPocketNxt      = listRegLeaveAbs[iRowNxt].iPocket;
                                                        strDayUnitNxt   = listRegLeaveAbs[iRowNxt].strDayUnit;
                                                        bPaidLeaveNxt   = listRegLeaveAbs[iRowNxt].bPaidLeave;

                                                        if (bWholeDayLogs || bWholeDayLeave)
                                                        {
                                                            #region WHOLE DAY LOGS OR LEAVE
                                                            int ctr = 0;
                                                            int ctr2 = 0;
                                                            if (!listRegLeaveAbs[iRowNxt].bStatus)
                                                            {
                                                                if (!Convert.ToBoolean(EXTREGLVE))
                                                                {
                                                                    if (strType == "LVE" && strTypeNxt == "REG")
                                                                        ctr = iRowNxt;
                                                                    else if (strType == "REG" && strTypeNxt == "LVE")
                                                                        ctr = x;

                                                                    ctr2 = (strType == "LVE" ? x : (iRowNxt));

                                                                    if (listRegLeaveAbs[ctr2].strDayUnit == "WH")
                                                                        listRegLeaveAbs.RemoveAt(ctr);
                                                                    else if (listRegLeaveAbs[ctr2].strDayUnit == "H1")
                                                                    {
                                                                        listRegLeaveAbs[ctr].strBeginTime       = strMasterShiftTimeIn2;
                                                                        listRegLeaveAbs[ctr].iConvBeginMin      = iShiftTimeIn2Min;
                                                                        listRegLeaveAbs[ctr].iActualStartMin    = iShiftTimeIn2Min;
                                                                        listRegLeaveAbs[ctr].bStatus            = true;
                                                                    }
                                                                    else if (listRegLeaveAbs[ctr2].strDayUnit == "H2")
                                                                    {
                                                                        listRegLeaveAbs[ctr].strEndTime     = strMasterShiftTimeOut1;
                                                                        listRegLeaveAbs[ctr].iConvEndMin    = iShiftTimeOut1Min;
                                                                        listRegLeaveAbs[ctr].iActualEndMin  = iShiftTimeIn2Min;
                                                                        listRegLeaveAbs[ctr].bStatus        = true;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (strType == "REG")
                                                                            listRegLeaveAbs.RemoveAt(x);
                                                                    }
                                                                }
                                                                else if (Convert.ToBoolean(EXTREGLVE))
                                                                {
                                                                    if (strType == "LVE" && strTypeNxt == "REG")
                                                                        ctr = x;
                                                                    else if (strType == "REG" && strTypeNxt == "LVE")
                                                                        ctr = iRowNxt;

                                                                    if (listRegLeaveAbs[ctr].strDayUnit == "WH")
                                                                        listRegLeaveAbs.RemoveAt(ctr);
                                                                    else if (listRegLeaveAbs[ctr].strDayUnit == "H1")
                                                                    {
                                                                        listRegLeaveAbs[ctr].strBeginTime       = strMasterShiftTimeIn2;
                                                                        listRegLeaveAbs[ctr].iConvBeginMin      = iShiftTimeIn2Min;
                                                                        listRegLeaveAbs[ctr].iActualStartMin    = iShiftTimeIn2Min;
                                                                        listRegLeaveAbs[ctr].bStatus            = true;
                                                                    }
                                                                    else if (listRegLeaveAbs[ctr].strDayUnit == "H2")
                                                                    {
                                                                        listRegLeaveAbs[ctr].strEndTime     = strMasterShiftTimeOut1;
                                                                        listRegLeaveAbs[ctr].iConvEndMin    = iShiftTimeOut1Min;
                                                                        listRegLeaveAbs[ctr].iActualEndMin  = iShiftTimeOut1Min;
                                                                        listRegLeaveAbs[ctr].bStatus        = true;
                                                                    }
                                                                    else
                                                                    {
                                                                        if (strType == "LVE")
                                                                            listRegLeaveAbs.RemoveAt(x);
                                                                    }
                                                                }
                                                            }
                                                            #endregion
                                                        }
                                                        else
                                                        {
                                                            #region OTHERS
                                                            if (!listRegLeaveAbs[x].bStatus && !listRegLeaveAbs[iRowNxt].bStatus)
                                                            {
                                                                if (iStartTimeNxt != iEndTime)
                                                                {
                                                                    if (iEndTime < iStartTimeNxt && iStartTime <= iEndTimeNxt)
                                                                    {
                                                                        #region Trim to Break Start or Break End
                                                                        iTempMultPockVar        = 0;
                                                                        iTempMultPockVar2       = 0;
                                                                        iTempMultPockVar        = GetBreakStartBasedOnShiftMin(iEndTime, iStartTimeNxt, iShiftTimeOut1Min, iShiftTimeIn2Min);
                                                                        iTempMultPockVar2       = GetBreakEndBasedOnShiftMin(iStartTimeNxt, iShiftTimeOut1Min, iShiftTimeIn2Min);
                                                                        #endregion

                                                                        if ((strType == "LVE" || strType == "REG") && iTempMultPockVar != iTempMultPockVar2)
                                                                        {
                                                                            string xRemarks = "";
                                                                            if (iTempMultPockVar > iShiftTimeOut1Min || iTempMultPockVar2 > iShiftTimeOut1Min)
                                                                            {
                                                                                xRemarks = "N2";
                                                                                if (iTempMultPockVar < iShiftTimeOut1Min)
                                                                                {
                                                                                    xRemarks = "N1";
                                                                                }
                                                                                else
                                                                                {
                                                                                    if (!bConvLate2)
                                                                                    {
                                                                                        xRemarks = "T2";
                                                                                        bConvLate2 = true;
                                                                                    }
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if (strType == "LVE" && strTypeNxt == "REG" && iPocketNxt == 1)
                                                                                    xRemarks = "T1";
                                                                                else
                                                                                    xRemarks = "N1";
                                                                            }

                                                                            //Insert Absent
                                                                            AddToRegLeaveAbs(GetHourStrFromMins(iEndTime), GetHourStrFromMins(iStartTimeNxt), iEndTime, iStartTimeNxt, RegLeaveAbsType.ABS, xRemarks, bIsGraveyard);
                                                                            listRegLeaveAbs[x].bStatus = true;
                                                                        }
                                                                    }
                                                                    if (iEndTime > iStartTimeNxt && iEndTimeNxt >= iStartTime)
                                                                    {
                                                                        if (iStartTime >= iStartTimeNxt && iEndTime <= iEndTimeNxt) //Within Regular start and end time
                                                                        {
                                                                            listRegLeaveAbs[x].strBeginTime     = "0000";
                                                                            listRegLeaveAbs[x].iConvBeginMin    = 0;
                                                                            listRegLeaveAbs[x].strEndTime       = "0000";
                                                                            listRegLeaveAbs[x].iConvEndMin      = 0;
                                                                            listRegLeaveAbs[x].strRemarks       = "";
                                                                            listRegLeaveAbs[x].bStatus          = true;
                                                                        }
                                                                        else
                                                                        {
                                                                            if (strType == "LVE" && strTypeNxt == "REG")
                                                                            {
                                                                                if ((bPaidLeave && !Convert.ToBoolean(EXTREGLVE)) || (!bPaidLeave && !Convert.ToBoolean(EXTREGULVE)))
                                                                                {
                                                                                    listRegLeaveAbs[iRowNxt].strBeginTime   = GetHourStrFromMins(iEndTime);
                                                                                    listRegLeaveAbs[iRowNxt].iConvBeginMin  = iEndTime;
                                                                                    listRegLeaveAbs[x].bStatus              = true;
                                                                                }
                                                                                else if ((bPaidLeave && Convert.ToBoolean(EXTREGLVE)) || (!bPaidLeave && Convert.ToBoolean(EXTREGULVE)))
                                                                                {
                                                                                    listRegLeaveAbs[x].strEndTime           = GetHourStrFromMins(iStartTimeNxt);
                                                                                    listRegLeaveAbs[x].iConvEndMin          = iStartTimeNxt;
                                                                                    listRegLeaveAbs[x].bStatus              = true;
                                                                                }
                                                                            }
                                                                            else if (strType == "REG" && strTypeNxt == "LVE")
                                                                            {
                                                                                if ((bPaidLeaveNxt && !Convert.ToBoolean(EXTREGLVE)) || (!bPaidLeaveNxt && !Convert.ToBoolean(EXTREGULVE)))
                                                                                {
                                                                                    listRegLeaveAbs[x].strEndTime           = GetHourStrFromMins(iStartTimeNxt);
                                                                                    listRegLeaveAbs[x].iConvEndMin          = iStartTimeNxt;
                                                                                    listRegLeaveAbs[x].bStatus              = true;
                                                                                }
                                                                                else if ((bPaidLeaveNxt && Convert.ToBoolean(EXTREGLVE)) || (!bPaidLeaveNxt && Convert.ToBoolean(EXTREGULVE)))
                                                                                {
                                                                                    listRegLeaveAbs[iRowNxt].strBeginTime   = GetHourStrFromMins(iEndTime);
                                                                                    listRegLeaveAbs[iRowNxt].iConvBeginMin  = iEndTime;
                                                                                    listRegLeaveAbs[x].bStatus              = true;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            #endregion
                                                        }
                                                    }
                                                }
                                            }
                                            #endregion
                                        }
                                        #endregion

                                        #region Second Pass
                                        //Sort
                                        listRegLeaveAbs.Sort((x, y) => x.iConvBeginMin.CompareTo(y.iConvBeginMin));
                                        int orgCount = listRegLeaveAbs.Count;
                                        if (orgCount > 0)
                                        {
                                            for (int x = 0; x < orgCount; x++)
                                            {
                                                iStartTime      = 0;
                                                iEndTime        = 0;
                                                iStartTimeNxt   = 0;
                                                iEndTimeNxt     = 0;
                                                strType         = "";
                                                iPocket         = 0;
                                                iStartTime      = listRegLeaveAbs[x].iConvBeginMin;
                                                iEndTime        = listRegLeaveAbs[x].iConvEndMin;
                                                strType         = listRegLeaveAbs[x].strRegLeaveAbsType.ToString();
                                                iPocket         = listRegLeaveAbs[x].iPocket;

                                                if (iStartTime != 0 && iEndTime != 0)
                                                {
                                                    #region Trim First Punch to Shift In 1
                                                    if (x == 0 && iStartTime < iShiftTimeIn1Min && iEndTime > iShiftTimeIn1Min && strType == "REG")
                                                    {
                                                        AddToRegLeaveAbs(listRegLeaveAbs[x].strBeginTime, strMasterShiftTimeIn1, iStartTime, iShiftTimeIn1Min, RegLeaveAbsType.OVT, "AO", bIsGraveyard);

                                                        listRegLeaveAbs[x].strBeginTime     = strMasterShiftTimeIn1;
                                                        listRegLeaveAbs[x].iConvBeginMin    = Math.Max(iStartTime, iShiftTimeIn1Min);
                                                        listRegLeaveAbs[x].iActualStartMin  = Math.Max(iStartTime, iShiftTimeIn1Min);
                                                    }
                                                    #endregion

                                                    #region Check Late on first record
                                                    if (x == 0 && (strType == "REG" || strType == "LVE")
                                                        && GetOTHoursInMinutes(iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn1Min, iStartTime) > 0)
                                                    {
                                                        if (strType == "REG" && listRegLeaveAbs.Count > 1)
                                                        {
                                                            #region Initializition
                                                            iStartTimeNxt 		= 0;
                                                            iEndTimeNxt	 		= 0;
                                                            strTypeNxt 			= "";
                                                            iRowNxt 			= x+1;
                                                            iStartTimeNxt 		= listRegLeaveAbs[iRowNxt].iConvBeginMin;
                                                            iEndTimeNxt 		= listRegLeaveAbs[iRowNxt].iConvEndMin;
                                                            strTypeNxt 			= listRegLeaveAbs[iRowNxt].strRegLeaveAbsType.ToString();

                                                            if (iStartTimeNxt == 0 && iEndTimeNxt == 0)
                                                            {
                                                                if ((x + 2) < listRegLeaveAbs.Count)
                                                                {
                                                                    iRowNxt++;
                                                                    iStartTimeNxt 	= listRegLeaveAbs[iRowNxt].iConvBeginMin;
                                                                    iEndTimeNxt 	= listRegLeaveAbs[iRowNxt].iConvEndMin;
                                                                    strTypeNxt 		= listRegLeaveAbs[iRowNxt].strRegLeaveAbsType.ToString();
                                                                }
                                                            }
                                                            #endregion

                                                            if (strTypeNxt == "LVE" && iStartTimeNxt == iShiftTimeIn1Min)
                                                            {
                                                                listRegLeaveAbs[x].strBeginTime = strMasterShiftTimeIn1;
                                                                listRegLeaveAbs[x].iConvBeginMin = iShiftTimeIn1Min;
                                                            }
                                                            else
                                                            {
                                                                if (bWholeDayLogs)
                                                                    AddToRegLeaveAbs(strMasterShiftTimeIn1, listRegLeaveAbs[x].strBeginTime, iShiftTimeIn1Min, iStartTime, RegLeaveAbsType.REG, "", bIsGraveyard);
                                                                else if (bWholeDayLeave)
                                                                    RegLeaveAbsAddToList(strMasterShiftTimeIn1, listRegLeaveAbs[x].strBeginTime, iShiftTimeIn1Min, iStartTime, iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min, iShiftMin, bIsGraveyard);
                                                                else
                                                                {
                                                                    if (iStartTime > iShiftTimeIn2Min)
                                                                    {
                                                                        AddToRegLeaveAbs(strMasterShiftTimeIn1, strMasterShiftTimeIn2, iShiftTimeIn1Min, iShiftTimeIn2Min, RegLeaveAbsType.ABS, "T1", bIsGraveyard);
                                                                        AddToRegLeaveAbs(strMasterShiftTimeIn2, listRegLeaveAbs[x].strBeginTime, iShiftTimeIn2Min, iStartTime, RegLeaveAbsType.ABS, "T2", bIsGraveyard);
                                                                    }
                                                                    else
                                                                        AddToRegLeaveAbs(strMasterShiftTimeIn1, listRegLeaveAbs[x].strBeginTime, iShiftTimeIn1Min, iStartTime, RegLeaveAbsType.ABS, "T1", bIsGraveyard);
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (bWholeDayLogs)
                                                                AddToRegLeaveAbs(strMasterShiftTimeIn1, listRegLeaveAbs[x].strBeginTime, iShiftTimeIn1Min, iStartTime, RegLeaveAbsType.REG, "", bIsGraveyard);
                                                            else if (bWholeDayLeave)
                                                                RegLeaveAbsAddToList(strMasterShiftTimeIn1, listRegLeaveAbs[x].strBeginTime, iShiftTimeIn1Min, iStartTime, iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min, iShiftMin, bIsGraveyard);
                                                            else
                                                            {
                                                                if (iStartTime > iShiftTimeIn2Min)
                                                                {
                                                                    AddToRegLeaveAbs(strMasterShiftTimeIn1, strMasterShiftTimeIn2, iShiftTimeIn1Min, iShiftTimeIn2Min, RegLeaveAbsType.ABS, "T1", bIsGraveyard);
                                                                    AddToRegLeaveAbs(strMasterShiftTimeIn2, listRegLeaveAbs[x].strBeginTime, iShiftTimeIn2Min, iStartTime, RegLeaveAbsType.ABS, "T2", bIsGraveyard);
                                                                }
                                                                else
                                                                    AddToRegLeaveAbs(strMasterShiftTimeIn1, listRegLeaveAbs[x].strBeginTime, iShiftTimeIn1Min, iStartTime, RegLeaveAbsType.ABS, "T1", bIsGraveyard);
                                                            }

                                                        }
                                                    }
                                                    #endregion

                                                    #region Check Undertime
                                                    if (x < orgCount - 1)
                                                    {
                                                        iStartTimeNxt       = 0;
                                                        iPocketNxt          = 0;
                                                        iStartTimeNxt       = listRegLeaveAbs[x+1].iConvBeginMin;
                                                        iPocketNxt          = listRegLeaveAbs[x+1].iPocket;

                                                        if (iStartTimeNxt != iEndTime)
                                                        {
                                                            #region Trim to Break Start or Break End
                                                            iTempMultPockVar    = 0;
                                                            iTempMultPockVar2   = 0;
                                                            iTempMultPockVar    = GetBreakStartBasedOnShiftMin(iEndTime, iStartTimeNxt, iShiftTimeOut1Min, iShiftTimeIn2Min);
                                                            iTempMultPockVar2   = GetBreakEndBasedOnShiftMin(iStartTimeNxt, iShiftTimeOut1Min, iShiftTimeIn2Min);
                                                            #endregion

                                                            if (iTempMultPockVar != iTempMultPockVar2
                                                                && iTempMultPockVar != iShiftTimeOut1Min && iTempMultPockVar2 != iShiftTimeIn2Min)
                                                            {
                                                                if (bWholeDayLogs)
                                                                    AddToRegLeaveAbs(GetHourStrFromMins(iEndTime), GetHourStrFromMins(iStartTimeNxt), iEndTime, iStartTimeNxt, RegLeaveAbsType.REG, "", bIsGraveyard);
                                                                else if (bWholeDayLeave)
                                                                    RegLeaveAbsAddToList(GetHourStrFromMins(iEndTime), GetHourStrFromMins(iStartTimeNxt), iEndTime, iStartTimeNxt, iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min, iShiftMin, bIsGraveyard);
                                                                else
                                                                    AddToRegLeaveAbs(GetHourStrFromMins(iEndTime), GetHourStrFromMins(iStartTimeNxt), iEndTime, iStartTimeNxt, RegLeaveAbsType.ABS, "N2", bIsGraveyard);
                                                            }
                                                        }
                                                    }

                                                    if (iEndTime < iShiftTimeOut2Min && x == orgCount - 1)
                                                    {
                                                        if (bWholeDayLogs)
                                                            AddToRegLeaveAbs(listRegLeaveAbs[x].strEndTime, strMasterShiftTimeOut2, iEndTime, iShiftTimeOut2Min, RegLeaveAbsType.REG, "", bIsGraveyard);
                                                        else if (bWholeDayLeave)
                                                            RegLeaveAbsAddToList(listRegLeaveAbs[x].strEndTime, strMasterShiftTimeOut2, iEndTime, iShiftTimeOut2Min, iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min, iShiftMin, bIsGraveyard);
                                                        else
                                                            AddToRegLeaveAbs(listRegLeaveAbs[x].strEndTime, strMasterShiftTimeOut2, iEndTime, iShiftTimeOut2Min, RegLeaveAbsType.ABS, "N2", bIsGraveyard);

                                                    }

                                                    #endregion

                                                    #region Trim Last Punch to Shift Out 2
                                                    if (listRegLeaveAbs[x].strRegLeaveAbsIndicator.Equals("LR") && iEndTime > iShiftTimeOut2Min && strType == "REG")
                                                    {
                                                        AddToRegLeaveAbs(strMasterShiftTimeOut2, listRegLeaveAbs[x].strEndTime, iShiftTimeOut2Min, iEndTime, RegLeaveAbsType.OVT, "PO", bIsGraveyard);

                                                        listRegLeaveAbs[x].strEndTime       = strMasterShiftTimeOut2;
                                                        listRegLeaveAbs[x].iConvEndMin      = Math.Min(iEndTime, iShiftTimeOut2Min);
                                                        listRegLeaveAbs[x].iActualEndMin    = Math.Min(iEndTime, iShiftTimeOut2Min);
                                                    }
                                                    #endregion

                                                    #region Update OB to REG
                                                    if (listRegLeaveAbs[x].bPaidLeave && !listRegLeaveAbs[x].bWithCredit)
                                                    {
                                                        listRegLeaveAbs[x].strRegLeaveAbsType   = RegLeaveAbsType.REG;
                                                        listRegLeaveAbs[x].strRemarks           = "LV"; //OB
                                                    }
                                                    #endregion

                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                    listRegLeaveAbs.AddRange(listOvt); //GET OTHER OT
                                    #endregion

                                    #region Paid Break Pass
                                    //Sort
                                    listRegLeaveAbs.Sort((x, y) => x.iConvBeginMin.CompareTo(y.iConvBeginMin));
                                    if (iMasterPaidBreak > 0)
                                    {
                                        int orgCount = listRegLeaveAbs.Count;
                                        if (orgCount > 0)
                                        {
                                            bool bInsertedPaidBreak = false;

                                            #region First Pass
                                            for (int x = 0; x < orgCount; x++)
                                            {
                                                iStartTime  = 0;
                                                iEndTime    = 0;
                                                iStartTime  = listRegLeaveAbs[x].iConvBeginMin;
                                                iEndTime    = listRegLeaveAbs[x].iConvEndMin;
                                                iRowNxt     = x+1;

                                                #region Trim to Break Start and Break End
                                                if (x < orgCount-1 && !bInsertedPaidBreak)
                                                {
                                                    iStartTimeNxt       = 0;
                                                    iEndTimeNxt         = 0;
                                                    iStartTimeNxt       = listRegLeaveAbs[iRowNxt].iConvBeginMin;
                                                    iEndTimeNxt         = listRegLeaveAbs[iRowNxt].iConvEndMin;

                                                    iTempMultPockVar = 0;
                                                    iTempMultPockVar = GetOTHoursInMinutes(iEndTime, iStartTimeNxt, iShiftTimeOut1Min, iShiftTimeIn2Min);
                                                    if (iTempMultPockVar > 0 || (iEndTime != iStartTimeNxt && iStartTimeNxt == iSecondHalfConvTimeInExtMin))
                                                    {
                                                        listRegLeaveAbs[x].iConvEndMin = (iEndTime > iShiftTimeOut1Min ? iShiftTimeOut1Min : iEndTime);
                                                        listRegLeaveAbs[iRowNxt].iConvBeginMin = (iStartTimeNxt < iShiftTimeIn2Min ? iShiftTimeIn2Min : iStartTimeNxt);
                                                        if (iEndTime > iShiftTimeOut1Min)
                                                            listRegLeaveAbs[x].strEndTime = strMasterShiftTimeOut1;
                                                        if (iStartTimeNxt < iShiftTimeIn2Min)
                                                            listRegLeaveAbs[iRowNxt].strBeginTime = strMasterShiftTimeIn2;
                                                        listRegLeaveAbs[x].bStatus = true;

                                                        if (!listRegLeaveAbs.Exists(xx => xx.strRemarks == "MO"))
                                                        {
                                                            iPaidBreak = 0;
                                                            iPaidBreak = GetOTHoursInMinutes(iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut1Min, iShiftTimeIn2Min);
                                                            if (iPaidBreak > iMasterPaidBreak) //Must not exceed the set paid break
                                                            {
                                                                iPaidBreak = iMasterPaidBreak;
                                                            }
                                                            else
                                                            {
                                                                #region Insert Computed Time to Hour Fraction Table
                                                                if (!bIsRestDay && !bIsHoliday)
                                                                    InsertRegularTimeToHourFractionTable(iShiftTimeOut1Min, iShiftTimeOut1Min + iPaidBreak);
                                                                //else
                                                                //InsertOTToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeInExtMin, iConvTimeOutExtMin, iOTFraction, bCountOTFraction);
                                                                #endregion
                                                            }

                                                            if ((listRegLeaveAbs[x].strRegLeaveAbsType != listRegLeaveAbs[iRowNxt].strRegLeaveAbsType))
                                                            {
                                                                //Leave or Absent
                                                                AddToRegLeaveAbs(strMasterShiftTimeOut1, strMasterShiftTimeIn2, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut1Min, iShiftTimeIn2Min, listRegLeaveAbs[x].strLeaveType, listRegLeaveAbs[x].bPaidLeave, listRegLeaveAbs[x].bWithCredit, listRegLeaveAbs[x].strDayUnit, ((listRegLeaveAbs[x].strRegLeaveAbsType == RegLeaveAbsType.REG || listRegLeaveAbs[x].strRegLeaveAbsType == RegLeaveAbsType.OVT || listRegLeaveAbs[x].strRegLeaveAbsType == RegLeaveAbsType.LVE) ? listRegLeaveAbs[iRowNxt].strRegLeaveAbsType : listRegLeaveAbs[x].strRegLeaveAbsType), ((listRegLeaveAbs[x].strRegLeaveAbsType == RegLeaveAbsType.REG || listRegLeaveAbs[x].strRegLeaveAbsType == RegLeaveAbsType.OVT || listRegLeaveAbs[x].strRegLeaveAbsType == RegLeaveAbsType.LVE) ? "PB" : "BR"), listRegLeaveAbs[x].bStatus, bIsGraveyard); //BREAK         
                                                                bInsertedPaidBreak = true;
                                                                iPaidBreak = 0;
                                                            }
                                                            else
                                                            {
                                                                AddToRegLeaveAbs(strMasterShiftTimeOut1, strMasterShiftTimeIn2, iShiftTimeOut1Min, iShiftTimeIn2Min, iPaidBreak, listRegLeaveAbs[x].strRegLeaveAbsType, "PB", bIsGraveyard); //PAID BREAK
                                                                bInsertedPaidBreak = true;
                                                            }
                                                        }
                                                    }
                                                }
                                                #endregion

                                                #region Break on One Record or Last Record
                                                if ((x == 0 || (orgCount > 1 && x == orgCount-1)) && !bInsertedPaidBreak)
                                                {
                                                    iTempMultPockVar = 0;
                                                    iTempMultPockVar = GetOTHoursInMinutes(iStartTime, iEndTime, iShiftTimeOut1Min, iShiftTimeIn2Min);
                                                    if (iTempMultPockVar > 0)
                                                    {
                                                        AddToRegLeaveAbs(strMasterShiftTimeOut1, strMasterShiftTimeIn2, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut1Min, iShiftTimeIn2Min, listRegLeaveAbs[x].strLeaveType, listRegLeaveAbs[x].bPaidLeave, listRegLeaveAbs[x].bWithCredit, listRegLeaveAbs[x].strDayUnit, listRegLeaveAbs[x].strRegLeaveAbsType, ((listRegLeaveAbs[x].strRegLeaveAbsType == RegLeaveAbsType.REG || listRegLeaveAbs[x].strRegLeaveAbsType == RegLeaveAbsType.OVT) ? "PB" : "BR"), listRegLeaveAbs[x].bStatus, bIsGraveyard); //PAID BREAK 
                                                        if (iEndTime > iShiftTimeIn2Min)
                                                            AddToRegLeaveAbs(strMasterShiftTimeIn2, listRegLeaveAbs[x].strEndTime, iShiftTimeIn2Min, listRegLeaveAbs[x].iConvEndMin, iShiftTimeIn2Min, listRegLeaveAbs[x].iActualEndMin, listRegLeaveAbs[x].strLeaveType, listRegLeaveAbs[x].bPaidLeave, listRegLeaveAbs[x].bWithCredit, listRegLeaveAbs[x].strDayUnit, listRegLeaveAbs[x].strRegLeaveAbsType, listRegLeaveAbs[x].strRemarks, listRegLeaveAbs[x].bStatus, bIsGraveyard);

                                                        listRegLeaveAbs[x].iConvEndMin = (iEndTime > iShiftTimeOut1Min ? iShiftTimeOut1Min : iEndTime);
                                                        listRegLeaveAbs[x].iActualEndMin = (iEndTime > iShiftTimeOut1Min ? iShiftTimeOut1Min : iEndTime);
                                                        if (iEndTime > iShiftTimeOut1Min)
                                                            listRegLeaveAbs[x].strEndTime = strMasterShiftTimeOut1;

                                                        if (x > 0 && iStartTime > listRegLeaveAbs[x].iConvEndMin && listRegLeaveAbs[x-1].iConvBeginMin < iShiftTimeOut1Min)
                                                        {
                                                            if (listRegLeaveAbs[x-1].iConvEndMin > iShiftTimeOut1Min)
                                                                listRegLeaveAbs[x-1].strEndTime = strMasterShiftTimeOut1;
                                                            listRegLeaveAbs[x-1].iConvEndMin = (listRegLeaveAbs[x-1].iConvEndMin > iShiftTimeOut1Min ? iShiftTimeOut1Min : listRegLeaveAbs[x-1].iConvEndMin);
                                                            listRegLeaveAbs[x-1].iActualEndMin = (listRegLeaveAbs[x-1].iActualEndMin > iShiftTimeOut1Min ? iShiftTimeOut1Min : listRegLeaveAbs[x-1].iActualEndMin);
                                                            
                                                            listRegLeaveAbs.RemoveAt(x);
                                                        }

                                                        if (listRegLeaveAbs[x].iConvBeginMin == listRegLeaveAbs[x].iConvEndMin)
                                                            listRegLeaveAbs.RemoveAt(x);

                                                        bInsertedPaidBreak = true;
                                                    }
                                                    
                                                }
                                                #endregion
                                            }
                                            #endregion

                                            #region Second Pass 
                                            if (!bInsertedPaidBreak)
                                            {
                                                //Sort
                                                listRegLeaveAbs.Sort((x, y) => x.iConvBeginMin.CompareTo(y.iConvBeginMin));
                                                for (int x = 0; x < orgCount; x++)
                                                {
                                                    iStartTime      = 0;
                                                    iEndTime        = 0;
                                                    iStartTime      = listRegLeaveAbs[x].iConvBeginMin;
                                                    iEndTime        = listRegLeaveAbs[x].iConvEndMin;
                                                    iRowNxt         = x+1;
                                                    iTempMultPockVar = 0;
                                                    iTempMultPockVar = GetOTHoursInMinutes(iStartTime, iEndTime, iShiftTimeOut1Min, iShiftTimeIn2Min);

                                                    if ((x+1) < listRegLeaveAbs.Count)
                                                    {
                                                        iStartTimeNxt       = 0;
                                                        iEndTimeNxt         = 0;
                                                        iStartTimeNxt       = listRegLeaveAbs[iRowNxt].iConvBeginMin;
                                                        iEndTimeNxt         = listRegLeaveAbs[iRowNxt].iConvEndMin;
                                                        iTempMultPockVar2   = 0;
                                                        iTempMultPockVar2   = GetOTHoursInMinutes(iStartTimeNxt, iEndTimeNxt, iShiftTimeOut1Min, iShiftTimeIn2Min);

                                                        if (iTempMultPockVar != 0 && iTempMultPockVar2 != 0 
                                                                && iTempMultPockVar2 > iTempMultPockVar)
                                                        {
                                                            listRegLeaveAbs[x].iConvEndMin = (iEndTime > iShiftTimeOut1Min ? iShiftTimeOut1Min : iEndTime);
                                                            listRegLeaveAbs[x].iActualEndMin = (iEndTime > iShiftTimeOut1Min ? iShiftTimeOut1Min : iEndTime);
                                                            if (iEndTime > iShiftTimeOut1Min)
                                                                listRegLeaveAbs[x].strEndTime = strMasterShiftTimeOut1;

                                                            AddToRegLeaveAbs(strMasterShiftTimeOut1, strMasterShiftTimeIn2, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut1Min, iShiftTimeIn2Min, listRegLeaveAbs[iRowNxt].strLeaveType, listRegLeaveAbs[iRowNxt].bPaidLeave, listRegLeaveAbs[iRowNxt].bWithCredit, listRegLeaveAbs[iRowNxt].strDayUnit, listRegLeaveAbs[iRowNxt].strRegLeaveAbsType, ((listRegLeaveAbs[iRowNxt].strRegLeaveAbsType == RegLeaveAbsType.REG || listRegLeaveAbs[iRowNxt].strRegLeaveAbsType == RegLeaveAbsType.OVT) ? "PB" : "BR"), listRegLeaveAbs[iRowNxt].bStatus, bIsGraveyard); //PAID BREAK 

                                                            listRegLeaveAbs[iRowNxt].iConvBeginMin      = (iStartTimeNxt < iShiftTimeIn2Min ? iShiftTimeIn2Min : iStartTimeNxt);
                                                            listRegLeaveAbs[iRowNxt].iActualStartMin = (iStartTimeNxt < iShiftTimeIn2Min ? iShiftTimeIn2Min : iStartTimeNxt);
                                                            if (iStartTimeNxt < iShiftTimeIn2Min)
                                                                listRegLeaveAbs[iRowNxt].strBeginTime = strMasterShiftTimeIn2;

                                                            if (listRegLeaveAbs[iRowNxt].iConvBeginMin == listRegLeaveAbs[iRowNxt].iConvEndMin)
                                                                listRegLeaveAbs.RemoveAt(iRowNxt);

                                                            bInsertedPaidBreak = true;
                                                            break;
                                                        }
                                                    }
                                                    
                                                    if (iTempMultPockVar > 0 )
                                                    {
                                                        AddToRegLeaveAbs(strMasterShiftTimeOut1, strMasterShiftTimeIn2, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut1Min, iShiftTimeIn2Min, listRegLeaveAbs[x].strLeaveType, listRegLeaveAbs[x].bPaidLeave, listRegLeaveAbs[x].bWithCredit, listRegLeaveAbs[x].strDayUnit, listRegLeaveAbs[x].strRegLeaveAbsType, ((listRegLeaveAbs[x].strRegLeaveAbsType == RegLeaveAbsType.REG || listRegLeaveAbs[x].strRegLeaveAbsType == RegLeaveAbsType.OVT) ? "PB" : "BR"), listRegLeaveAbs[x].bStatus, bIsGraveyard); //PAID BREAK 
                                                        if (iEndTime > iShiftTimeIn2Min)
                                                            AddToRegLeaveAbs(strMasterShiftTimeIn2, listRegLeaveAbs[x].strEndTime, iShiftTimeIn2Min, listRegLeaveAbs[x].iConvEndMin, iShiftTimeIn2Min, listRegLeaveAbs[x].iActualEndMin, listRegLeaveAbs[x].strLeaveType, listRegLeaveAbs[x].bPaidLeave, listRegLeaveAbs[x].bWithCredit, listRegLeaveAbs[x].strDayUnit, listRegLeaveAbs[x].strRegLeaveAbsType, listRegLeaveAbs[x].strRemarks, listRegLeaveAbs[x].bStatus, bIsGraveyard);

                                                        listRegLeaveAbs[x].iConvEndMin = (iEndTime > iShiftTimeOut1Min ? iShiftTimeOut1Min : iEndTime);
                                                        listRegLeaveAbs[x].iActualEndMin = (iEndTime > iShiftTimeOut1Min ? iShiftTimeOut1Min : iEndTime);
                                                        if (iEndTime > iShiftTimeOut1Min)
                                                            listRegLeaveAbs[x].strEndTime = strMasterShiftTimeOut1;

                                                        bInsertedPaidBreak = true;
                                                        break;
                                                    }
                                                }
                                            }
                                            //Sort
                                            listRegLeaveAbs.Sort((x, y) => x.iConvBeginMin.CompareTo(y.iConvBeginMin));
                                            var idxBr = listRegLeaveAbs.FindIndex(s => s.iConvBeginMin == iShiftTimeOut1Min && s.iConvEndMin == iShiftTimeIn2Min && s.strRegLeaveAbsType != RegLeaveAbsType.OVT);
                                            if (idxBr != -1 && ((idxBr-1) > -1 && (idxBr+1) < listRegLeaveAbs.Count))
                                            {
                                                if (listRegLeaveAbs[idxBr-1].strRegLeaveAbsType != listRegLeaveAbs[idxBr+1].strRegLeaveAbsType)
                                                {
                                                    if (!Convert.ToBoolean(CNTPDBRK)) //Company does not pay paid break if employee went out before start of break and comes in late after end of break.
                                                    {
                                                        if (listRegLeaveAbs[idxBr-1].strRegLeaveAbsType == RegLeaveAbsType.ABS && (listRegLeaveAbs[idxBr+1].strRegLeaveAbsType == RegLeaveAbsType.LVE && listRegLeaveAbs[idxBr+1].bPaidLeave))
                                                        {
                                                            //bypass afternoon leave
                                                        }
                                                        else if ((listRegLeaveAbs[idxBr-1].strRegLeaveAbsType == RegLeaveAbsType.LVE && !listRegLeaveAbs[idxBr-1].bPaidLeave)
                                                                || (listRegLeaveAbs[idxBr+1].strRegLeaveAbsType == RegLeaveAbsType.LVE && !listRegLeaveAbs[idxBr+1].bPaidLeave))
                                                        {
                                                            listRegLeaveAbs[idxBr].strRegLeaveAbsType   = RegLeaveAbsType.ABS;
                                                            listRegLeaveAbs[idxBr].strRemarks           = "BR";
                                                        }
                                                        else if ((listRegLeaveAbs[idxBr-1].strRegLeaveAbsType == RegLeaveAbsType.ABS || listRegLeaveAbs[idxBr+1].strRegLeaveAbsType == RegLeaveAbsType.ABS)
                                                                && listRegLeaveAbs[idxBr].strRegLeaveAbsType != RegLeaveAbsType.ABS)
                                                        {
                                                            listRegLeaveAbs[idxBr].strRegLeaveAbsType   = RegLeaveAbsType.ABS;
                                                            listRegLeaveAbs[idxBr].strRemarks           = "BR";
                                                            listRegLeaveAbs[idxBr].bPaidLeave           = false;
                                                            listRegLeaveAbs[idxBr].bWithCredit          = false;
                                                            listRegLeaveAbs[idxBr].strDayUnit           = "";
                                                            listRegLeaveAbs[idxBr].strLeaveType         = "";
                                                        }
                                                    }
                                                    else if (Convert.ToBoolean(CNTPDBRK)) //Company pays paid break even if employee went out before start of break and comes in late after end of break.
                                                    {
                                                        if (((listRegLeaveAbs[idxBr-1].strRegLeaveAbsType == RegLeaveAbsType.ABS && listRegLeaveAbs[idxBr+1].strRegLeaveAbsType == RegLeaveAbsType.REG)
                                                                || (listRegLeaveAbs[idxBr-1].strRegLeaveAbsType == RegLeaveAbsType.REG && listRegLeaveAbs[idxBr+1].strRegLeaveAbsType == RegLeaveAbsType.ABS)
                                                             )
                                                             && listRegLeaveAbs[idxBr].strRegLeaveAbsType == RegLeaveAbsType.ABS)
                                                        {
                                                            listRegLeaveAbs[idxBr].strRegLeaveAbsType   = RegLeaveAbsType.REG;
                                                            listRegLeaveAbs[idxBr].strRemarks           = "PB"; //PAID BREAK
                                                        }
                                                        else if (listRegLeaveAbs[idxBr-1].strRegLeaveAbsType == RegLeaveAbsType.ABS && (listRegLeaveAbs[idxBr+1].strRegLeaveAbsType == RegLeaveAbsType.LVE && listRegLeaveAbs[idxBr+1].bPaidLeave)
                                                            && listRegLeaveAbs[idxBr].strRegLeaveAbsType == RegLeaveAbsType.ABS)
                                                        {
                                                            listRegLeaveAbs[idxBr].strRegLeaveAbsType   = RegLeaveAbsType.LVE;
                                                            listRegLeaveAbs[idxBr].strRemarks           = "BR";
                                                            listRegLeaveAbs[idxBr].bPaidLeave           = listRegLeaveAbs[idxBr+1].bPaidLeave;
                                                            listRegLeaveAbs[idxBr].bWithCredit          = listRegLeaveAbs[idxBr+1].bWithCredit;
                                                            listRegLeaveAbs[idxBr].strDayUnit           = listRegLeaveAbs[idxBr+1].strDayUnit;
                                                            listRegLeaveAbs[idxBr].strLeaveType         = listRegLeaveAbs[idxBr+1].strLeaveType;
                                                        }
                                                    }
                                                }
                                                else if (Convert.ToBoolean(CNTPDBRK) && listRegLeaveAbs[idxBr-1].strRegLeaveAbsType == RegLeaveAbsType.ABS && listRegLeaveAbs[idxBr+1].strRegLeaveAbsType == RegLeaveAbsType.ABS
                                                         && listRegLeaveAbs.Exists(x => x.strRegLeaveAbsType == RegLeaveAbsType.REG))
                                                {
                                                    listRegLeaveAbs[idxBr].strRegLeaveAbsType           = RegLeaveAbsType.REG;
                                                    listRegLeaveAbs[idxBr].strRemarks                   = "PB"; //PAID BREAK
                                                }
                                            }
                                            #endregion
                                        }
                                    }
                                    #endregion

                                    //Sort
                                    listRegLeaveAbs.Sort((x, y) => x.iConvBeginMin.CompareTo(y.iConvBeginMin));
                                    if (listRegLeaveAbs.Count > 0)
                                    {
                                        #region Number of Hours Computation
                                        for (int idx = 0; idx < listRegLeaveAbs.Count; idx++)
                                        {
                                            
                                            iConvTimeInExtMin       = 0;
                                            iConvTimeOutExtMin      = 0;
                                            iConvTimeInExtMin       = listRegLeaveAbs[idx].iConvBeginMin;
                                            iConvTimeOutExtMin      = listRegLeaveAbs[idx].iConvEndMin;
                                            bIsOutsideShift         = false;
                                            iCompOTMin              = 0;
                                            strRemarks              = listRegLeaveAbs[idx].strRemarks;

                                            //Check if time logs are outside shift range
                                            if (iConvTimeInExtMin >= iMasterShiftTimeOut2Min || (iConvTimeOutExtMin > 0 && iConvTimeOutExtMin <= iMasterShiftTimeIn1Min))
                                            {
                                                bIsOutsideShift = true; //Enable flag used to check for logs outside shift ranges
                                            }

                                            if (listRegLeaveAbs[idx].strRegLeaveAbsType == RegLeaveAbsType.ABS)
                                            {
                                                #region Late and Undertime Computation
                                                iTempMultPockVar    = 0;
                                                iTempMultPockVar2   = 0;
                                                iTempMultPockVar    = GetOTHoursInMinutes(iConvTimeInExtMin, iConvTimeOutExtMin, iShiftTimeIn1Min, iShiftTimeOut1Min);
                                                iTempMultPockVar2   = GetOTHoursInMinutes(iConvTimeInExtMin, iConvTimeOutExtMin, iShiftTimeIn2Min, iShiftTimeOut2Min);

                                                if (strRemarks == "T1") //LATE 1
                                                    iComputedLateMin += iTempMultPockVar;
                                                else if (strRemarks == "N1" || strRemarks == "N2" || strRemarks == "WD") //UNDERTIME 1 || UNDERTIME 2
                                                {
                                                    if (iTempMultPockVar > 0)
                                                        iComputedUndertime1Min += iTempMultPockVar;

                                                    if (iTempMultPockVar2 > 0)
                                                        iComputedUndertime2Min += iTempMultPockVar2;
                                                }                                                    
                                                else if (strRemarks == "T2") //LATE 2
                                                {
                                                    if (iTempMultPockVar2 > 0)
                                                    {
                                                        iTempMultPockVar3 = 0;
                                                        iTempMultPockVar3 = iConvertLateToUndertimeAccordingToLeaveType(drArrLeaveAppUnpaid, iConvTimeInExtMin, iConvTimeOutExtMin
                                                                                                                                        , iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min
                                                                                                                                        , bIsGraveyard);
                                                        if (LT2UT2LEAVETYPE.Rows.Count > 0 && iTempMultPockVar3 > 0)
                                                        {
                                                            if (iTempMultPockVar2 > iTempMultPockVar3)
                                                            {
                                                                iComputedUndertime2Min += iTempMultPockVar3;
                                                                iComputedLate2Min += (iTempMultPockVar2 - iTempMultPockVar3);
                                                            }
                                                            else
                                                                iComputedUndertime2Min += iTempMultPockVar2;

                                                            listRegLeaveAbs[idx].strRemarks = "N5"; //LATE 2 CONVERT TO UNDERTIME 2
                                                        }
                                                        else
                                                            iComputedLate2Min += iTempMultPockVar2;
                                                    }
                                                }
                                                else if (strRemarks == "BR") //ABSENT ON PAID BREAK
                                                {
                                                    iTempMultPockVar3       = 0;
                                                    iTempMultPockVar3       = GetOTHoursInMinutes(iConvTimeInExtMin, iConvTimeOutExtMin, iShiftTimeOut1Min, iShiftTimeIn2Min);
                                                    if (iTempMultPockVar3 > 0)
                                                    {
                                                        iComputedUndertime2Min  += iTempMultPockVar3;
                                                        iTempMultPockVar2       += iTempMultPockVar3;
                                                    }
                                                    
                                                }

                                                listRegLeaveAbs[idx].iConvMin = iTempMultPockVar + iTempMultPockVar2;

                                                #endregion
                                            }
                                            else if(listRegLeaveAbs[idx].strRegLeaveAbsType == RegLeaveAbsType.REG || listRegLeaveAbs[idx].strRegLeaveAbsType == RegLeaveAbsType.OVT)
                                            {
                                                #region Computed Regular Minutes
                                                //COMPUTED REGULAR MINUTES
                                                iTempMultPockVar = 0;
                                                iTempMultPockVar = GetOTHoursInMinutes(iConvTimeInExtMin, iConvTimeOutExtMin, iShiftTimeIn1Min, iShiftTimeOut1Min);
                                                iTempMultPockVar += GetOTHoursInMinutes(iConvTimeInExtMin, iConvTimeOutExtMin, iShiftTimeIn2Min, iShiftTimeOut2Min);

                                                if (strRemarks == "PB" && listRegLeaveAbs[idx].strRegLeaveAbsType == RegLeaveAbsType.REG) //PAID BREAK
                                                {
                                                    iTempMultPockVar2 = 0;
                                                    iTempMultPockVar2 = GetOTHoursInMinutes(iConvTimeInExtMin, iConvTimeOutExtMin, iShiftTimeOut1Min, iShiftTimeIn2Min);
                                                    if (iTempMultPockVar2 > 0)
                                                    {
                                                        iPaidBreakOnReg = iTempMultPockVar2;
                                                        iTempMultPockVar += iTempMultPockVar2;
                                                    }
                                                }

                                                if (iTempMultPockVar > 0 && listRegLeaveAbs[idx].strRegLeaveAbsType == RegLeaveAbsType.REG)
                                                {
                                                    if (strRemarks == "LV") //OB
                                                        iLeaveMinToBeAddedToReg += iTempMultPockVar;
                                                    else
                                                    {
                                                        iComputedRegularMin += iTempMultPockVar;
                                                        #region Insert Computed Time to Hour Fraction Table
                                                        if (!bIsRestDay && !bIsHoliday)
                                                        {
                                                            InsertRegularTimeToHourFractionTable(Math.Max(iConvTimeInExtMin, iShiftTimeIn1Min), Math.Min(iConvTimeOutExtMin, iShiftTimeOut1Min));
                                                            InsertRegularTimeToHourFractionTable(Math.Max(iConvTimeInExtMin, iShiftTimeIn2Min), Math.Min(iConvTimeOutExtMin, iShiftTimeOut2Min));
                                                        }
                                                        #endregion
                                                    }
                                                    listRegLeaveAbs[idx].iConvMin = iTempMultPockVar;
                                                }
                                                #endregion

                                                #region Overtime and Night Premium Computation

                                                #region Overtime Applications Loop
                                                dtEmpTimeRegister.Rows[i]["Ttr_WFOTAdvHr"] = 0;
                                                dtEmpTimeRegister.Rows[i]["Ttr_WFOTPostHr"] = 0;
                                                foreach (DataRow drOTApp in drArrOTApproved)
                                                {
                                                    iOTStartMin = GetMinsFromHourStr(drOTApp["Tot_StartTime"].ToString());
                                                    iOTEndMin = GetMinsFromHourStr(drOTApp["Tot_EndTime"].ToString());
                                                    strOTType = drOTApp["Tot_OvertimeType"].ToString();

                                                    #region OT Application Validation
                                                    if (strOTType.Equals("A") && iOTEndMin > iShiftTimeIn1Min)
                                                    {
                                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Wrong advance overtime application", "AE");
                                                        continue; //skip erroneous OT application
                                                    }

                                                    bCountOTFraction = false;
                                                    if (Convert.ToBoolean(OTRNDFRAC) == true
                                                        && (Convert.ToInt32(iShiftTimeOut1Min / iOTFraction) * iOTFraction == iShiftTimeOut1Min
                                                            || Convert.ToInt32(iShiftTimeIn2Min / iOTFraction) * iOTFraction == iShiftTimeIn2Min))
                                                        bCountOTFraction = true;

                                                    if (bIsGraveyard && strOTType.Equals("P")) //Graveyard shift and Post-overtime
                                                    {
                                                        if (iOTStartMin < (iShiftTimeIn1Min - LOGPAD))
                                                        {
                                                            iOTStartMin += GRAVEYARD24;
                                                        }
                                                        if (iOTEndMin < (iShiftTimeOut2Min - LOGPAD))
                                                        {
                                                            iOTEndMin += GRAVEYARD24;
                                                        }
                                                    }

                                                    //Encoded Overtime Hours and Minutes
                                                    if (iOTEndMin - iOTStartMin > 0)
                                                        iEncodedOvertimeMin += (iOTEndMin - iOTStartMin);

                                                    //Rounding of OT in favor of Employee
                                                    if (Convert.ToBoolean(OTROUNDING) == true)
                                                    {
                                                        iConvTimeInExtMin = CleanUpByRoundLow(iConvTimeInExtMin, iOTFraction, dal);
                                                        iConvTimeOutExtMin = CleanUpByRoundHigh(iConvTimeOutExtMin, iOTFraction, dal);
                                                    }

                                                    //Update Encoded Advance and Post Overtime Hour if Flex Shift
                                                    if (Convert.ToBoolean(FLEXSHIFT) == true)
                                                    {
                                                        if (strOTType.Equals("A"))
                                                        {
                                                            dtEmpTimeRegister.Rows[i]["Ttr_WFOTAdvHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_WFOTAdvHr"]) + ((iOTEndMin - iOTStartMin) / 60.0);
                                                            if (iOTEndMin - iOTStartMin > 0)
                                                                iEncodedOvertimeMin += (iOTEndMin - iOTStartMin);
                                                        }
                                                        if (strOTType.Equals("P"))
                                                        {
                                                            dtEmpTimeRegister.Rows[i]["Ttr_WFOTPostHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_WFOTPostHr"]) + ((iOTEndMin - iOTStartMin) / 60.0);
                                                            if (iOTEndMin - iOTStartMin > 0)
                                                                iEncodedOvertimeMin += (iOTEndMin - iOTStartMin);
                                                        }
                                                    }
                                                    #endregion

                                                    if (NDBRCKTCNT == 2)
                                                    {
                                                        #region Computed Regular Night Premium (Sharp)~
                                                        iTimeMinTemp = (iConvTimeInExtMin > iShiftTimeIn1Min) ? iConvTimeInExtMin : iShiftTimeIn1Min;
                                                        iTimeMinTemp2 = (iConvTimeOutExtMin < iShiftTimeOut2Min) ? iConvTimeOutExtMin : iShiftTimeOut2Min;

                                                        #region ND Bracket 1
                                                        iTimeMinTemp3 = 0;
                                                        iTimeMinTemp4 = 0;

                                                        if (bIsGraveyard) //Graveyard shift
                                                        {
                                                            iTimeMinTemp3 = NP1_BEGTIME;
                                                            iTimeMinTemp4 = NP1_ENDTIME;
                                                        }
                                                        else
                                                        {
                                                            if (NP1_ENDTIME < NP1_BEGTIME
                                                                || NP1_BEGTIME > GRAVEYARD24
                                                                || NP1_ENDTIME > GRAVEYARD24)
                                                            {
                                                                if (NP1_BEGTIME > GRAVEYARD24)
                                                                    iTimeMinTemp3 = NP1_BEGTIME - GRAVEYARD24;
                                                                else
                                                                    iTimeMinTemp3 = NP1_BEGTIME;

                                                                if (NP1_ENDTIME > GRAVEYARD24)
                                                                    iTimeMinTemp4 = NP1_ENDTIME - GRAVEYARD24;
                                                                else
                                                                    iTimeMinTemp4 = NP1_ENDTIME;

                                                                if (iTimeMinTemp4 < iTimeMinTemp3)
                                                                    iTimeMinTemp3 = 0;
                                                            }
                                                        }

                                                        //[NDOTHr = Get NDOT between 22:00 to iConvTimeInExtMin]
                                                        iTimeMinTemp = (iTimeMinTemp3 > iTimeMinTemp) ? iTimeMinTemp3 : iTimeMinTemp;
                                                        iTempMultPockVar = (iConvTimeInExtMin > iShiftTimeIn1Min) ? iConvTimeInExtMin : iShiftTimeIn1Min;
                                                        iCompRegNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTimeMinTemp, iTempMultPockVar);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTimeMinTemp, iTempMultPockVar, NDFRACTION, HourType.NDHour);
                                                        #endregion
                                                        #region Insert into Calculation Result
                                                        NightDiffAddToList(iOTStartMin, iOTEndMin, iTimeMinTemp, iTempMultPockVar, NDFRACTION, strRemarks, bIsGraveyard);
                                                        #endregion

                                                        //[NDOTHr = Get NDOT between iConvTimeOutExtMin to 30:00]
                                                        iTimeMinTemp2 = (iTimeMinTemp2 < iTimeMinTemp4) ? iTimeMinTemp2 : iTimeMinTemp4;
                                                        iTempMultPockVar = (iConvTimeOutExtMin < iShiftTimeOut2Min) ? iConvTimeOutExtMin : iShiftTimeOut2Min;
                                                        iCompRegNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTempMultPockVar, iTimeMinTemp2);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTempMultPockVar, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                        #endregion
                                                        #region Insert into Calculation Result
                                                        NightDiffAddToList(iOTStartMin, iOTEndMin, iTempMultPockVar, iTimeMinTemp2, NDFRACTION, strRemarks, bIsGraveyard);
                                                        #endregion

                                                        #endregion

                                                        #region ND Bracket 2
                                                        iTimeMinTemp3 = 0;
                                                        iTimeMinTemp4 = 0;
                                                        if (bIsGraveyard) //Graveyard shift
                                                        {
                                                            iTimeMinTemp3 = NP2_BEGTIME;
                                                            iTimeMinTemp4 = NP2_ENDTIME;
                                                        }
                                                        else
                                                        {
                                                            if (NP2_ENDTIME < NP2_BEGTIME
                                                                || NP2_BEGTIME > GRAVEYARD24
                                                                || NP2_ENDTIME > GRAVEYARD24)
                                                            {
                                                                if (NP2_BEGTIME > GRAVEYARD24)
                                                                    iTimeMinTemp3 = NP2_BEGTIME - GRAVEYARD24;
                                                                else
                                                                    iTimeMinTemp3 = NP2_BEGTIME;

                                                                if (NP2_ENDTIME > GRAVEYARD24)
                                                                    iTimeMinTemp4 = NP2_ENDTIME - GRAVEYARD24;
                                                                else
                                                                    iTimeMinTemp4 = NP2_ENDTIME;

                                                                if (iTimeMinTemp4 < iTimeMinTemp3)
                                                                    iTimeMinTemp3 = 0;
                                                            }
                                                        }
                                                        //[NDOTHr = Get NDOT between 22:00 to iConvTimeInExtMin]
                                                        iTimeMinTemp = (iTimeMinTemp3 > iTimeMinTemp) ? iTimeMinTemp3 : iTimeMinTemp;
                                                        iTempMultPockVar = (iConvTimeInExtMin > iShiftTimeIn1Min) ? iConvTimeInExtMin : iShiftTimeIn1Min;
                                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTimeMinTemp, iTempMultPockVar);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTimeMinTemp, iTempMultPockVar, NDFRACTION, HourType.NDOTHour);
                                                        #endregion
                                                        #region Insert into Calculation Result
                                                        NightDiffAddToList(iOTStartMin, iOTEndMin, iTimeMinTemp, iTempMultPockVar, NDFRACTION, strRemarks, bIsGraveyard);
                                                        #endregion

                                                        //[NDOTHr = Get NDOT between iConvTimeOutExtMin to 30:00]
                                                        iTimeMinTemp2 = (iTimeMinTemp2 < iTimeMinTemp4) ? iTimeMinTemp2 : iTimeMinTemp4;
                                                        iTempMultPockVar = (iConvTimeOutExtMin < iShiftTimeOut2Min) ? iConvTimeOutExtMin : iShiftTimeOut2Min;
                                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTempMultPockVar, iTimeMinTemp2);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTempMultPockVar, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                                        #endregion
                                                        #region Insert into Calculation Result
                                                        NightDiffAddToList(iOTStartMin, iOTEndMin, iTempMultPockVar, iTimeMinTemp2, NDFRACTION, strRemarks, bIsGraveyard);
                                                        #endregion
                                                        #endregion

                                                        #endregion
                                                    }
                                                    else
                                                    {
                                                        if (bIsRestDay || bIsHoliday || !bIsRegOrReg5DayCode) //Rest day or holiday
                                                        {
                                                            #region Computed Overtime Minutes
                                                            //[In-between OT = Get OT between iConvTimeInExtMin and iConvTimeOutExtMin]
                                                            iAdvOTMin = GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iConvTimeInExtMin, Math.Min(iConvTimeOutExtMin, iShiftTimeOut1Min));
                                                            if (bCountOTFraction == true)
                                                            {
                                                                iAdvOTMin = Convert.ToInt32(iAdvOTMin / iOTFraction) * iOTFraction;
                                                            }
                                                            if (strOTType.Equals("A"))
                                                            {
                                                                iAdjShiftMin += iAdvOTMin;
                                                            }
                                                            iCompOTMin += iAdvOTMin;
                                                            iComputedOvertimeMin += iAdvOTMin;
                                                            #region Insert Overtime to Hour Fraction Table
                                                            InsertOTToHourFractionTable(iOTStartMin, iOTEndMin, iConvTimeInExtMin, Math.Min(iConvTimeOutExtMin, iShiftTimeOut1Min), iOTFraction, bCountOTFraction);
                                                            #endregion

                                                            if (bIsOutsideShift && iComputedOvertimeMin > 0)
                                                            {
                                                                bIsOutsideShiftComputedOT = true;

                                                                if (iConvTimeInExtMin >= iMasterShiftTimeOut2Min || (iConvTimeOutExtMin > 0 && iConvTimeOutExtMin <= iMasterShiftTimeIn1Min))
                                                                    bIsOutsideShiftComputedOT = false; //by pass if after shift OT is outside shift
                                                            }

                                                            //[In-between OT = Get OT between iConvTimeInExtMin and iConvTimeOutExtMin]
                                                            iAdvOTMin = GetOTHoursInMinutes(iOTStartMin, iOTEndMin, Math.Max(iConvTimeInExtMin, iShiftTimeIn2Min), iConvTimeOutExtMin);
                                                            if (bCountOTFraction == true)
                                                            {
                                                                iAdvOTMin = Convert.ToInt32(iAdvOTMin / iOTFraction) * iOTFraction;
                                                            }
                                                            if (strOTType.Equals("A"))
                                                            {
                                                                iAdjShiftMin += iAdvOTMin;
                                                            }

                                                            if (!bIsOutsideShift || !bIsOutsideShiftComputedOT)
                                                            {
                                                                iCompOTMin += iAdvOTMin;
                                                                iComputedOvertimeMin += iAdvOTMin;
                                                                #region Insert Overtime to Hour Fraction Table
                                                                InsertOTToHourFractionTable(iOTStartMin, iOTEndMin, Math.Max(iConvTimeInExtMin, iShiftTimeIn2Min), iConvTimeOutExtMin, iOTFraction, bCountOTFraction);
                                                                #endregion
                                                            }

                                                            if (bCountOTFraction == false)
                                                            {
                                                                if (iOTRoundBreak > 0)
                                                                {
                                                                    iCompOTMin = Convert.ToInt32(iCompOTMin / iOTRoundBreak) * iOTRoundBreak;
                                                                    iComputedOvertimeMin = Convert.ToInt32(iComputedOvertimeMin / iOTRoundBreak) * iOTRoundBreak;
                                                                }
                                                                else
                                                                {
                                                                    iCompOTMin = Convert.ToInt32(iCompOTMin / iOTFraction) * iOTFraction;
                                                                    iComputedOvertimeMin = Convert.ToInt32(iComputedOvertimeMin / iOTFraction) * iOTFraction;
                                                                }
                                                                CorrectOTHourFraction(iComputedOvertimeMin);
                                                            }

                                                            #region Paid Break for Rest day
                                                            if (iConvTimeInExtMin > 0 && iConvTimeOutExtMin > 0 && strRemarks == "PB") //PAID BREAK
                                                            {
                                                                iOTTemp = (iShiftTimeOut1Min > iOTStartMin) ? iShiftTimeOut1Min : iOTStartMin;
                                                                iOTTemp2 = (iShiftTimeIn2Min < iOTEndMin) ? iShiftTimeIn2Min : iOTEndMin;
                                                                iPaidBreak += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iConvTimeInExtMin, iConvTimeOutExtMin);

                                                                if (iPaidBreak > iMasterPaidBreak) //Must not exceed the set paid break
                                                                {
                                                                    iPaidBreak = iMasterPaidBreak;
                                                                }
                                                                else
                                                                {
                                                                    if (MIDOT == false)
                                                                    {
                                                                        #region Insert Paid Break to Hour Fraction Table
                                                                        InsertOTToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeInExtMin, iConvTimeOutExtMin, iOTFraction, bCountOTFraction);
                                                                        #endregion
                                                                    }
                                                                }
                                                            }

                                                            if (MIDOT == true && strOTType.Equals("M"))
                                                            {
                                                                iPaidBreak = 0;
                                                            }
                                                            #endregion

                                                            #endregion

                                                            #region Computed Regular Night Premium for Rest Day/Holiday

                                                            if (iMasterPaidBreak == 0)
                                                            {
                                                                if (iConvTimeInExtMin >= iShiftTimeOut1Min && iConvTimeInExtMin <= iShiftTimeIn2Min)
                                                                    iTimeMinTemp = iShiftTimeIn2Min;
                                                                else
                                                                {
                                                                    if (iConvTimeInExtMin >= iShiftTimeIn2Min)
                                                                        iTimeMinTemp = (iConvTimeInExtMin > iShiftTimeIn1Min) ? (iConvTimeInExtMin <= iShiftTimeIn2Min) ? iShiftTimeIn2Min : iConvTimeInExtMin : iShiftTimeIn2Min;
                                                                    else
                                                                        iTimeMinTemp = (iConvTimeInExtMin > iShiftTimeIn1Min) ? (iConvTimeInExtMin <= iShiftTimeIn2Min) ? iConvTimeInExtMin : iShiftTimeIn2Min : iShiftTimeIn1Min;
                                                                }
                                                                iTimeMinTemp2 = (iConvTimeOutExtMin < iShiftTimeOut2Min) ? (iConvTimeOutExtMin <= iShiftTimeOut1Min) ? iConvTimeOutExtMin : iShiftTimeOut1Min : iShiftTimeOut2Min;
                                                            }
                                                            else
                                                            {
                                                                iTimeMinTemp = (iConvTimeInExtMin > iShiftTimeIn1Min) ? iConvTimeInExtMin : iShiftTimeIn1Min;
                                                                iTimeMinTemp2 = (iConvTimeOutExtMin < iShiftTimeOut2Min) ? iConvTimeOutExtMin : iShiftTimeOut2Min;
                                                            }

                                                            if (iTimeMinTemp > 0 && iTimeMinTemp2 > 0)
                                                            {
                                                                if (bNDCount && strScheduleType == "D") //Day Shift
                                                                {
                                                                    //[NDHr = Get ND between 24:00 to 06:00]
                                                                    iTempMultPockVar = 0;
                                                                    iTempMultPockVar2 = 0;
                                                                    iTempMultPockVar = (iTimeMinTemp < NIGHTDIFFAMSTART) ? NIGHTDIFFAMSTART : iTimeMinTemp;
                                                                    iTempMultPockVar2 = (iTimeMinTemp2 > NIGHTDIFFAMEND) ? NIGHTDIFFAMEND : iTimeMinTemp2;
                                                                    iCompRegNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2);


                                                                    #region Insert ND Hour to Hour Fraction Table
                                                                    InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2, NDFRACTION, HourType.NDHour);
                                                                    #endregion
                                                                    #region Insert into Calculation Result
                                                                    NightDiffAddToList(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2, NDFRACTION, strRemarks, bIsGraveyard);
                                                                    #endregion

                                                                    //Break between shifts
                                                                    if (Convert.ToBoolean(NDCNTBREAK)) //NDCNTBREAK for regular days
                                                                    {
                                                                        iPaidBreak += GetOTHoursInMinutes(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2);
                                                                        if (iPaidBreak > iMasterPaidBreak) //Must not exceed the set paid break
                                                                        {
                                                                            iPaidBreak = iMasterPaidBreak;
                                                                        }
                                                                        else
                                                                        {
                                                                            iCompRegNightPremMin += iPaidBreak;
                                                                            #region Insert ND Hour to Hour Fraction Table
                                                                            InsertNDToHourFractionTable(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                                            #endregion
                                                                            #region Insert into Calculation Result
                                                                            NightDiffAddToList(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, strRemarks, bIsGraveyard);
                                                                            #endregion
                                                                        }
                                                                    }
                                                                }
                                                                else if (bIsGraveyard || (bNDCount && strScheduleType == "S")) //Graveyard shift OR Swing Shift
                                                                {
                                                                    //[NDHr = Get ND between iConvTimeInExtMin/iShiftTimeIn1Min to iConvTimeOutExtMin/iShiftTimeOut2Min]
                                                                    iTempMultPockVar = 0;
                                                                    iTempMultPockVar2 = 0;
                                                                    iTempMultPockVar = (iTimeMinTemp < NIGHTDIFFGRAVEYARDSTART) ? NIGHTDIFFGRAVEYARDSTART : iTimeMinTemp;
                                                                    iTempMultPockVar2 = (iTimeMinTemp2 > NIGHTDIFFGRAVEYARDEND) ? NIGHTDIFFGRAVEYARDEND : iTimeMinTemp2;
                                                                    iCompRegNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2);

                                                                    #region Insert ND Hour to Hour Fraction Table
                                                                    InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2, NDFRACTION, HourType.NDHour);
                                                                    #endregion
                                                                    #region Insert into Calculation Result
                                                                    NightDiffAddToList(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2, NDFRACTION, strRemarks, bIsGraveyard);
                                                                    #endregion

                                                                    //Break between shifts
                                                                    if (Convert.ToBoolean(NDCNTBREAK) && strRemarks == "PB") //NDCNTBREAK for regular days
                                                                    {
                                                                        iPaidBreak += GetOTHoursInMinutes(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2);
                                                                        if (iPaidBreak > iMasterPaidBreak) //Must not exceed the set paid break
                                                                        {
                                                                            iPaidBreak = iMasterPaidBreak;
                                                                        }
                                                                        else
                                                                        {
                                                                            iCompRegNightPremMin += iPaidBreak;
                                                                            #region Insert ND Hour to Hour Fraction Table
                                                                            InsertNDToHourFractionTable(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                                            #endregion
                                                                            #region Insert into Calculation Result
                                                                            NightDiffAddToList(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, strRemarks, bIsGraveyard);
                                                                            #endregion
                                                                        }

                                                                    }
                                                                }
                                                            }
                                                            #endregion
                                                        }
                                                        else //Regular day
                                                        {
                                                            #region Computed Overtime Minutes
                                                            //[Adv OT]
                                                            if (strOTType.Equals("A")) //Advance OT Type
                                                            {
                                                                iOTTemp = 0;
                                                                iOTTemp2 = 0;
                                                                iOTTemp = (iConvTimeInExtMin > iShiftTimeIn1Min) ? iShiftTimeIn1Min : iConvTimeInExtMin;
                                                                iOTTemp2 = (iConvTimeOutExtMin > iShiftTimeIn1Min) ? iShiftTimeIn1Min : iConvTimeOutExtMin;
                                                                if (iOTTemp != iOTTemp2)
                                                                {
                                                                    iAdvOTMin = GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iOTTemp, iOTTemp2);
                                                                    if (bCountOTFraction == true)
                                                                    {
                                                                        iAdvOTMin = Convert.ToInt32(iAdvOTMin / iOTFraction) * iOTFraction;
                                                                    }
                                                                    iAdjShiftMin += iAdvOTMin;
                                                                    iCompOTMin += iAdvOTMin;
                                                                    iComputedOvertimeMin += iAdvOTMin;
                                                                    #region Insert Overtime to Hour Fraction Table
                                                                    InsertOTToHourFractionTable(iOTStartMin, iOTEndMin, iOTTemp, iOTTemp2, iOTFraction, bCountOTFraction);
                                                                    #endregion
                                                                }
                                                            }

                                                            //[Mid OT = Get OT between Shift Break Start and Shift Break End]
                                                            if (MIDOT == true && strOTType.Equals("M"))
                                                            {
                                                                iOTTemp = 0;
                                                                iOTTemp2 = 0;
                                                                iOTTemp = (iConvTimeInExtMin > iShiftTimeOut1Min) ? iConvTimeInExtMin : iShiftTimeOut1Min;
                                                                iOTTemp2 = (iConvTimeOutExtMin < iShiftTimeIn2Min) ? iConvTimeOutExtMin : iShiftTimeIn2Min;

                                                                iAdvOTMin = GetOTHoursInMinutes(iOTTemp, iOTTemp2, iOTStartMin, iOTEndMin);
                                                                if (bCountOTFraction == true)
                                                                {
                                                                    iAdvOTMin = Convert.ToInt32(iAdvOTMin / iOTFraction) * iOTFraction;
                                                                }
                                                                iCompOTMin += iAdvOTMin;
                                                                iComputedOvertimeMin += iAdvOTMin;
                                                                #region Insert Overtime to Hour Fraction Table
                                                                InsertOTToHourFractionTable(iOTStartMin, iOTEndMin, iOTTemp, iOTTemp2, iOTFraction, bCountOTFraction);
                                                                #endregion
                                                                iPaidBreak = 0;
                                                            }

                                                            //[Post OT = Get OT beyond iShiftTimeOut2Min]
                                                            iOTTemp = 0;
                                                            iOTTemp2 = 0;
                                                            iOTTemp = (iConvTimeInExtMin < iShiftTimeOut2Min) ? iShiftTimeOut2Min : iConvTimeInExtMin;
                                                            iOTTemp2 = (iConvTimeOutExtMin < iShiftTimeOut2Min) ? iShiftTimeOut2Min : iConvTimeOutExtMin;
                                                            if (iOTTemp != iOTTemp2)
                                                            {
                                                                iAdvOTMin = GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iOTTemp, iOTTemp2);
                                                                if (bCountOTFraction == true)
                                                                {
                                                                    iAdvOTMin = Convert.ToInt32(iAdvOTMin / iOTFraction) * iOTFraction;
                                                                }
                                                                iCompOTMin += iAdvOTMin;
                                                                iComputedOvertimeMin += iAdvOTMin;
                                                                #region Insert Overtime to Hour Fraction Table
                                                                InsertOTToHourFractionTable(iOTStartMin, iOTEndMin, iOTTemp, iOTTemp2, iOTFraction, bCountOTFraction);
                                                                #endregion
                                                            }


                                                            if (bCountOTFraction == false)
                                                            {
                                                                iCompOTMin = Convert.ToInt32(iCompOTMin / iOTFraction) * iOTFraction;
                                                                iComputedOvertimeMin = Convert.ToInt32(iComputedOvertimeMin / iOTFraction) * iOTFraction;
                                                                CorrectOTHourFraction(iComputedOvertimeMin);
                                                            }
                                                            #endregion
                                                        }

                                                        #region Computed Overtime Night Premium 

                                                        if (Convert.ToBoolean(NDOTAM) == true && !bIsGraveyard) // Day Shift or Swing Shift
                                                        {
                                                            //[NDOTHr = Get NDOT between 00:00 to iConvTimeInExtMin]
                                                            iTimeMinTemp = 0;
                                                            iTimeMinTemp2 = 0;
                                                            iTempMultPockVar = 0;
                                                            iTempMultPockVar2 = 0;
                                                            iTimeMinTemp = (iConvTimeInExtMin > iShiftTimeIn1Min) ? iShiftTimeIn1Min : iConvTimeInExtMin;
                                                            iTimeMinTemp2 = (iConvTimeOutExtMin > iShiftTimeIn1Min) ? iShiftTimeIn1Min : iConvTimeOutExtMin;
                                                            iTempMultPockVar = (iTimeMinTemp < NIGHTDIFFAMSTART) ? NIGHTDIFFAMSTART : iTimeMinTemp;
                                                            iTempMultPockVar2 = (iTimeMinTemp2 > NIGHTDIFFAMEND) ? NIGHTDIFFAMEND : iTimeMinTemp2;
                                                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2, NDFRACTION, HourType.NDOTHour);
                                                            #endregion
                                                            #region Insert into Calculation Result
                                                            NightDiffAddToList(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2, NDFRACTION, strRemarks, bIsGraveyard);
                                                            #endregion

                                                            //[NDOTHr = Get NDOT between iConvTimeOutExtMin to 30:00]
                                                            iTimeMinTemp = 0;
                                                            iTimeMinTemp2 = 0;
                                                            iTempMultPockVar = 0;
                                                            iTempMultPockVar2 = 0;
                                                            iTimeMinTemp = (iConvTimeInExtMin < iShiftTimeOut2Min) ? iShiftTimeOut2Min : iConvTimeInExtMin;
                                                            iTimeMinTemp2 = (iConvTimeOutExtMin < iShiftTimeOut2Min) ? iShiftTimeOut2Min : iConvTimeOutExtMin;
                                                            iTempMultPockVar = (iTimeMinTemp < NIGHTDIFFAMSTART) ? NIGHTDIFFAMSTART : iTimeMinTemp;
                                                            iTempMultPockVar2 = (iTimeMinTemp2 > NIGHTDIFFAMEND) ? NIGHTDIFFAMEND : iTimeMinTemp2;
                                                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2, NDFRACTION, HourType.NDOTHour);
                                                            #endregion
                                                            #region Insert into Calculation Result
                                                            NightDiffAddToList(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2, NDFRACTION, strRemarks, bIsGraveyard);
                                                            #endregion
                                                        }
                                                        //[NDOTHr = Get NDOT between 22:00 to iConvTimeInExtMin]
                                                        iTimeMinTemp = 0;
                                                        iTimeMinTemp2 = 0;
                                                        iTempMultPockVar = 0;
                                                        iTempMultPockVar2 = 0;
                                                        iTimeMinTemp = (iConvTimeInExtMin > iShiftTimeIn1Min) ? iShiftTimeIn1Min : iConvTimeInExtMin;
                                                        iTimeMinTemp2 = (iConvTimeOutExtMin > iShiftTimeIn1Min) ? iShiftTimeIn1Min : iConvTimeOutExtMin;
                                                        iTempMultPockVar = (iTimeMinTemp < NIGHTDIFFGRAVEYARDSTART) ? NIGHTDIFFGRAVEYARDSTART : iTimeMinTemp;
                                                        iTempMultPockVar2 = (iTimeMinTemp2 > NIGHTDIFFGRAVEYARDEND) ? NIGHTDIFFGRAVEYARDEND : iTimeMinTemp2;
                                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2, NDFRACTION, HourType.NDOTHour);
                                                        #endregion
                                                        #region Insert into Calculation Result
                                                        NightDiffAddToList(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2, NDFRACTION, strRemarks, bIsGraveyard);
                                                        #endregion

                                                        //[NDOTHr = Get NDOT between iConvTimeOutExtMin to 30:00]
                                                        iTimeMinTemp = 0;
                                                        iTimeMinTemp2 = 0;
                                                        iTempMultPockVar = 0;
                                                        iTempMultPockVar2 = 0;
                                                        iTimeMinTemp = (iConvTimeInExtMin < iShiftTimeOut2Min) ? iShiftTimeOut2Min : iConvTimeInExtMin;
                                                        iTimeMinTemp2 = (iConvTimeOutExtMin < iShiftTimeOut2Min) ? iShiftTimeOut2Min : iConvTimeOutExtMin;
                                                        iTempMultPockVar = (iTimeMinTemp < NIGHTDIFFGRAVEYARDSTART) ? NIGHTDIFFGRAVEYARDSTART : iTimeMinTemp;
                                                        iTempMultPockVar2 = (iTimeMinTemp2 > NIGHTDIFFGRAVEYARDEND) ? NIGHTDIFFGRAVEYARDEND : iTimeMinTemp2;
                                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2, NDFRACTION, HourType.NDOTHour);
                                                        #endregion
                                                        #region Insert into Calculation Result
                                                        NightDiffAddToList(iOTStartMin, iOTEndMin, iTempMultPockVar, iTempMultPockVar2, NDFRACTION, strRemarks, bIsGraveyard);
                                                        #endregion


                                                        #endregion
                                                    }

                                                    if (strOTType.Equals("A"))
                                                        dtEmpTimeRegister.Rows[i]["Ttr_WFOTAdvHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_WFOTAdvHr"]) + Convert.ToDouble(drOTApp["Tot_OvertimeHours"]);
                                                    else
                                                        dtEmpTimeRegister.Rows[i]["Ttr_WFOTPostHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_WFOTPostHr"]) + Convert.ToDouble(drOTApp["Tot_OvertimeHours"]);
                                                }

                                                if (iCompOTMin > 0 && listRegLeaveAbs[idx].strRegLeaveAbsType == RegLeaveAbsType.OVT)
                                                    listRegLeaveAbs[idx].iConvMin = listRegLeaveAbs[idx].iConvMin + iCompOTMin;

                                                #endregion

                                                #region Night Premium Computation
                                                if (NDBRCKTCNT == 2)
                                                {
                                                    #region Computed Regular Night Premium for Regular Day (Sharp)
                                                    if (!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode //Regular Day
                                                        && (dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"] == DBNull.Value //Assumed Postback flag is NULL or not equal to T
                                                            || dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString().Equals("T") == false))
                                                    {
                                                        //COMPUTED REGULAR NIGHT PREMIUM MIN
                                                        iTimeMinTemp = (iConvTimeInExtMin > iShiftTimeIn1Min) ? iConvTimeInExtMin : iShiftTimeIn1Min;
                                                        iTimeMinTemp2 = (iConvTimeOutExtMin < iShiftTimeOut2Min) ? iConvTimeOutExtMin : iShiftTimeOut2Min;
                                                        if (iTimeMinTemp > 0 && iTimeMinTemp2 > 0)
                                                        {
                                                            #region ND Bracket 1
                                                            iCompRegNightPremMin += GetOTHoursInMinutes(NP1_BEGTIME, NP1_ENDTIME, iTimeMinTemp, iTimeMinTemp2);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(NP1_BEGTIME, NP1_ENDTIME, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                            #endregion
                                                            #region Insert into Calculation Result
                                                            NightDiffAddToList(NP1_BEGTIME, NP1_ENDTIME, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, strRemarks, bIsGraveyard);
                                                            #endregion
                                                            //Break between shifts
                                                            if (Convert.ToBoolean(NDCNTBREAK)) //NDCNTBREAK for regular days
                                                            {
                                                                iPaidBreak += GetOTHoursInMinutes(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2);
                                                                if (iPaidBreak > iMasterPaidBreak) //Must not exceed the set paid break
                                                                {
                                                                    iPaidBreak = iMasterPaidBreak;
                                                                }
                                                                else
                                                                {
                                                                    iCompRegNightPremMin += iPaidBreak;
                                                                    #region Insert ND Hour to Hour Fraction Table
                                                                    InsertNDToHourFractionTable(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                                    #endregion
                                                                    #region Insert into Calculation Result
                                                                    NightDiffAddToList(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, strRemarks, bIsGraveyard);
                                                                    #endregion
                                                                }

                                                            }
                                                            #endregion

                                                            #region ND Bracket 1 (Early ND)
                                                            if (NP1_ENDTIME < NP1_BEGTIME
                                                                || NP1_BEGTIME > GRAVEYARD24
                                                                || NP1_ENDTIME > GRAVEYARD24)
                                                            {
                                                                if (NP1_BEGTIME > GRAVEYARD24)
                                                                    iTimeMinTemp3 = NP1_BEGTIME - GRAVEYARD24;
                                                                else
                                                                    iTimeMinTemp3 = NP1_BEGTIME;

                                                                if (NP1_ENDTIME > GRAVEYARD24)
                                                                    iTimeMinTemp4 = NP1_ENDTIME - GRAVEYARD24;
                                                                else
                                                                    iTimeMinTemp4 = NP1_ENDTIME;

                                                                if (iTimeMinTemp4 < iTimeMinTemp3)
                                                                    iTimeMinTemp3 = 0;

                                                                iCompRegNightPremMin += GetOTHoursInMinutes(iTimeMinTemp3, iTimeMinTemp4, iTimeMinTemp, iTimeMinTemp2);
                                                                #region Insert ND Hour to Hour Fraction Table
                                                                InsertNDToHourFractionTable(iTimeMinTemp3, iTimeMinTemp4, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                                #endregion
                                                                #region Insert into Calculation Result
                                                                NightDiffAddToList(iTimeMinTemp3, iTimeMinTemp4, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, strRemarks, bIsGraveyard);
                                                                #endregion
                                                            }
                                                            #endregion

                                                            #region ND Bracket 2
                                                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(NP2_BEGTIME, NP2_ENDTIME, iTimeMinTemp, iTimeMinTemp2);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(NP2_BEGTIME, NP2_ENDTIME, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                                            #endregion
                                                            #region Insert into Calculation Result
                                                            NightDiffAddToList(NP2_BEGTIME, NP2_ENDTIME, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, strRemarks, bIsGraveyard);
                                                            #endregion

                                                            //Break between shifts
                                                            if (Convert.ToBoolean(NDCNTBREAK) && strRemarks == "PB") //NDCNTBREAK for regular days
                                                            {
                                                                iPaidBreak += GetOTHoursInMinutes(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2);
                                                                if (iPaidBreak > iMasterPaidBreak) //Must not exceed the set paid break
                                                                {
                                                                    iPaidBreak = iMasterPaidBreak;
                                                                }
                                                                else
                                                                {
                                                                    iCompOvertimeNightPremMin += iPaidBreak;
                                                                    #region Insert ND Hour to Hour Fraction Table
                                                                    InsertNDToHourFractionTable(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                                                    #endregion
                                                                    #region Insert into Calculation Result
                                                                    NightDiffAddToList(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, strRemarks, bIsGraveyard);
                                                                    #endregion
                                                                }

                                                            }
                                                            #endregion

                                                            #region ND Bracket 2 (Early ND)
                                                            if (NP2_ENDTIME < NP2_BEGTIME
                                                                || NP2_BEGTIME > GRAVEYARD24
                                                                || NP2_ENDTIME > GRAVEYARD24)
                                                            {
                                                                if (NP2_BEGTIME > GRAVEYARD24)
                                                                    iTimeMinTemp3 = NP2_BEGTIME - GRAVEYARD24;
                                                                else
                                                                    iTimeMinTemp3 = NP2_BEGTIME;

                                                                if (NP2_ENDTIME > GRAVEYARD24)
                                                                    iTimeMinTemp4 = NP2_ENDTIME - GRAVEYARD24;
                                                                else
                                                                    iTimeMinTemp4 = NP2_ENDTIME;

                                                                if (iTimeMinTemp4 < iTimeMinTemp3)
                                                                    iTimeMinTemp3 = 0;

                                                                iCompOvertimeNightPremMin += GetOTHoursInMinutes(iTimeMinTemp3, iTimeMinTemp4, iTimeMinTemp, iTimeMinTemp2);
                                                                #region Insert ND Hour to Hour Fraction Table
                                                                InsertNDToHourFractionTable(iTimeMinTemp3, iTimeMinTemp4, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                                                #endregion
                                                                #region Insert into Calculation Result
                                                                NightDiffAddToList(iTimeMinTemp3, iTimeMinTemp4, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, strRemarks, bIsGraveyard);
                                                                #endregion
                                                            }
                                                            #endregion
                                                        }
                                                    }
                                                    #endregion

                                                    #region NDFraction Filter (Sharp)
                                                    iCompRegNightPremMin = Convert.ToInt32((iCompRegNightPremMin / iNDFraction)) * iNDFraction;
                                                    iCompOvertimeNightPremMin = Convert.ToInt32((iCompOvertimeNightPremMin / iNDFraction)) * iNDFraction;
                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region Computed Regular Night Premium for Regular Day (Normal)
                                                    if (!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode //Regular day
                                                        && (bNDCount || bIsGraveyard == true) //NDAM flag is true / NDPM flag is true / graveyard shift
                                                        && (dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"] == DBNull.Value //Assumed Postback flag is NULL or not equal to T
                                                                || dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString().Equals("T") == false))
                                                    {

                                                        if (iMasterPaidBreak == 0)
                                                        {
                                                            if (iConvTimeInExtMin >= iShiftTimeOut1Min && iConvTimeInExtMin <= iShiftTimeIn2Min)
                                                                iTimeMinTemp = iShiftTimeIn2Min;
                                                            else
                                                            {
                                                                if (iConvTimeInExtMin >= iShiftTimeIn2Min)
                                                                    iTimeMinTemp = (iConvTimeInExtMin > iShiftTimeIn1Min) ? (iConvTimeInExtMin <= iShiftTimeIn2Min) ? iShiftTimeIn2Min: iConvTimeInExtMin : iShiftTimeIn2Min;
                                                                else
                                                                    iTimeMinTemp = (iConvTimeInExtMin > iShiftTimeIn1Min) ? (iConvTimeInExtMin <= iShiftTimeIn2Min) ? iConvTimeInExtMin : iShiftTimeIn2Min : iShiftTimeIn1Min;
                                                            }
                                                            iTimeMinTemp2 = (iConvTimeOutExtMin < iShiftTimeOut2Min) ? (iConvTimeOutExtMin <= iShiftTimeOut1Min) ? iConvTimeOutExtMin : iShiftTimeOut1Min : iShiftTimeOut2Min;
                                                        }
                                                        else
                                                        {
                                                            iTimeMinTemp = (iConvTimeInExtMin > iShiftTimeIn1Min) ? iConvTimeInExtMin : iShiftTimeIn1Min;
                                                            iTimeMinTemp2 = (iConvTimeOutExtMin < iShiftTimeOut2Min) ? iConvTimeOutExtMin : iShiftTimeOut2Min;
                                                        }

                                                        if (iTimeMinTemp > 0 && iTimeMinTemp2 > 0) 
                                                        {
                                                            if (bNDCount && strScheduleType == "D") //Day Shift
                                                            {
                                                                //[NDHr = Get ND between 24:00 to 06:00]
                                                                iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iTimeMinTemp, iTimeMinTemp2);
                                                                #region Insert ND Hour to Hour Fraction Table
                                                                InsertNDToHourFractionTable(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                                #endregion  
                                                                #region Insert into Calculation Result
                                                                NightDiffAddToList(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, strRemarks, bIsGraveyard);
                                                                #endregion                                                              

                                                                //Break between shifts
                                                                if (Convert.ToBoolean(NDCNTBREAK)) //NDCNTBREAK for regular days
                                                                {
                                                                    iPaidBreak += GetOTHoursInMinutes(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2);
                                                                    if (iPaidBreak > iMasterPaidBreak) //Must not exceed the set paid break
                                                                    {
                                                                        iPaidBreak = iMasterPaidBreak;
                                                                    }
                                                                    else
                                                                    {
                                                                        iCompRegNightPremMin += iPaidBreak;
                                                                        #region Insert ND Hour to Hour Fraction Table
                                                                        InsertNDToHourFractionTable(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                                        #endregion
                                                                        #region Insert into Calculation Result
                                                                        NightDiffAddToList(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, strRemarks, bIsGraveyard);
                                                                        #endregion
                                                                    }
                                                                }
                                                            }
                                                            else if (bIsGraveyard || (bNDCount && strScheduleType == "S")) //Graveyard shift OR Swing Shift
                                                            {
                                                                //[NDHr = Get ND between iConvTimeInExtMin/iShiftTimeIn1Min to iConvTimeOutExtMin/iShiftTimeOut2Min]
                                                                iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iTimeMinTemp, iTimeMinTemp2);
                                                                #region Insert ND Hour to Hour Fraction Table
                                                                InsertNDToHourFractionTable(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                                #endregion
                                                                #region Insert into Calculation Result
                                                                NightDiffAddToList(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, strRemarks, bIsGraveyard);
                                                                #endregion

                                                                //Break between shifts
                                                                if (Convert.ToBoolean(NDCNTBREAK) && strRemarks == "PB") //NDCNTBREAK for regular days
                                                                {
                                                                    iPaidBreak += GetOTHoursInMinutes(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2);
                                                                    if (iPaidBreak > iMasterPaidBreak) //Must not exceed the set paid break
                                                                    {
                                                                        iPaidBreak = iMasterPaidBreak;
                                                                    }
                                                                    else
                                                                    {
                                                                        iCompRegNightPremMin += iPaidBreak;
                                                                        #region Insert ND Hour to Hour Fraction Table
                                                                        InsertNDToHourFractionTable(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                                        #endregion
                                                                        #region Insert into Calculation Result
                                                                        NightDiffAddToList(iShiftTimeOut1Min, iShiftTimeIn2Min, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, strRemarks, bIsGraveyard);
                                                                        #endregion
                                                                    }

                                                                }
                                                            }                                                            
                                                        }
                                                    }
                                                    #endregion

                                                    #region NDFraction Filter (Normal)
                                                    iCompRegNightPremMin = Convert.ToInt32((iCompRegNightPremMin / iNDFraction)) * iNDFraction;
                                                    iCompOvertimeNightPremMin = Convert.ToInt32((iCompOvertimeNightPremMin / iNDFraction)) * iNDFraction;
  
                                                    #endregion
                                                }
                                                #endregion

                                                #endregion
                                            }
                                            else if (listRegLeaveAbs[idx].strRegLeaveAbsType == RegLeaveAbsType.LVE)
                                            {
                                                #region Leave Computation
                                                iTempMultPockVar = 0;
                                                iTempMultPockVar += GetOTHoursInMinutes(iConvTimeInExtMin, iConvTimeOutExtMin, iShiftTimeIn1Min, iShiftTimeOut1Min);
                                                iTempMultPockVar += GetOTHoursInMinutes(iConvTimeInExtMin, iConvTimeOutExtMin, iShiftTimeIn2Min, iShiftTimeOut2Min);

                                                if (listRegLeaveAbs[idx].bPaidLeave)
                                                {
                                                    if (listRegLeaveAbs[idx].bWithCredit)
                                                        iPayLeaveMin += iTempMultPockVar;
                                                    else
                                                        iLeaveMinToBeAddedToReg += iTempMultPockVar; //OB
                                                }
                                                else
                                                {
                                                    if (iTempMultPockVar > 0)
                                                        iNoPayLeaveMin += iTempMultPockVar;
                                                }

                                                if (strRemarks == "BR") //LEAVE ON PAID BREAK
                                                {
                                                    iTempMultPockVar2 = 0;
                                                    iTempMultPockVar2 = GetOTHoursInMinutes(iConvTimeInExtMin, iConvTimeOutExtMin, iShiftTimeOut1Min, iShiftTimeIn2Min);
                                                    if (iTempMultPockVar2 > 0)
                                                    {
                                                        iTempMultPockVar += iTempMultPockVar2;

                                                        if (listRegLeaveAbs[idx].bPaidLeave)
                                                        {
                                                            if (listRegLeaveAbs[idx].bWithCredit)
                                                                iPayLeaveMin += iTempMultPockVar2;
                                                            else
                                                                iLeaveMinToBeAddedToReg += iTempMultPockVar2; //OB
                                                        }
                                                        else
                                                            iNoPayLeaveMin += iTempMultPockVar2;
                                                    }
                                                }

                                                listRegLeaveAbs[idx].iConvMin = iTempMultPockVar;
                                                #endregion
                                            }                                    
                                        }
                                        #endregion

                                        #region Save Calc Result
                                        //Sort
                                        listRegLeaveAbs.Sort((x, y) => x.iConvBeginMin.CompareTo(y.iConvBeginMin));
                                        if (drArrEmpTimeRegisterMisc.Length > 0)
                                            drArrEmpTimeRegisterMisc[0]["Ttm_Result"] = FormatRegLeaveAbsResult();
                                        #endregion

                                        #region Waived Late and Undertime
                                        if (!strAmnesty.Equals("N"))
                                        {
                                            switch(strAmnesty)
                                            {
                                                case "L1":
                                                    iComputedRegularMin += iComputedLateMin;
                                                    iComputedLateMin = 0;
                                                    break;
                                                case "L2":
                                                    iComputedRegularMin += iComputedLate2Min;
                                                    iComputedLate2Min = 0;
                                                    break;
                                                case "U1":
                                                    iComputedRegularMin += iComputedUndertime1Min;
                                                    iComputedUndertime1Min = 0;
                                                    break;
                                                case "U2":
                                                    iComputedRegularMin += iComputedUndertime2Min;
                                                    iComputedUndertime2Min = 0;
                                                    break;
                                                case "B0": //B1 B2
                                                    iComputedRegularMin += iComputedLateMin + iComputedLate2Min + iComputedUndertime1Min + iComputedUndertime2Min;
                                                    iComputedLateMin = 0;
                                                    iComputedLate2Min = 0;
                                                    iComputedUndertime1Min = 0;
                                                    iComputedUndertime2Min = 0;
                                                    break;
                                                case "B1": //LT1 LT2
                                                    iComputedRegularMin += iComputedLateMin + iComputedLate2Min;
                                                    iComputedLateMin = 0;
                                                    iComputedLate2Min = 0;
                                                    break;
                                                case "B2": //UT1 UT2
                                                    iComputedRegularMin += iComputedUndertime1Min + iComputedUndertime2Min;
                                                    iComputedUndertime1Min = 0;
                                                    iComputedUndertime2Min = 0;
                                                    break;
                                                case "B3": //LT1 UT1
                                                    iComputedRegularMin += iComputedLateMin + iComputedUndertime1Min;
                                                    iComputedLateMin = 0;
                                                    iComputedUndertime1Min = 0;
                                                    break;
                                                case "B4": //LT1 UT2
                                                    iComputedRegularMin += iComputedLateMin + iComputedUndertime2Min;
                                                    iComputedLateMin = 0;
                                                    iComputedUndertime2Min = 0;
                                                    break;
                                                case "B5": //LT2 UT2
                                                    iComputedRegularMin += iComputedLate2Min + iComputedUndertime2Min;
                                                    iComputedLate2Min = 0;
                                                    iComputedUndertime2Min = 0;
                                                    break;
                                                case "B6": //UT1 LT2
                                                    iComputedRegularMin += iComputedUndertime1Min + iComputedLate2Min;
                                                    iComputedUndertime1Min = 0;
                                                    iComputedLate2Min = 0;
                                                    break;
                                            }
                                        }
                                        #endregion

                                        #region Computed Late, Undertime, Absent and Leave Minutes
                                        if ((!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode) || bDailiesNoWorkNoPay)
                                        {

                                            #region Whole Day Absent
                                            if (iComputedRegularMin == 0 && iPayLeaveMin == 0 && iNoPayLeaveMin == 0 && iLeaveMinToBeAddedToReg == 0)
                                            {
                                                //iInitialAbsentMin = Whole Day Absent
                                                iComputedLateMin        = 0;
                                                iComputedLate2Min       = 0;
                                                iComputedUndertime1Min  = 0;
                                                iComputedUndertime2Min  = 0;

                                                iActualLate1Mins        = 0;
                                                iActualLate2Mins        = 0;
                                                iActualUT1Mins          = 0;
                                                iActualUT2Mins          = 0;

                                                if (iNoPayLeaveMin == iShiftMin)
                                                    iInitialAbsentMin = 0;
                                                else
                                                    iInitialAbsentMin = iShiftMin;
                                                iComputedAbsentMin = iInitialAbsentMin;
                                            }
                                            //else
                                            //{
                                                ////Paid Break
                                                //if (iMasterPaidBreak > 0 && iPaidBreak == 0 && iLeaveMinOnPaidBreak == 0)
                                                //{
                                                //    if (iPayLeaveMin > 0 && iPayLeaveMin + iMasterPaidBreak == iShiftMin)
                                                //    {
                                                //        //Add to Regular Min
                                                //        iPaidBreak = iMasterPaidBreak;
                                                //        iComputedRegularMin += iPaidBreak;
                                                //        #region Insert Computed Time to Hour Fraction Table
                                                //        if (!bIsRestDay && !bIsHoliday)
                                                //            InsertRegularTimeToHourFractionTable(iShiftTimeIn1Min, iShiftTimeIn1Min + iPaidBreak);
                                                //        #endregion
                                                //    }
                                                //    else
                                                //    {
                                                //        //Add to Undertime Min
                                                //        iComputedUndertime2Min += iMasterPaidBreak;
                                                //    }
                                                //}
                                            //}

                                            #endregion

                                            #region Max Late and Undertime Minutes
                                            if (LATEMAXMIN > 0 && iComputedLateMin + iComputedLate2Min > LATEMAXMIN)
                                            {
                                                iInitialAbsentMin += iComputedLateMin + iComputedLate2Min;
                                                iComputedLateMin = 0;
                                                iComputedLate2Min = 0;
                                            }
                                            if (MAXUTMIN > 0 && iComputedUndertime1Min + iComputedUndertime2Min > MAXUTMIN)
                                            {
                                                iInitialAbsentMin += iComputedUndertime1Min + iComputedUndertime2Min;
                                                iComputedUndertime1Min = 0;
                                                iComputedUndertime2Min = 0;
                                            }
                                            #endregion

                                            #region Paid and Unpaid Leave
                                            //Add leave hours with no credit (e.g. OB)
                                            if (((!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode) || bDailiesNoWorkNoPay)
                                                && iLeaveMinToBeAddedToReg > 0)
                                            {
                                                if (iComputedRegularMin < iShiftMin && iComputedRegularMin + iLeaveMinToBeAddedToReg <= iShiftMin)
                                                {
                                                    iComputedRegularMin += iLeaveMinToBeAddedToReg;
                                                    //iComputedDayWorkMin += iLeaveMinToBeAddedToReg;
                                                    #region Insert Computed Time to Hour Fraction Table
                                                    InsertRegularTimeToHourFractionTable(iConvTimeIn1Min, iConvTimeIn1Min + iLeaveMinToBeAddedToReg);
                                                    #endregion
                                                }
                                                else if (iShiftMin - iComputedRegularMin < iLeaveMinToBeAddedToReg)
                                                {
                                                    iComputedRegularMin += (iShiftMin - iComputedRegularMin);
                                                    //iComputedDayWorkMin += (iShiftMin - iComputedRegularMin);
                                                    #region Insert Computed Time to Hour Fraction Table
                                                    InsertRegularTimeToHourFractionTable(iConvTimeIn1Min, iConvTimeIn1Min + iShiftMin - iComputedRegularMin);
                                                    #endregion
                                                }
                                            }

                                            if (iPayLeaveMin < 0)
                                            {
                                                AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Negative Paid Leave", "AE");
                                            }
                                            if (iNoPayLeaveMin < 0)
                                            {
                                                AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Negative Unpaid Leave", "AE");
                                            }
                                            if (iComputedRegularMin > iShiftMin)
                                            {
                                                AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Regular hours greater than Shift hours", "AE");
                                            }
                                            #endregion

                                            #region Compute Deduction Minutes
                                            //Computed Absent Min
                                            if (iComputedRegularMin > 0 && iShiftMin - iComputedRegularMin > 0)
                                            {
                                                iComputedAbsentMin = iShiftMin - iComputedRegularMin;
                                            }
                                            else if (iComputedRegularMin == 0)
                                            {
                                                iComputedAbsentMin = iShiftMin;

                                                //Zero-out Actual Late and Undertime because employee has no worked hours
                                                iActualLate1Mins    = 0;
                                                iActualLate2Mins    = 0;
                                                iActualUT1Mins      = 0;
                                                iActualUT2Mins      = 0;
                                            }
                                            else
                                            {
                                                iInitialAbsentMin   = 0;
                                                iComputedAbsentMin  = 0;
                                            }

                                            //Cleanup Paid Leave
                                            if (iPayLeaveMin > 0)
                                            {
                                                //Just in case the leave hours filed is greater than the shift hours
                                                if (iShiftMin - iPayLeaveMin < 0)
                                                    iPayLeaveMin = iShiftMin;

                                                if (iPayLeaveMin <= iComputedAbsentMin)
                                                {
                                                    iComputedAbsentMin -= iPayLeaveMin;
                                                    iComputedDayWorkMin += iPayLeaveMin;
                                                }
                                                else
                                                {
                                                    if (Convert.ToBoolean(FLEXSHIFT) == true && Convert.ToBoolean(EXTREGLVE) == false)
                                                    {
                                                        iComputedRegularMin = iShiftMin - iPayLeaveMin;
                                                        //iComputedDayWorkMin = iShiftMin;
                                                    }
                                                    else
                                                    {
                                                        iPayLeaveMin = iComputedAbsentMin;
                                                        iComputedDayWorkMin += iComputedAbsentMin;
                                                    }

                                                    iComputedAbsentMin      = 0;
                                                    iComputedLateMin        = 0;
                                                    iComputedLate2Min       = 0;
                                                    iComputedUndertime1Min  = 0;
                                                    iComputedUndertime2Min  = 0;
                                                    iInitialAbsentMin       = 0;
                                                    iActualLate1Mins        = 0;
                                                    iActualLate2Mins        = 0;
                                                    iActualUT1Mins          = 0;
                                                    iActualUT2Mins          = 0;
                                                }
                                            }

                                            //Cleanup Unpaid Leave
                                            if (iNoPayLeaveMin > 0)
                                            {
                                                //Just in case the leave hours filed is greater than the shift hours
                                                if (iShiftMin - iNoPayLeaveMin < 0)
                                                    iNoPayLeaveMin = iShiftMin;

                                                if (iNoPayLeaveMin > iComputedAbsentMin)
                                                {
                                                    if (Convert.ToBoolean(FLEXSHIFT) == true && Convert.ToBoolean(EXTREGULVE) == false)
                                                    {
                                                        iComputedRegularMin = iShiftMin - iNoPayLeaveMin;
                                                        //iComputedDayWorkMin = iComputedRegularMin;
                                                    }
                                                    else
                                                    {
                                                        iNoPayLeaveMin = iComputedAbsentMin;
                                                    }

                                                    iComputedAbsentMin      = 0;
                                                    iComputedLateMin        = 0;
                                                    iComputedLate2Min       = 0;
                                                    iComputedUndertime1Min  = 0;
                                                    iComputedUndertime2Min  = 0;
                                                    iInitialAbsentMin       = 0;
                                                    iActualLate1Mins        = 0;
                                                    iActualLate2Mins        = 0;
                                                    iActualUT1Mins          = 0;
                                                    iActualUT2Mins          = 0;
                                                }
                                            }

                                            //Total Absent Minutes
                                            iTotalComputedAbsentMin = iComputedLateMin + iComputedLate2Min + iComputedUndertime1Min + iComputedUndertime2Min + iInitialAbsentMin + iNoPayLeaveMin;
                                            #endregion
                                        }
                                        #endregion

                                        #region Initial Computed Regular and Day Work Minutes
                                        if (bIsRestDay || bIsHoliday || !bIsRegOrReg5DayCode || strDayCode.Equals("REGA")) //Rest day or holiday
                                        {
                                            //Overtime hour is pre-added with paid break hours
                                            if (iComputedOvertimeMin > 0 && bDonePaidBreakAdd == false)
                                            {
                                                iComputedOvertimeMin += iPaidBreak;
                                                bDonePaidBreakAdd = true;
                                            }
                                            //COMPUTED DAY WORK MIN
                                            iComputedDayWorkMin = iComputedOvertimeMin;
                                            //COMPUTED REGULAR MIN
                                            iComputedRegularMin = (iComputedDayWorkMin > iShiftMin) ? iShiftMin : iComputedDayWorkMin;
                                            //COMPUTED OVERTIME MIN
                                            iComputedOvertimeMin = (iComputedDayWorkMin > iShiftMin) ? iComputedDayWorkMin - iShiftMin : 0;

                                            #region Re-evaluate Absent Minutes (in case of holidays)
                                            iComputedLateMin        = 0;
                                            iComputedLate2Min       = 0;
                                            iComputedUndertime1Min  = 0;
                                            iComputedUndertime2Min  = 0;

                                            if (bDailiesNoWorkNoPay == false) //Legal Holiday, Company Holiday, etc
                                            {
                                                iInitialAbsentMin       = 0;
                                                iComputedAbsentMin      = 0;
                                                iNoPayLeaveMin          = 0;
                                                iTotalComputedAbsentMin = 0;
                                            }
                                            else  //SPL, CMPY and PSD (Dailies)
                                            {
                                                #region Compute Deduction Minutes
                                                //Computed Absent Min
                                                if (iComputedRegularMin > 0 && iShiftMin - iComputedRegularMin > 0)
                                                {
                                                    iComputedAbsentMin = iShiftMin - iComputedRegularMin;
                                                }
                                                else if (iComputedRegularMin == 0)
                                                {
                                                    iComputedAbsentMin = iShiftMin;

                                                    //Zero-out Actual Late and Undertime because employee has no worked hours
                                                    iActualLate1Mins    = 0;
                                                    iActualLate2Mins    = 0;
                                                    iActualUT1Mins      = 0;
                                                    iActualUT2Mins      = 0;
                                                }
                                                else
                                                {
                                                    iInitialAbsentMin   = 0;
                                                    iComputedAbsentMin  = 0;
                                                }

                                                //Cleanup Paid Leave
                                                if (iPayLeaveMin > 0)
                                                {
                                                    //Just in case the leave hours filed is greater than the shift hours
                                                    if (iShiftMin - iPayLeaveMin < 0)
                                                        iPayLeaveMin = iShiftMin;

                                                    if (iPayLeaveMin <= iComputedAbsentMin)
                                                    {
                                                        iComputedAbsentMin -= iPayLeaveMin;
                                                        iComputedDayWorkMin += iPayLeaveMin;
                                                    }
                                                    else
                                                    {
                                                        if (Convert.ToBoolean(FLEXSHIFT) == true && Convert.ToBoolean(EXTREGLVE) == false)
                                                        {
                                                            iComputedRegularMin = iShiftMin - iPayLeaveMin;
                                                            iComputedDayWorkMin = iShiftMin;
                                                        }
                                                        else
                                                        {
                                                            iPayLeaveMin = iComputedAbsentMin;
                                                            iComputedDayWorkMin += iComputedAbsentMin;
                                                        }

                                                        iComputedAbsentMin  = 0;
                                                        iInitialAbsentMin   = 0;
                                                    }
                                                }

                                                //Cleanup Unpaid Leave
                                                if (iNoPayLeaveMin > 0)
                                                {
                                                    //Just in case the leave hours filed is greater than the shift hours
                                                    if (iShiftMin - iNoPayLeaveMin < 0)
                                                        iNoPayLeaveMin = iShiftMin;

                                                    if (iNoPayLeaveMin > iComputedAbsentMin)
                                                    {
                                                        if (Convert.ToBoolean(FLEXSHIFT) == true && Convert.ToBoolean(EXTREGULVE) == false)
                                                        {
                                                            iComputedRegularMin = iShiftMin - iNoPayLeaveMin;
                                                            iComputedDayWorkMin = iComputedRegularMin;
                                                        }
                                                        else
                                                        {
                                                            iNoPayLeaveMin = iComputedAbsentMin;
                                                        }
                                                    }

                                                    iInitialAbsentMin   = 0;
                                                    iComputedAbsentMin  = 0;
                                                }

                                                //Total Absent Minutes for Holidays
                                                iTotalComputedAbsentMin = iComputedAbsentMin + iNoPayLeaveMin;
                                                #endregion
                                            }
                                            #endregion
                                        }
                                        else //Regular day
                                        {
                                            //COMPUTED REGULAR MIN
                                            //if (bDonePaidBreakAdd == false)
                                            //{
                                            //    iComputedRegularMin += iPaidBreak;
                                            //    iPaidBreakOnReg = iPaidBreak;
                                            //    bDonePaidBreakAdd = true;
                                            //}
                                            //COMPUTED DAY WORK MIN
                                            iComputedDayWorkMin += iComputedRegularMin;
                                            iComputedDayWorkMin += iComputedOvertimeMin;
                                        }
                                        #endregion
                                    }

                                    #endregion
                                }
                                else
                                {
                                    #region Four Pockets Logic

                                    #region Initial Actual Logs Cleanup
                                    if (iActualTimeIn1Min == iActualTimeOut1Min)
                                    {
                                        iActualTimeIn1Min  = 0;
                                        iActualTimeOut1Min = 0;
                                    }
                                    if (iActualTimeIn2Min == iActualTimeOut2Min)
                                    {
                                        iActualTimeIn2Min  = 0;
                                        iActualTimeOut2Min = 0;
                                    }
                                    if (iActualTimeIn1Min == iActualTimeOut2Min)
                                    {
                                        iActualTimeIn1Min  = 0;
                                        iActualTimeOut2Min = 0;
                                    }
                                    #endregion

                                    #region Assumed Present
                                    if (!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode) //Regular Day
                                    {
                                        if ((Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_AssumedFlag"]) == true
                                            && (dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString() == "N"
                                                || dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString() == ""
                                                || dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString().Equals("T"))
                                            ) || (dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"] != DBNull.Value
                                                && dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString().Equals("T")))
                                        {
                                            iActualTimeIn1Min  = iShiftTimeIn1Min;
                                            iActualTimeOut1Min = iShiftTimeOut1Min;
                                            iActualTimeIn2Min  = iShiftTimeIn2Min;
                                            iActualTimeOut2Min = iShiftTimeOut2Min;
                                        }
                                    }
                                    else //Rest Day
                                    {
                                        if (dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"] != DBNull.Value
                                            && dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString().Equals("T"))
                                        {
                                            iActualTimeIn1Min  = 0;
                                            iActualTimeOut1Min = 0;
                                            iActualTimeIn2Min  = 0;
                                            iActualTimeOut2Min = 0;
                                        }
                                    }
                                    #endregion

                                    #region Late Charge (Daily)
                                    //LATE CHARGE DAILY 
                                    if (bIsRegOrReg5DayCode == true && LATEFREQ.Equals("D"))
                                    {
                                        iActualTimeIn1Min = GetTimeWithLateChargeDaily(iActualTimeIn1Min, iShiftTimeIn1Min);
                                    }
                                    #endregion

                                    #region Late Charge (Quincena)
                                    //LATE CHARGE QUINCENA INITIALIZATION
                                    if (curEmployeeID != prevEmployeeID && LATEFREQ.Equals("Q"))
                                    {
                                        bApplyLateChargeQuincena = IsLateChargeQuincenaMet(curEmployeeID, ProcessPayrollPeriod, dal);
                                    }

                                    if (iActualTimeIn1Min != 0 && bApplyLateChargeQuincena)
                                    {
                                        iActualTimeIn1Min = iShiftTimeIn1Min;
                                    }
                                    #endregion

                                    #region Late and Undertime Bracket Deduction
                                    if (bIsRegOrReg5DayCode == true)
                                    {
                                        if (LATEBRCKTD != null || UTIMEBRCKT != null)
                                        {
                                            //Wrong placement - AM Logs
                                            if (iActualTimeIn1Min > 0 &&
                                                iActualTimeIn2Min == 0 &&
                                                iActualTimeOut2Min > 0 &&
                                                iActualTimeOut1Min == 0 &&
                                                iActualTimeIn1Min < iActualTimeOut2Min &&
                                                iActualTimeOut2Min < iShiftTimeIn2Min)
                                            {
                                                iActualTimeOut1Min = iActualTimeOut2Min;
                                                iActualTimeOut2Min = 0;
                                            }

                                            //Wrong placement - AM Logs (Scenario 2)
                                            if (iActualTimeIn1Min > 0 &&
                                                iActualTimeIn2Min == 0 &&
                                                iActualTimeOut2Min == 0 &&
                                                iActualTimeOut1Min > 0 &&
                                                iActualTimeIn1Min < iActualTimeOut1Min &&
                                                iActualTimeOut1Min >= iShiftTimeIn2Min)
                                            {
                                                iActualTimeOut2Min = iActualTimeOut1Min;
                                                iActualTimeOut1Min = 0;
                                            }

                                            //Wrong placement - PM Logs
                                            if (iActualTimeIn1Min > 0 &&
                                                iActualTimeIn2Min == 0 &&
                                                iActualTimeOut2Min > 0 &&
                                                iActualTimeOut1Min == 0 &&
                                                iActualTimeIn1Min < iActualTimeOut2Min &&
                                                iActualTimeIn1Min > iShiftTimeOut1Min)
                                            {
                                                iActualTimeIn2Min = iActualTimeIn1Min;
                                                iActualTimeIn1Min = 0;
                                            }

                                            //Wrong placement - PM Logs (Scenario 2)
                                            if (iActualTimeIn1Min == 0 &&
                                                iActualTimeIn2Min > 0 &&
                                                iActualTimeOut2Min > 0 &&
                                                iActualTimeOut1Min == 0 &&
                                                iActualTimeIn2Min < iActualTimeOut2Min &&
                                                iActualTimeIn2Min <= iShiftTimeOut1Min)
                                            {
                                                iActualTimeIn1Min = iActualTimeIn2Min;
                                                iActualTimeIn2Min = 0;
                                            }
                                        }

                                        if (iActualTimeIn1Min != 0) //check IN1 first before IN2
                                            iActualTimeIn1Min = GetTimeInWithLateBracketFilter(iActualTimeIn1Min, iShiftTimeIn1Min);
                                        else if (iActualTimeIn2Min != 0)
                                            iActualTimeIn2Min = GetTimeInWithLatePMBracketFilter(iActualTimeIn2Min, iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min);

                                        if (iActualTimeOut2Min != 0) //check OUT2 first before OUT1
                                            iActualTimeOut2Min = GetTimeOutWithUndertimeBracketFilter(iActualTimeOut2Min, iShiftTimeOut2Min);
                                        else if (iActualTimeOut1Min != 0)
                                            iActualTimeOut1Min = GetTimeOutWithUndertimePMBracketFilter(iActualTimeOut1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min);
                                    }
                                    #endregion

                                    #region Round Logs Based on Time Fraction
                                    if (TIMEFRAC > 0)
                                    {
                                        //(For Chiyoda)
                                        iActualTimeIn1Min  = CleanUpByRoundHigh(iActualTimeIn1Min, TIMEFRAC, dal);
                                        iActualTimeOut1Min = CleanUpByRoundLow(iActualTimeOut1Min, TIMEFRAC, dal);
                                        iActualTimeIn2Min  = CleanUpByRoundHigh(iActualTimeIn2Min, TIMEFRAC, dal);
                                        iActualTimeOut2Min = CleanUpByRoundLow(iActualTimeOut2Min, TIMEFRAC, dal);
                                    }
                                    #endregion

                                    #region Initial Actual Logs Cleanup (2nd pass)
                                    if (iActualTimeIn1Min == iActualTimeOut1Min)
                                    {
                                        iActualTimeIn1Min  = 0;
                                        iActualTimeOut1Min = 0;
                                    }
                                    if (iActualTimeIn2Min == iActualTimeOut2Min)
                                    {
                                        iActualTimeIn2Min  = 0;
                                        iActualTimeOut2Min = 0;
                                    }
                                    if (iActualTimeIn1Min == iActualTimeOut2Min)
                                    {
                                        iActualTimeIn1Min  = 0;
                                        iActualTimeOut2Min = 0;
                                    }
                                    #endregion

                                    #region Converted Time
                                    //CONVERTED TIME 
                                    iAbsFraction     = (bIsRegOrReg5DayCode == true) ? ABSFRACT_REG : ABSFRACT_NONREG;
                                    iConvTimeIn1Min  = GenerateLaborHours_GetConvertedTimeIn1(iActualTimeIn1Min, iMasterShiftTimeIn1Min, dtEmpTimeRegister.Rows[i]["Msh_PadIn1"].ToString(), iAbsFraction, bIsGraveyard && !bOverrideGraveyardConv);
                                    iConvTimeOut1Min = GenerateLaborHours_GetConvertedTimeOut1(iConvTimeIn1Min, iActualTimeOut1Min, iMasterShiftTimeOut1Min, dtEmpTimeRegister.Rows[i]["Msh_PadOut1"].ToString(), iAbsFraction, bIsGraveyard && !bOverrideGraveyardConv);
                                    iConvTimeIn2Min  = GenerateLaborHours_GetConvertedTimeIn2(iConvTimeIn1Min, iActualTimeIn2Min, iMasterShiftTimeIn2Min, dtEmpTimeRegister.Rows[i]["Msh_PadIn2"].ToString(), iAbsFraction, bIsGraveyard && !bOverrideGraveyardConv);
                                    iConvTimeOut2Min = GenerateLaborHours_GetConvertedTimeOut2(iConvTimeIn1Min, iConvTimeIn2Min, iActualTimeOut2Min, iMasterShiftTimeOut2Min, dtEmpTimeRegister.Rows[i]["Msh_PadOut2"].ToString(), iAbsFraction, bIsGraveyard && !bOverrideGraveyardConv);
                                    #endregion

                                    #region Converted Time for Outside Shift
                                    //Check if time logs are outside shift range
                                    if (iConvTimeIn1Min >= iMasterShiftTimeOut2Min
                                        || (bIsGraveyard == false && iConvTimeOut2Min > 0 && iConvTimeOut2Min <= iMasterShiftTimeOut1Min))
                                    {
                                        bIsOutsideShift = true; //Enable flag used to check for logs outside shift ranges
                                        iConvTimeOut1Min = 0;
                                        iConvTimeIn2Min = 0;
                                        if (!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode
                                            && ((iConvTimeIn1Min <= iConvTimeOut2Min && bIsGraveyard == true)
                                                || (iConvTimeIn1Min >= iConvTimeOut2Min && bIsGraveyard == false))) //Erase logs to avoid overpayment during day to graveyard conversion or vice versa
                                        {
                                            iConvTimeIn1Min  = 0;
                                            iConvTimeOut2Min = 0;
                                        }

                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Logs Not Aligned With Shift", "AW");
                                    }
                                    #endregion

                                    #region Waived Late and Undertime
                                    if (dtEmpTimeRegister.Rows[i]["Ttr_Amnesty"].ToString() != "")
                                    {
                                        if (dtEmpTimeRegister.Rows[i]["Ttr_Amnesty"].ToString() == "L") //waived late
                                        {
                                            if (iConvTimeIn1Min > 0 && iConvTimeIn1Min > iShiftTimeIn1Min)
                                                iConvTimeIn1Min = iShiftTimeIn1Min;
                                            if (iConvTimeIn2Min > 0 && iConvTimeIn2Min > iShiftTimeIn2Min)
                                                iConvTimeIn2Min = iShiftTimeIn2Min;
                                        }
                                        else if (dtEmpTimeRegister.Rows[i]["Ttr_Amnesty"].ToString() == "U") //waived undertime
                                        {
                                            if (iConvTimeOut1Min > 0 && iConvTimeOut1Min < iShiftTimeOut1Min)
                                                iConvTimeOut1Min = iShiftTimeOut1Min;
                                            if (iConvTimeOut2Min > 0 && iConvTimeOut2Min < iShiftTimeOut2Min)
                                                iConvTimeOut2Min = iShiftTimeOut2Min;
                                        }
                                        else if (dtEmpTimeRegister.Rows[i]["Ttr_Amnesty"].ToString() == "B") //waived late and undertime
                                        {
                                            if (iConvTimeIn1Min > 0 && iConvTimeIn1Min > iShiftTimeIn1Min)
                                                iConvTimeIn1Min = iShiftTimeIn1Min;
                                            if (iConvTimeIn2Min > 0 && iConvTimeIn2Min > iShiftTimeIn2Min)
                                                iConvTimeIn2Min = iShiftTimeIn2Min;
                                            if (iConvTimeOut1Min > 0 && iConvTimeOut1Min < iShiftTimeOut1Min)
                                                iConvTimeOut1Min = iShiftTimeOut1Min;
                                            if (iConvTimeOut2Min > 0 && iConvTimeOut2Min < iShiftTimeOut2Min)
                                                iConvTimeOut2Min = iShiftTimeOut2Min;

                                            if (iConvTimeIn2Min > 0 && iConvTimeIn1Min == 0)
                                            {
                                                iConvTimeIn1Min = iShiftTimeIn1Min;
                                                iConvTimeIn2Min = 0;
                                            }
                                            if (iConvTimeOut1Min > 0 && iConvTimeOut2Min == 0)
                                            {
                                                iConvTimeOut1Min = 0;
                                                iConvTimeOut2Min = iShiftTimeOut2Min;
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Clean Up Converted Time
                                    //NoIN1And2 -> CleanUpOUT1And2
                                    if (iConvTimeIn1Min == 0 && iConvTimeIn2Min == 0 &&
                                        (iConvTimeOut1Min + iConvTimeOut2Min) > 0)
                                    {
                                        iConvTimeOut1Min = 0;
                                        iConvTimeOut2Min = 0;
                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No Actual Time In 1 and 2", "AW");
                                    }

                                    //NoOUT1And2 -> CleanUpIN1And2
                                    if (iConvTimeOut1Min == 0 && iConvTimeOut2Min == 0 &&
                                        (iConvTimeIn1Min + iConvTimeIn2Min) > 0)
                                    {
                                        iConvTimeIn1Min = 0;
                                        iConvTimeIn2Min = 0;
                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No Actual Time Out 1 and 2", "AW");
                                    }

                                    //NoIN2 -> CleanUpOUT2
                                    if (iConvTimeIn1Min > 0 &&
                                        iConvTimeOut1Min > 0 &&
                                        iConvTimeOut2Min > 0 &&
                                        iConvTimeIn2Min == 0)
                                    {
                                        iConvTimeOut2Min = 0;
                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No Actual Time In 2", "AW");
                                    }

                                    //NoIN1 -> CleanUpOUT1
                                    if (iConvTimeIn2Min > 0 &&
                                        iConvTimeOut1Min > 0 &&
                                        iConvTimeOut2Min > 0 &&
                                        iConvTimeIn1Min == 0)
                                    {
                                        iConvTimeOut1Min = 0;
                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No Actual Time In 1", "AW");
                                    }

                                    //NoOUT2 -> CleanUpIN2
                                    if (iConvTimeIn1Min > 0 &&
                                        iConvTimeIn2Min > 0 &&
                                        iConvTimeOut1Min > 0 &&
                                        iConvTimeOut2Min == 0)
                                    {
                                        iConvTimeIn2Min = 0;
                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No Actual Time Out 2", "AW");
                                    }

                                    //NoOUT1 -> CleanUpIN1
                                    if (iConvTimeIn1Min > 0 &&
                                        iConvTimeIn2Min > 0 &&
                                        iConvTimeOut2Min > 0 &&
                                        iConvTimeOut1Min == 0 &&
                                        iActualTimeIn1Min != 0 &&
                                        iActualTimeIn2Min != 0)
                                    {
                                        iConvTimeIn1Min = 0;
                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No Actual Time Out 1", "AW");
                                    }

                                    //Wrong placement - AM Logs
                                    if (bOverrideGraveyardConv == false &&
                                        iConvTimeIn1Min > 0 &&
                                        iConvTimeIn2Min == 0 &&
                                        iConvTimeOut2Min > 0 &&
                                        iConvTimeOut1Min == 0 &&
                                        iConvTimeIn1Min < iConvTimeOut2Min &&
                                        iConvTimeOut2Min < iShiftTimeIn2Min)
                                    {
                                        iConvTimeOut1Min = iConvTimeOut2Min;
                                        iConvTimeOut2Min = 0;
                                    }

                                    //Wrong placement - AM Logs (Scenario 2)
                                    if (bOverrideGraveyardConv == false &&
                                        iConvTimeIn1Min > 0 &&
                                        iConvTimeIn2Min == 0 &&
                                        iConvTimeOut2Min == 0 &&
                                        iConvTimeOut1Min > 0 &&
                                        iConvTimeIn1Min < iConvTimeOut1Min &&
                                        iConvTimeOut1Min >= iShiftTimeIn2Min)
                                    {
                                        iConvTimeOut2Min = iConvTimeOut1Min;
                                        iConvTimeOut1Min = 0;
                                    }

                                    //Wrong placement - PM Logs
                                    if (bOverrideGraveyardConv == false &&
                                        iConvTimeIn1Min > 0 &&
                                        iConvTimeIn2Min == 0 &&
                                        iConvTimeOut2Min > 0 &&
                                        iConvTimeOut1Min == 0 &&
                                        iConvTimeIn1Min < iConvTimeOut2Min &&
                                        iConvTimeIn1Min > iShiftTimeOut1Min)
                                    {
                                        iConvTimeIn2Min = iConvTimeIn1Min;
                                        iConvTimeIn1Min = 0;
                                    }

                                    //Wrong placement - PM Logs (Scenario 2)
                                    if (bOverrideGraveyardConv == false &&
                                        iConvTimeIn1Min == 0 &&
                                        iConvTimeIn2Min > 0 &&
                                        iConvTimeOut2Min > 0 &&
                                        iConvTimeOut1Min == 0 &&
                                        iConvTimeIn2Min < iConvTimeOut2Min &&
                                        iConvTimeIn2Min <= iShiftTimeOut1Min)
                                    {
                                        iConvTimeIn1Min = iConvTimeIn2Min;
                                        iConvTimeIn2Min = 0;
                                    }

                                    //Negative Logs (OUT < IN)
                                    if (bIsGraveyard == false)
                                    {
                                        if (iConvTimeIn1Min > 0 && iConvTimeIn2Min == 0 &&
                                            iConvTimeOut2Min > 0 && iConvTimeOut1Min == 0 &&
                                            iConvTimeIn1Min > iConvTimeOut2Min)
                                        {
                                            iConvTimeIn1Min  = 0;
                                            iConvTimeOut2Min = 0;
                                        }
                                        else if (iConvTimeIn1Min > 0 && iConvTimeOut1Min > 0 &&
                                                   iConvTimeIn1Min > iConvTimeOut1Min)
                                        {
                                            iConvTimeIn1Min  = 0;
                                            iConvTimeOut1Min = 0;
                                        }
                                        else if (iConvTimeIn2Min > 0 && iConvTimeOut2Min > 0 &&
                                                   iConvTimeIn2Min > iConvTimeOut2Min)
                                        {
                                            iConvTimeIn2Min  = 0;
                                            iConvTimeOut2Min = 0;
                                        }
                                    }
                                    #endregion

                                    #region Check Leave Parameters
                                    drArrLeaveAppPaid   = GetCorrectedLeaveRecords(curEmployeeID, strProcessDate, true, bIsGraveyard && !bOverrideGraveyardConv, iShiftTimeIn1Min, iShiftTimeOut2Min);
                                    drArrLeaveAppUnpaid = GetCorrectedLeaveRecords(curEmployeeID, strProcessDate, false, bIsGraveyard && !bOverrideGraveyardConv, iShiftTimeIn1Min, iShiftTimeOut2Min);

                                    //Update Encoded Paid and Unpaid Leave if Flex Shift
                                    //if (Convert.ToBoolean(FLEXSHIFT) == true)
                                    //{
                                    //Encoded Paid Leave
                                    dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"] = "";
                                    dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVHr"]   = 0;
                                    foreach (DataRow drRow in drArrLeaveAppPaid)
                                    {
                                        if (Convert.ToDouble(drRow["LeaveHours"]) != 0)
                                        {
                                            //Check if combined leave
                                            if (dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"].ToString() != ""
                                                && dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"].ToString() != drRow["LeaveType"].ToString())
                                            {
                                                drArrLeaveType = dtLeaveType.Select(string.Format("Mlv_LeaveDescription = '{0} + {1}' OR Mlv_LeaveDescription = '{1} + {0}'", dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"].ToString(), drRow["LeaveType"].ToString()));
                                                if (drArrLeaveType.Length > 0)
                                                    dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"] = drArrLeaveType[0]["Mlv_LeaveCode"];
                                                else
                                                    dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"] = dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"].ToString().Substring(0, 1) + drRow["LeaveType"].ToString().Substring(0, 1);
                                            }
                                            else
                                                dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVCode"] = drRow["LeaveType"];
                                            dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVHr"]       = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_WFPayLVHr"]) + Convert.ToDouble(drRow["LeaveHours"]);
                                        }
                                    }

                                    //Encoded Unpaid Leave
                                    dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"] = "";
                                    dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVHr"]   = 0;
                                    foreach (DataRow drRow in drArrLeaveAppUnpaid)
                                    {
                                        if (Convert.ToDouble(drRow["LeaveHours"]) != 0)
                                        {
                                            //Check if combined leave
                                            if (dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"].ToString() != ""
                                                && dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"].ToString() != drRow["LeaveType"].ToString())
                                            {
                                                drArrLeaveType = dtLeaveType.Select(string.Format("Mlv_LeaveDescription = '{0} + {1}' OR Mlv_LeaveDescription = '{1} + {0}'", dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"].ToString(), drRow["LeaveType"].ToString()));
                                                if (drArrLeaveType.Length > 0)
                                                    dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"] = drArrLeaveType[0]["Mlv_LeaveCode"];
                                                else
                                                    dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"] = dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"].ToString().Substring(0, 1) + drRow["LeaveType"].ToString().Substring(0, 1);
                                            }
                                            else
                                                dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVCode"] = drRow["LeaveType"];
                                            dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_WFNoPayLVHr"]) + Convert.ToDouble(drRow["LeaveHours"]);
                                        }
                                    }
                                    //}

                                    //Clear Leave Availments if Assumed Postback is set to TRUE
                                    if (dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"] != DBNull.Value //Assumed Postback flag is equal to T
                                        && dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString().Equals("T") == true)
                                    {
                                        drArrLeaveAppPaid   = dtLeaveTable.Select("EmployeeId = ''");
                                        drArrLeaveAppUnpaid = dtLeaveTable.Select("EmployeeId = ''");
                                    }

                                    //Automatic Leave Availment Adjust to Shift
                                    if (Convert.ToBoolean(LVWDSHIFT))
                                    {
                                        AdjustLeaveBasedOnShift(drArrLeaveAppPaid, curEmployeeID, strProcessDate, iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min);
                                        AdjustLeaveBasedOnShift(drArrLeaveAppUnpaid, curEmployeeID, strProcessDate, iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min);
                                    }

                                    //Extend Regular Hours to Leave Hours (Paid Leave)
                                    if (!Convert.ToBoolean(EXTREGLVE))
                                    {
                                        CorrectConvertedTimeWithExtRegLveFlag(drArrLeaveAppPaid, ref iConvTimeIn1Min, ref iConvTimeOut1Min, ref iConvTimeIn2Min, ref iConvTimeOut2Min, iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min, iShiftMin, drArrOTApproved, bIsGraveyard && !bOverrideGraveyardConv);
                                    }

                                    //Extend Regular Hours to Leave Hours (Unpaid Leave)
                                    if (!Convert.ToBoolean(EXTREGULVE))
                                    {
                                        CorrectConvertedTimeWithExtRegLveFlag(drArrLeaveAppUnpaid, ref iConvTimeIn1Min, ref iConvTimeOut1Min, ref iConvTimeIn2Min, ref iConvTimeOut2Min, iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min, iShiftMin, drArrOTApproved, bIsGraveyard && !bOverrideGraveyardConv);
                                    }
                                    #endregion

                                    #region Clean Up Converted Time (2nd pass)
                                    //NoIN1And2 -> CleanUpOUT1And2
                                    if (iConvTimeIn1Min == 0 && iConvTimeIn2Min == 0 &&
                                        (iConvTimeOut1Min + iConvTimeOut2Min) > 0)
                                    {
                                        iConvTimeOut1Min = 0;
                                        iConvTimeOut2Min = 0;
                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No Actual Time In 1 and 2", "AW");
                                    }

                                    //NoOUT1And2 -> CleanUpIN1And2
                                    if (iConvTimeOut1Min == 0 && iConvTimeOut2Min == 0 &&
                                        (iConvTimeIn1Min + iConvTimeIn2Min) > 0)
                                    {
                                        iConvTimeIn1Min = 0;
                                        iConvTimeIn2Min = 0;
                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No Actual Time Out 1 and 2", "AW");
                                    }

                                    //NoIN2 -> CleanUpOUT2
                                    if (iConvTimeIn1Min > 0 &&
                                        iConvTimeOut1Min > 0 &&
                                        iConvTimeOut2Min > 0 &&
                                        iConvTimeIn2Min == 0)
                                    {
                                        iConvTimeOut2Min = 0;
                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No Actual Time In 2", "AW");
                                    }

                                    //NoIN1 -> CleanUpOUT1
                                    if (iConvTimeIn2Min > 0 &&
                                        iConvTimeOut1Min > 0 &&
                                        iConvTimeOut2Min > 0 &&
                                        iConvTimeIn1Min == 0)
                                    {
                                        iConvTimeOut1Min = 0;
                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No Actual Time In 1", "AW");
                                    }

                                    //NoOUT2 -> CleanUpIN2
                                    if (iConvTimeIn1Min > 0 &&
                                        iConvTimeIn2Min > 0 &&
                                        iConvTimeOut1Min > 0 &&
                                        iConvTimeOut2Min == 0)
                                    {
                                        iConvTimeIn2Min = 0;
                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No Actual Time Out 2", "AW");
                                    }

                                    //NoOUT1 -> CleanUpIN1
                                    if (iConvTimeIn1Min > 0 &&
                                        iConvTimeIn2Min > 0 &&
                                        iConvTimeOut2Min > 0 &&
                                        iConvTimeOut1Min == 0 &&
                                        iActualTimeIn1Min != 0 &&
                                        iActualTimeIn2Min != 0)
                                    {
                                        iConvTimeIn1Min = 0;
                                        AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No Actual Time Out 1", "AW");
                                    }

                                    //Wrong placement - AM Logs
                                    if (bOverrideGraveyardConv == false &&
                                        iConvTimeIn1Min > 0 &&
                                        iConvTimeIn2Min == 0 &&
                                        iConvTimeOut2Min > 0 &&
                                        iConvTimeOut1Min == 0 &&
                                        iConvTimeIn1Min < iConvTimeOut2Min &&
                                        iConvTimeOut2Min < iShiftTimeIn2Min)
                                    {
                                        iConvTimeOut1Min = iConvTimeOut2Min;
                                        iConvTimeOut2Min = 0;
                                    }

                                    //Wrong placement - AM Logs (Scenario 2)
                                    if (bOverrideGraveyardConv == false &&
                                        iConvTimeIn1Min > 0 &&
                                        iConvTimeIn2Min == 0 &&
                                        iConvTimeOut2Min == 0 &&
                                        iConvTimeOut1Min > 0 &&
                                        iConvTimeIn1Min < iConvTimeOut1Min &&
                                        iConvTimeOut1Min >= iShiftTimeIn2Min)
                                    {
                                        iConvTimeOut2Min = iConvTimeOut1Min;
                                        iConvTimeOut1Min = 0;
                                    }

                                    //Wrong placement - PM Logs
                                    if (bOverrideGraveyardConv == false &&
                                        iConvTimeIn1Min > 0 &&
                                        iConvTimeIn2Min == 0 &&
                                        iConvTimeOut2Min > 0 &&
                                        iConvTimeOut1Min == 0 &&
                                        iConvTimeIn1Min < iConvTimeOut2Min &&
                                        iConvTimeIn1Min > iShiftTimeOut1Min)
                                    {
                                        iConvTimeIn2Min = iConvTimeIn1Min;
                                        iConvTimeIn1Min = 0;
                                    }

                                    //Wrong placement - PM Logs (Scenario 2)
                                    if (bOverrideGraveyardConv == false &&
                                        iConvTimeIn1Min == 0 &&
                                        iConvTimeIn2Min > 0 &&
                                        iConvTimeOut2Min > 0 &&
                                        iConvTimeOut1Min == 0 &&
                                        iConvTimeIn2Min < iConvTimeOut2Min &&
                                        iConvTimeIn2Min <= iShiftTimeOut1Min)
                                    {
                                        iConvTimeIn1Min = iConvTimeIn2Min;
                                        iConvTimeIn2Min = 0;
                                    }

                                    //Negative Logs (OUT < IN)
                                    if (bIsGraveyard == false)
                                    {
                                        if (iConvTimeIn1Min > 0 && iConvTimeIn2Min == 0 &&
                                            iConvTimeOut2Min > 0 && iConvTimeOut1Min == 0 &&
                                            iConvTimeIn1Min > iConvTimeOut2Min)
                                        {
                                            iConvTimeIn1Min  = 0;
                                            iConvTimeOut2Min = 0;
                                        }
                                        else if (iConvTimeIn1Min > 0 && iConvTimeOut1Min > 0 &&
                                                   iConvTimeIn1Min > iConvTimeOut1Min)
                                        {
                                            iConvTimeIn1Min  = 0;
                                            iConvTimeOut1Min = 0;
                                        }
                                        else if (iConvTimeIn2Min > 0 && iConvTimeOut2Min > 0 &&
                                                   iConvTimeIn2Min > iConvTimeOut2Min)
                                        {
                                            iConvTimeIn2Min  = 0;
                                            iConvTimeOut2Min = 0;
                                        }
                                    }
                                    #endregion

                                    #region Computed Time
                                    //COMPUTED TIME IN 1
                                    iCompTimeIn1Min = 0;
                                    if (iConvTimeIn1Min != 0)
                                    {
                                        iCompTimeIn1Min = (iConvTimeIn1Min <= iShiftTimeIn1Min) ? iShiftTimeIn1Min : iConvTimeIn1Min;
                                    }

                                    //COMPUTED TIME OUT 2
                                    iCompTimeOut2Min = 0;
                                    if (iConvTimeOut2Min != 0 && (iConvTimeIn1Min > 0 || iConvTimeIn2Min > 0))
                                    {
                                        iCompTimeOut2Min = (iConvTimeOut2Min < iShiftTimeOut2Min) ? iConvTimeOut2Min : iShiftTimeOut2Min;
                                    }

                                    //COMPUTED TIME OUT 1
                                    iCompTimeOut1Min = 0;
                                    if (iConvTimeOut1Min == 0)
                                    {
                                        iCompTimeOut1Min = iShiftTimeOut1Min;
                                    }
                                    else
                                    {
                                        iCompTimeOut1Min = (iConvTimeOut1Min < iShiftTimeOut1Min) ? iConvTimeOut1Min : iShiftTimeOut1Min;
                                    }
                                    //Special case
                                    if (!(iConvTimeIn1Min > 0 && (iConvTimeOut1Min > 0 || iConvTimeOut2Min > 0)))
                                    {
                                        iCompTimeOut1Min = 0;
                                    }

                                    //COMPUTED TIME IN 2
                                    iCompTimeIn2Min = 0;
                                    if (iConvTimeIn2Min == 0)
                                    {
                                        iCompTimeIn2Min = iShiftTimeIn2Min;
                                    }
                                    else
                                    {
                                        iCompTimeIn2Min = (iConvTimeIn2Min < iShiftTimeIn2Min) ? iShiftTimeIn2Min : iConvTimeIn2Min;
                                    }
                                    //Special case
                                    if (!(iCompTimeOut2Min > 0))
                                    {
                                        iCompTimeIn2Min = 0;
                                    }

                                    //Manipulate computed time records which are outside shift range
                                    if (bIsOutsideShift)
                                    {
                                        if (iConvTimeIn1Min > 0 && iConvTimeIn1Min >= iShiftTimeOut2Min)
                                        {
                                            iCompTimeIn1Min  = 0;
                                            iCompTimeOut1Min = 0;
                                            iCompTimeIn2Min  = iConvTimeIn1Min;
                                            iCompTimeOut2Min = iConvTimeOut2Min;
                                        }
                                        else if (iConvTimeOut2Min > 0 && iConvTimeOut2Min <= iShiftTimeIn1Min)
                                        {
                                            iCompTimeIn1Min  = iConvTimeIn1Min;
                                            iCompTimeOut1Min = iConvTimeOut2Min;
                                            iCompTimeIn2Min  = 0;
                                            iCompTimeOut2Min = 0;
                                        }
                                    }
                                    #endregion

                                    #region //Offset Hours Checking
                                    //if (Convert.ToBoolean(TKOFFSET))
                                    //{
                                    //    #region Accumulated (diminish hours)
                                    //    iOTTemp = 0;
                                    //    iOTTemp2 = 0;
                                    //    drArrOffsetApp = dtOffsetTable.Select("Eof_AccumulatedDate = '" + strProcessDate + "'");
                                    //    foreach (DataRow drOffset in drArrOffsetApp)
                                    //    {
                                    //        iOffsetStartMin = GetMinsFromHourStr(drOffset["Eof_AccumulatedDateTimeStart"].ToString());
                                    //        iOffsetEndMin = GetMinsFromHourStr(drOffset["Eof_AccumulatedDateTimeEnd"].ToString());

                                    //        //iOffsetAmMins = GetOTHoursInTime(iOffsetStartMin, iOffsetEndMin, iConvTimeIn1Min, iCompTimeOut1Min, ref iOTTemp, ref iOTTemp2);
                                    //        //if (iOffsetAmMins > 0)
                                    //        //{
                                    //        //    iConvTimeIn1Min = iOTTemp2;
                                    //        //    if (iConvTimeIn1Min == iCompTimeOut1Min)
                                    //        //    {
                                    //        //        iConvTimeIn1Min = 0;
                                    //        //        iCompTimeOut1Min = 0;
                                    //        //    }
                                    //        //}

                                    //        //iOffsetPmMins = GetOTHoursInTime(iOffsetStartMin, iOffsetEndMin, iCompTimeIn2Min, iConvTimeOut2Min, ref iOTTemp, ref iOTTemp2);
                                    //        //if (iOffsetPmMins > 0)
                                    //        //{
                                    //        //    iConvTimeOut2Min = iOTTemp;
                                    //        //    if (iConvTimeOut2Min == iCompTimeIn2Min)
                                    //        //    {
                                    //        //        iConvTimeOut2Min = 0;
                                    //        //        iCompTimeIn2Min = 0;
                                    //        //    }
                                    //        //}

                                    //        iOffsetAmMins = GetOTHoursInTime(iOffsetStartMin, iOffsetEndMin, iConvTimeIn1Min, iConvTimeOut2Min, ref iOTTemp, ref iOTTemp2);
                                    //        iOffsetPmMins = 0;
                                    //        if (iOffsetAmMins > 0)
                                    //        {
                                    //            iConvTimeIn1Min = 0;
                                    //            iCompTimeOut1Min = 0;
                                    //            iConvTimeOut2Min = 0;
                                    //            iCompTimeIn2Min = 0;
                                    //        }

                                    //        //Update Actual Accumulated Hours
                                    //        if (iOffsetAmMins + iOffsetPmMins > 0)
                                    //        {
                                    //            iForOffsetMin = (iOffsetAmMins + iOffsetPmMins) * -1;
                                    //            drOffset["Eof_ActualAccumulatedMin"] = iOffsetAmMins + iOffsetPmMins;
                                    //            UpdateAccumulatedHours(drOffset["Eof_CurrentPayPeriod"].ToString(), drOffset["Eof_EmployeeId"].ToString(), drOffset["Eof_SeqNo"].ToString(), drOffset["Eof_OffsetDate"].ToString(), iOffsetAmMins + iOffsetPmMins, LoginUser);
                                    //        }
                                    //    }
                                    //    #endregion
                                    //}
                                    #endregion

                                    #region Computed Regular Minutes
                                    //Initialize Hour Fraction Table
                                    InitializeHourFractionTable();

                                    //COMPUTED REGULAR MINUTES
                                    if ((iShiftTimeOut1Min + iShiftTimeIn2Min == 0
                                            || iShiftTimeOut1Min == iShiftTimeIn2Min) //No break time in shift
                                        && (iCompTimeOut1Min + iCompTimeIn2Min == 0
                                            || iCompTimeOut1Min == iCompTimeIn2Min)
                                        && (iCompTimeIn1Min > 0 && (iCompTimeOut2Min - iCompTimeIn1Min) > 0))
                                    {
                                        iComputedRegularMin = iCompTimeOut2Min - iCompTimeIn1Min;
                                        if (iComputedRegularMin < 0)
                                            iComputedRegularMin = 0;
                                        #region Insert Computed Time to Hour Fraction Table
                                        if (!bIsRestDay && !bIsHoliday)
                                            InsertRegularTimeToHourFractionTable(iCompTimeIn1Min, iCompTimeOut2Min);
                                        #endregion
                                    }
                                    else ///With break time in shift
                                    {
                                        if ((iCompTimeOut1Min - iCompTimeIn1Min) > 0)
                                        {
                                            if ((iCompTimeOut2Min - iCompTimeIn2Min) >= 0 || (iShiftTimeIn2Min == 0 && iShiftTimeOut2Min == 0)) //special condition: with Present 2 records OR half-day
                                            {
                                                if ((iCompTimeOut1Min - iCompTimeIn1Min) > 0)
                                                    iComputedRegularMin += (iCompTimeOut1Min - iCompTimeIn1Min); //Add Present 1
                                                #region Insert Computed Time to Hour Fraction Table
                                                if (!bIsRestDay && !bIsHoliday)
                                                    InsertRegularTimeToHourFractionTable(iCompTimeIn1Min, iCompTimeOut1Min);
                                                #endregion
                                            }
                                        }

                                        if ((iCompTimeOut2Min - iCompTimeIn2Min) > 0)
                                        {
                                            if ((iCompTimeOut2Min - iCompTimeIn2Min) > 0)
                                                iComputedRegularMin += (iCompTimeOut2Min - iCompTimeIn2Min); //Add Present 2
                                            #region Insert Computed Time to Hour Fraction Table
                                            if (!bIsRestDay && !bIsHoliday)
                                                InsertRegularTimeToHourFractionTable(iCompTimeIn2Min, iCompTimeOut2Min);
                                            #endregion
                                        }

                                        #region Paid Break for Regular Day
                                        iPaidBreak = 0;
                                        if ((!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode) || bDailiesNoWorkNoPay)
                                        {
                                            if ((Convert.ToBoolean(CNTPDBRK) == true
                                                    && ((iConvTimeIn1Min > 0 && iConvTimeOut1Min > 0 && iConvTimeOut1Min >= iShiftTimeOut1Min)
                                                        || (iConvTimeIn2Min > 0 && iConvTimeOut2Min > 0 && iConvTimeIn2Min <= iShiftTimeIn2Min))
                                                    )
                                                || (iConvTimeIn1Min > 0 && iConvTimeOut2Min > 0 && iConvTimeIn1Min <= iShiftTimeOut1Min && iConvTimeOut2Min >= iShiftTimeIn2Min)
                                                ) //Condition to meet paid break
                                            {
                                                iPaidBreak = GetOTHoursInMinutes(iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut1Min, iShiftTimeIn2Min);

                                                if (iPaidBreak > iMasterPaidBreak) //Must not exceed the set paid break
                                                {
                                                    iPaidBreak = iMasterPaidBreak;
                                                }
                                                else
                                                {
                                                    #region Insert Computed Time to Hour Fraction Table
                                                    if (!bIsRestDay && !bIsHoliday)
                                                        InsertRegularTimeToHourFractionTable(iShiftTimeOut1Min, iShiftTimeOut1Min + iPaidBreak);
                                                    #endregion
                                                }
                                            }
                                        }
                                        iComputedRegularMin += iPaidBreak;
                                        #endregion

                                        //Special Condition (Override if undertime)
                                        if (iCompTimeIn1Min > 0 && iCompTimeOut2Min > 0 && iCompTimeOut2Min > iCompTimeIn1Min)
                                        {
                                            if (iCompTimeIn2Min > iCompTimeOut2Min) //undertime before break
                                            {
                                                iComputedRegularMin = Math.Min(iCompTimeOut1Min, iCompTimeOut2Min) - iCompTimeIn1Min;
                                                if (iComputedRegularMin < 0)
                                                    iComputedRegularMin = 0;
                                                else
                                                {
                                                    #region Insert Computed Time to Hour Fraction Table
                                                    if (!bIsRestDay && !bIsHoliday)
                                                    {
                                                        InitializeHourFractionTable();
                                                        InsertRegularTimeToHourFractionTable(iCompTimeIn1Min, Math.Min(iCompTimeOut1Min, iCompTimeOut2Min));
                                                    }
                                                    #endregion
                                                }
                                            }
                                            else if (iCompTimeIn1Min > iCompTimeOut1Min) //undertime after break
                                            {
                                                iComputedRegularMin = iCompTimeOut2Min - Math.Max(iCompTimeIn1Min, iCompTimeIn2Min);
                                                if (iComputedRegularMin < 0)
                                                    iComputedRegularMin = 0;
                                                else
                                                {
                                                    #region Insert Computed Time to Hour Fraction Table
                                                    if (!bIsRestDay && !bIsHoliday)
                                                    {
                                                        InitializeHourFractionTable();
                                                        InsertRegularTimeToHourFractionTable(Math.Max(iCompTimeIn1Min, iCompTimeIn2Min), iCompTimeOut2Min);
                                                    }
                                                    #endregion
                                                }
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Computed Late, Undertime, Absent and Leave Minutes
                                    //Condition for regular hour deduction
                                    if ((!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode) || bDailiesNoWorkNoPay)
                                    {
                                        //INITIAL COMPUTED DAY WORK MIN
                                        iComputedDayWorkMin = iComputedRegularMin;

                                        ComputeLeaveLateUndertime(drArrLeaveAppPaid, drArrLeaveAppUnpaid, curEmployeeID, strProcessDate
                                                                    , iConvTimeIn1Min, iCompTimeOut1Min, iCompTimeIn2Min, iConvTimeOut2Min
                                                                    , iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min
                                                                    , bIsGraveyard && !bOverrideGraveyardConv, iMasterPaidBreak
                                                                    , ref iComputedLateMin, ref iComputedLate2Min, ref iComputedUndertime1Min, ref iComputedUndertime2Min
                                                                    , ref iPayLeaveMin, ref iNoPayLeaveMin, ref iExcessLeaveMin, ref iLeaveMinToBeAddedToReg, ref iLeaveMinOnPaidBreak);

                                        //Actual Late and Undertime Computation (without parameters)
                                        ComputeLeaveLateUndertime(drArrLeaveAppPaid, drArrLeaveAppUnpaid, curEmployeeID, strProcessDate
                                                                    , iActualTimeIn1MinOrig, iCompTimeOut1Min, iCompTimeIn2Min, iActualTimeOut2MinOrig
                                                                    , iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min
                                                                    , bIsGraveyard && !bOverrideGraveyardConv, iMasterPaidBreak
                                                                    , ref iActualLate1Mins, ref iActualLate2Mins, ref iActualUT1Mins, ref iActualUT2Mins
                                                                    , ref iPayLeaveMinsDummy, ref iNoPayLeaveMinDummy, ref iExcessLeaveMinDummy, ref iLeaveMinToBeAddedToRegDummy, ref iLeaveMinOnPaidBreakDummy);

                                        #region Whole Day Absent
                                        if (iConvTimeIn1Min == 0 && iConvTimeOut1Min == 0 && iConvTimeIn2Min == 0 && iConvTimeOut2Min == 0 && iPayLeaveMin == 0 && iNoPayLeaveMin == 0 && iLeaveMinToBeAddedToReg == 0)
                                        {
                                            //iInitialAbsentMin = Whole Day Absent
                                            iComputedLateMin        = 0;
                                            iComputedLate2Min       = 0;
                                            iComputedUndertime1Min  = 0;
                                            iComputedUndertime2Min  = 0;
                                            if (iNoPayLeaveMin == iShiftMin)
                                                iInitialAbsentMin   = 0;
                                            else
                                                iInitialAbsentMin   = iShiftMin;
                                            iComputedAbsentMin      = iInitialAbsentMin;
                                        }
                                        else
                                        {
                                            //Paid Break
                                            if (iMasterPaidBreak > 0 && iPaidBreak == 0 && iLeaveMinOnPaidBreak == 0)
                                            {
                                                if (iPayLeaveMin > 0 && iPayLeaveMin + iMasterPaidBreak == iShiftMin)
                                                {
                                                    //Add to Regular Min
                                                    iPaidBreak = iMasterPaidBreak;
                                                    iComputedRegularMin += iPaidBreak;
                                                    #region Insert Computed Time to Hour Fraction Table
                                                    if (!bIsRestDay && !bIsHoliday)
                                                        InsertRegularTimeToHourFractionTable(iConvTimeIn1Min, iConvTimeIn1Min + iPaidBreak);
                                                    #endregion
                                                }
                                                else
                                                {
                                                    //Add to Undertime Min
                                                    iComputedUndertime2Min += iMasterPaidBreak;
                                                }
                                            }
                                        }

                                        if (iActualTimeIn1MinOrig == 0 && iActualTimeOut2MinOrig == 0 && iPayLeaveMin == 0 && iNoPayLeaveMin == 0 && iLeaveMinToBeAddedToReg == 0)
                                        {
                                            iActualLate1Mins = 0;
                                            iActualLate2Mins = 0;
                                            iActualUT1Mins   = 0;
                                            iActualUT2Mins   = 0;
                                        }
                                        #endregion

                                        #region Max Late and Undertime Minutes
                                        if (LATEMAXMIN > 0 && iComputedLateMin + iComputedLate2Min > LATEMAXMIN)
                                        {
                                            iInitialAbsentMin += iComputedLateMin + iComputedLate2Min;
                                            iComputedLateMin = 0;
                                            iComputedLate2Min = 0;
                                        }
                                        if (MAXUTMIN > 0 && iComputedUndertime1Min + iComputedUndertime2Min > MAXUTMIN)
                                        {
                                            iInitialAbsentMin += iComputedUndertime1Min + iComputedUndertime2Min;
                                            iComputedUndertime1Min = 0;
                                            iComputedUndertime2Min = 0;
                                        }
                                        #endregion

                                        #region Paid and Unpaid Leave
                                        //Add leave hours with no credit (e.g. OB)
                                        if (((!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode) || bDailiesNoWorkNoPay)
                                            && iLeaveMinToBeAddedToReg > 0)
                                        {
                                            if (iComputedRegularMin < iShiftMin && iComputedRegularMin + iLeaveMinToBeAddedToReg <= iShiftMin)
                                            {
                                                iComputedRegularMin += iLeaveMinToBeAddedToReg;
                                                iComputedDayWorkMin += iLeaveMinToBeAddedToReg;
                                                #region Insert Computed Time to Hour Fraction Table
                                                InsertRegularTimeToHourFractionTable(iConvTimeIn1Min, iConvTimeIn1Min + iLeaveMinToBeAddedToReg);
                                                #endregion
                                            }
                                            else if (iShiftMin - iComputedRegularMin < iLeaveMinToBeAddedToReg)
                                            {
                                                iComputedRegularMin += (iShiftMin - iComputedRegularMin);
                                                iComputedDayWorkMin += (iShiftMin - iComputedRegularMin);
                                                #region Insert Computed Time to Hour Fraction Table
                                                InsertRegularTimeToHourFractionTable(iConvTimeIn1Min, iConvTimeIn1Min + iShiftMin - iComputedRegularMin);
                                                #endregion
                                            }
                                        }

                                        if (iPayLeaveMin < 0)
                                        {
                                            AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Negative Paid Leave", "AE");
                                        }
                                        if (iNoPayLeaveMin < 0)
                                        {
                                            AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Negative Unpaid Leave", "AE");
                                        }
                                        if (iComputedRegularMin > iShiftMin)
                                        {
                                            AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Regular hours greater than Shift hours", "AE");
                                        }
                                        #endregion

                                        #region Compute Deduction Minutes
                                        //Computed Absent Min
                                        if (iComputedRegularMin > 0 && iShiftMin - iComputedRegularMin > 0)
                                        {
                                            iComputedAbsentMin = iShiftMin - iComputedRegularMin;
                                        }
                                        else if (iComputedRegularMin == 0)
                                        {
                                            iComputedAbsentMin = iShiftMin;

                                            //Zero-out Actual Late and Undertime because employee has no worked hours
                                            iActualLate1Mins = 0;
                                            iActualLate2Mins = 0;
                                            iActualUT1Mins   = 0;
                                            iActualUT2Mins   = 0;
                                        }
                                        else
                                        {
                                            iComputedAbsentMin = 0;
                                        }

                                        //Cleanup Paid Leave
                                        if (iPayLeaveMin > 0)
                                        {
                                            //Just in case the leave hours filed is greater than the shift hours
                                            if (iShiftMin - iPayLeaveMin < 0)
                                                iPayLeaveMin = iShiftMin;

                                            if (iPayLeaveMin <= iComputedAbsentMin)
                                            {
                                                iComputedAbsentMin -= iPayLeaveMin;
                                                iComputedDayWorkMin += iPayLeaveMin;
                                            }
                                            else
                                            {
                                                if (Convert.ToBoolean(FLEXSHIFT) == true && Convert.ToBoolean(EXTREGLVE) == false)
                                                {
                                                    iComputedRegularMin = iShiftMin - iPayLeaveMin;
                                                    iComputedDayWorkMin = iShiftMin;
                                                }
                                                else
                                                {
                                                    iPayLeaveMin = iComputedAbsentMin;
                                                    iComputedDayWorkMin += iComputedAbsentMin;
                                                }

                                                iComputedAbsentMin      = 0;
                                                iComputedLateMin        = 0;
                                                iComputedLate2Min       = 0;
                                                iComputedUndertime1Min  = 0;
                                                iComputedUndertime2Min  = 0;
                                                iInitialAbsentMin       = 0;
                                                iActualLate1Mins        = 0;
                                                iActualLate2Mins        = 0;
                                                iActualUT1Mins          = 0;
                                                iActualUT2Mins          = 0;
                                            }
                                        }

                                        //Cleanup Unpaid Leave
                                        if (iNoPayLeaveMin > 0)
                                        {
                                            //Just in case the leave hours filed is greater than the shift hours
                                            if (iShiftMin - iNoPayLeaveMin < 0)
                                                iNoPayLeaveMin = iShiftMin;

                                            if (iNoPayLeaveMin > iComputedAbsentMin)
                                            {
                                                if (Convert.ToBoolean(FLEXSHIFT) == true && Convert.ToBoolean(EXTREGULVE) == false)
                                                {
                                                    iComputedRegularMin = iShiftMin - iNoPayLeaveMin;
                                                    iComputedDayWorkMin = iComputedRegularMin;
                                                }
                                                else
                                                {
                                                    iNoPayLeaveMin = iComputedAbsentMin;
                                                }

                                                iComputedAbsentMin      = 0;
                                                iComputedLateMin        = 0;
                                                iComputedLate2Min       = 0;
                                                iComputedUndertime1Min  = 0;
                                                iComputedUndertime2Min  = 0;
                                                iInitialAbsentMin       = 0;
                                                iActualLate1Mins        = 0;
                                                iActualLate2Mins        = 0;
                                                iActualUT1Mins          = 0;
                                                iActualUT2Mins          = 0;
                                            }
                                        }

                                        //Total Absent Minutes
                                        iTotalComputedAbsentMin = iComputedLateMin + iComputedLate2Min + iComputedUndertime1Min + iComputedUndertime2Min + iInitialAbsentMin + iNoPayLeaveMin;
                                        #endregion
                                    }
                                    #endregion

                                    #region Overtime and Night Premium Computation
                                    #region Overtime Applications Loop
                                    //Initialize Encoded Advance and Post Overtime if Flex Shift
                                    if (Convert.ToBoolean(FLEXSHIFT) == true)
                                    {
                                        dtEmpTimeRegister.Rows[i]["Ttr_WFOTAdvHr"]  = 0;
                                        dtEmpTimeRegister.Rows[i]["Ttr_WFOTPostHr"] = 0;
                                    }
                                    foreach (DataRow drOTApp in drArrOTApproved)
                                    {
                                        iOTStartMin = GetMinsFromHourStr(drOTApp["Tot_StartTime"].ToString());
                                        iOTEndMin = GetMinsFromHourStr(drOTApp["Tot_EndTime"].ToString());
                                        strOTType = drOTApp["Tot_OvertimeType"].ToString();

                                        #region OT Application Validation
                                        if (strOTType.Equals("A") && iOTEndMin > iShiftTimeIn1Min)
                                        {
                                            AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Wrong advance overtime application", "AE");
                                            continue; //skip erroneous OT application
                                        }

                                        bCountOTFraction = false;
                                        if (Convert.ToBoolean(OTRNDFRAC) == true && (Convert.ToInt32(iShiftTimeOut1Min / iOTFraction) * iOTFraction == iShiftTimeOut1Min
                                               || Convert.ToInt32(iShiftTimeIn2Min / iOTFraction) * iOTFraction == iShiftTimeIn2Min))
                                            bCountOTFraction = true;

                                        if (bIsGraveyard && strOTType.Equals("P") && !bOverrideGraveyardConv) //Graveyard shift and Post-overtime
                                        {
                                            if (iOTStartMin < (iShiftTimeIn1Min - LOGPAD))
                                            {
                                                iOTStartMin += GRAVEYARD24;
                                            }
                                            if (iOTEndMin < (iShiftTimeOut2Min - LOGPAD))
                                            {
                                                iOTEndMin += GRAVEYARD24;
                                            }
                                        }

                                        //Encoded Overtime Hours and Minutes
                                        if (iOTEndMin - iOTStartMin > 0)
                                            iEncodedOvertimeMin += (iOTEndMin - iOTStartMin);

                                        //Rounding of OT in favor of Employee
                                        if (Convert.ToBoolean(OTROUNDING) == true)
                                        {
                                            iConvTimeIn1Min  = CleanUpByRoundLow(iConvTimeIn1Min, iOTFraction, dal);
                                            iConvTimeOut1Min = CleanUpByRoundHigh(iConvTimeOut1Min, iOTFraction, dal);
                                            iConvTimeIn2Min  = CleanUpByRoundLow(iConvTimeIn2Min, iOTFraction, dal);
                                            iConvTimeOut2Min = CleanUpByRoundHigh(iConvTimeOut2Min, iOTFraction, dal);
                                        }

                                        //Update Encoded Advance and Post Overtime Hour if Flex Shift
                                        if (Convert.ToBoolean(FLEXSHIFT) == true)
                                        {
                                            if (strOTType.Equals("A"))
                                            {
                                                dtEmpTimeRegister.Rows[i]["Ttr_WFOTAdvHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_WFOTAdvHr"]) + ((iOTEndMin - iOTStartMin) / 60.0);
                                                if (iOTEndMin - iOTStartMin > 0)
                                                    iEncodedOvertimeMin += (iOTEndMin - iOTStartMin);
                                            }
                                            if (strOTType.Equals("P"))
                                            {
                                                dtEmpTimeRegister.Rows[i]["Ttr_WFOTPostHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_WFOTPostHr"]) + ((iOTEndMin - iOTStartMin) / 60.0);
                                                if (iOTEndMin - iOTStartMin > 0)
                                                    iEncodedOvertimeMin += (iOTEndMin - iOTStartMin);
                                            }
                                        }
                                        #endregion

                                        if (bIsRestDay || bIsHoliday || !bIsRegOrReg5DayCode) //Rest day or holiday
                                        {
                                            #region Computed Overtime Minutes
                                            //[In-between OT = Get OT between ConvertedIn1 and ConvertedOut2]
                                            iAdvOTMin = GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iConvTimeIn1Min, iCompTimeOut1Min);
                                            if (bCountOTFraction == true)
                                            {
                                                iAdvOTMin = Convert.ToInt32(iAdvOTMin / iOTFraction) * iOTFraction;
                                            }
                                            if (strOTType.Equals("A"))
                                            {
                                                iAdjShiftMin += iAdvOTMin;
                                            }
                                            iComputedOvertimeMin += iAdvOTMin;

                                            #region Insert Overtime to Hour Fraction Table
                                            InsertOTToHourFractionTable(iOTStartMin, iOTEndMin, iConvTimeIn1Min, iCompTimeOut1Min, iOTFraction, bCountOTFraction);
                                            #endregion

                                            if (bIsOutsideShift && iComputedOvertimeMin > 0)
                                            {
                                                bIsOutsideShiftComputedOT = true;
                                            }
                                            iAdvOTMin = GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iCompTimeIn2Min, iConvTimeOut2Min);
                                            if (bCountOTFraction == true)
                                            {
                                                iAdvOTMin = Convert.ToInt32(iAdvOTMin / iOTFraction) * iOTFraction;
                                            }
                                            if (strOTType.Equals("A"))
                                            {
                                                iAdjShiftMin += iAdvOTMin;
                                            }
                                            if (!bIsOutsideShift || !bIsOutsideShiftComputedOT)
                                            {
                                                iComputedOvertimeMin += iAdvOTMin;

                                                #region Insert Overtime to Hour Fraction Table
                                                InsertOTToHourFractionTable(iOTStartMin, iOTEndMin, iCompTimeIn2Min, iConvTimeOut2Min, iOTFraction, bCountOTFraction);
                                                #endregion
                                            }

                                            if (bCountOTFraction == false)
                                            {
                                                iComputedOvertimeMin = Convert.ToInt32(iComputedOvertimeMin / iOTFraction) * iOTFraction;
                                                CorrectOTHourFraction(iComputedOvertimeMin);
                                            }

                                            //Paid Break for Rest day
                                            if ((iConvTimeIn1Min > 0 && iConvTimeOut2Min > 0 && iConvTimeIn1Min <= iShiftTimeOut1Min && iConvTimeOut2Min >= iShiftTimeIn2Min)
                                                //|| (iConvTimeIn1Min > 0 && iConvTimeOut1Min > 0 && iConvTimeOut1Min >= iShiftTimeIn2Min)
                                                //|| (iConvTimeIn2Min > 0 && iConvTimeOut2Min > 0 && iConvTimeIn2Min <= iShiftTimeIn2Min)
                                                ) //Condition to meet paid break
                                            {
                                                iPaidBreak += GetOTHoursInMinutes(iShiftTimeOut1Min, iShiftTimeIn2Min, iOTStartMin, iOTEndMin);

                                                if (iPaidBreak > iMasterPaidBreak) //Must not exceed the set paid break
                                                {
                                                    iPaidBreak = iMasterPaidBreak;
                                                }
                                                else
                                                {
                                                    if (MIDOT == false)
                                                    {
                                                        #region Insert Paid Break to Hour Fraction Table
                                                        InsertOTToHourFractionTable(iShiftTimeOut1Min, iShiftTimeIn2Min, iOTStartMin, iOTEndMin, iOTFraction, bCountOTFraction);
                                                        #endregion
                                                    }
                                                }
                                            }

                                            if (MIDOT == true && strOTType.Equals("M"))
                                            {
                                                //[Mid OT = Get OT between ComputedOut1 and ComputedIn2]
                                                iAdvOTMin = GetOTHoursInMinutes(iOTStartMin, iOTEndMin
                                                                                , Math.Max(Math.Max(iCompTimeOut1Min, iConvTimeIn2Min), iConvTimeIn1Min)
                                                                                , Math.Min(Math.Max(iCompTimeIn2Min, iConvTimeOut1Min), iConvTimeOut2Min));
                                                if (bCountOTFraction == true)
                                                {
                                                    iAdvOTMin = Convert.ToInt32(iAdvOTMin / iOTFraction) * iOTFraction;
                                                }
                                                iComputedOvertimeMin += iAdvOTMin;

                                                #region Insert Overtime to Hour Fraction Table
                                                InsertOTToHourFractionTable(iOTStartMin, iOTEndMin
                                                                            , Math.Max(Math.Max(iCompTimeOut1Min, iConvTimeIn2Min), iConvTimeIn1Min)
                                                                            , Math.Max(Math.Max(iCompTimeIn2Min, iConvTimeOut1Min), iConvTimeOut2Min)
                                                                            , iOTFraction, bCountOTFraction);
                                                #endregion
                                                iPaidBreak = 0;
                                            }
                                            #endregion

                                            if (NDBRCKTCNT == 2)
                                            {
                                                #region Computed Overtime Night Premium (Sharp)
                                                if ((iConvTimeIn1Min > 0 && iConvTimeOut2Min > 0 && iConvTimeIn1Min <= iShiftTimeOut1Min && iConvTimeOut2Min >= iShiftTimeIn2Min)
                                                    //|| (iConvTimeIn1Min > 0 && iConvTimeOut1Min > 0 && iConvTimeOut1Min >= iShiftTimeIn2Min)
                                                    //|| (iConvTimeIn2Min > 0 && iConvTimeOut2Min > 0 && iConvTimeIn2Min <= iShiftTimeIn2Min)
                                                    ) //Condition to meet paid break
                                                {
                                                    iBreakMin = (iCompTimeIn1Min > iCompTimeOut1Min) ? iCompTimeIn1Min : iCompTimeOut1Min;

                                                    #region ND Bracket 1
                                                    iOTTemp  = (NP1_BEGTIME > iOTStartMin) ? NP1_BEGTIME : iOTStartMin;
                                                    iOTTemp2 = (NP1_ENDTIME < iOTEndMin) ? NP1_ENDTIME : iOTEndMin;

                                                    iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeOut1Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDHour);
                                                    #endregion

                                                    iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeIn2Min, iConvTimeOut2Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeIn2Min, iConvTimeOut2Min, NDFRACTION, HourType.NDHour);
                                                    #endregion

                                                    iTimeMinTemp = GetOTHoursInMinutes(iOTTemp, iOTTemp2, iBreakMin, iCompTimeIn2Min);
                                                    if (iTimeMinTemp > 0)
                                                    {
                                                        iCompRegNightPremMin += iTimeMinTemp;
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iBreakMin, iCompTimeIn2Min, NDFRACTION, HourType.NDHour);
                                                        #endregion
                                                    }
                                                    #endregion

                                                    #region ND Bracket 1 (Early ND)
                                                    if (NP1_ENDTIME < NP1_BEGTIME
                                                        || NP1_BEGTIME > GRAVEYARD24
                                                        || NP1_ENDTIME > GRAVEYARD24)
                                                    {
                                                        if (NP1_BEGTIME > GRAVEYARD24)
                                                            iTimeMinTemp = NP1_BEGTIME - GRAVEYARD24;
                                                        else
                                                            iTimeMinTemp = NP1_BEGTIME;

                                                        if (NP1_ENDTIME > GRAVEYARD24)
                                                            iTimeMinTemp2 = NP1_ENDTIME - GRAVEYARD24;
                                                        else
                                                            iTimeMinTemp2 = NP1_ENDTIME;

                                                        if (iTimeMinTemp2 < iTimeMinTemp)
                                                            iTimeMinTemp = 0;

                                                        iOTTemp  = (iTimeMinTemp > iOTStartMin) ? iTimeMinTemp : iOTStartMin;
                                                        iOTTemp2 = (iTimeMinTemp2 < iOTEndMin) ? iTimeMinTemp2 : iOTEndMin;

                                                        iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeOut1Min);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDHour);
                                                        #endregion

                                                        iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeIn2Min, iConvTimeOut2Min);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeIn2Min, iConvTimeOut2Min, NDFRACTION, HourType.NDHour);
                                                        #endregion

                                                        iTimeMinTemp = GetOTHoursInMinutes(iOTTemp, iOTTemp2, iBreakMin, iCompTimeIn2Min);
                                                        if (iTimeMinTemp > 0)
                                                        {
                                                            iCompRegNightPremMin += iTimeMinTemp;
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iBreakMin, iCompTimeIn2Min, NDFRACTION, HourType.NDHour);
                                                            #endregion
                                                        }
                                                    }
                                                    #endregion

                                                    #region ND Bracket 2
                                                    iOTTemp  = (NP2_BEGTIME > iOTStartMin) ? NP2_BEGTIME : iOTStartMin;
                                                    iOTTemp2 = (NP2_ENDTIME < iOTEndMin) ? NP2_ENDTIME : iOTEndMin;

                                                    iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeOut1Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDOTHour);
                                                    #endregion

                                                    iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeIn2Min, iConvTimeOut2Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeIn2Min, iConvTimeOut2Min, NDFRACTION, HourType.NDOTHour);
                                                    #endregion

                                                    iTimeMinTemp = GetOTHoursInMinutes(iOTTemp, iOTTemp2, iBreakMin, iCompTimeIn2Min);
                                                    if (iTimeMinTemp > 0)
                                                    {
                                                        iCompOvertimeNightPremMin += iTimeMinTemp;
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iBreakMin, iCompTimeIn2Min, NDFRACTION, HourType.NDOTHour);
                                                        #endregion
                                                    }
                                                    #endregion

                                                    #region ND Bracket 2 (Early ND)
                                                    if (NP2_ENDTIME < NP2_BEGTIME
                                                        || NP2_BEGTIME > GRAVEYARD24
                                                        || NP2_ENDTIME > GRAVEYARD24)
                                                    {
                                                        if (NP2_BEGTIME > GRAVEYARD24)
                                                            iTimeMinTemp = NP2_BEGTIME - GRAVEYARD24;
                                                        else
                                                            iTimeMinTemp = NP2_BEGTIME;

                                                        if (NP2_ENDTIME > GRAVEYARD24)
                                                            iTimeMinTemp2 = NP2_ENDTIME - GRAVEYARD24;
                                                        else
                                                            iTimeMinTemp2 = NP2_ENDTIME;

                                                        if (iTimeMinTemp2 < iTimeMinTemp)
                                                            iTimeMinTemp = 0;

                                                        iOTTemp = (iTimeMinTemp > iOTStartMin) ? iTimeMinTemp : iOTStartMin;
                                                        iOTTemp2 = (iTimeMinTemp2 < iOTEndMin) ? iTimeMinTemp2 : iOTEndMin;

                                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeOut1Min);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDOTHour);
                                                        #endregion

                                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeIn2Min, iConvTimeOut2Min);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeIn2Min, iConvTimeOut2Min, NDFRACTION, HourType.NDOTHour);
                                                        #endregion

                                                        iTimeMinTemp = GetOTHoursInMinutes(iOTTemp, iOTTemp2, iBreakMin, iCompTimeIn2Min);
                                                        if (iTimeMinTemp > 0)
                                                        {
                                                            iCompOvertimeNightPremMin += iTimeMinTemp;
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iBreakMin, iCompTimeIn2Min, NDFRACTION, HourType.NDOTHour);
                                                            #endregion
                                                        }
                                                    }
                                                    #endregion
                                                }
                                                else
                                                {
                                                    iTimeMinTemp = (iConvTimeIn1Min > 0) ? iConvTimeIn1Min : iConvTimeIn2Min;
                                                    iTimeMinTemp2 = (iConvTimeOut2Min > 0) ? iConvTimeOut2Min : iConvTimeOut1Min;
                                                    if (iTimeMinTemp > 0 && iTimeMinTemp2 > 0)
                                                    {
                                                        #region ND Bracket 1
                                                        iOTTemp  = (NP1_BEGTIME > iOTStartMin) ? NP1_BEGTIME : iOTStartMin;
                                                        iOTTemp2 = (NP1_ENDTIME < iOTEndMin) ? NP1_ENDTIME : iOTEndMin;
                                                        iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                        #endregion
                                                        #endregion

                                                        #region ND Bracket 1 (Early ND)
                                                        if (NP1_ENDTIME < NP1_BEGTIME
                                                            || NP1_BEGTIME > GRAVEYARD24
                                                            || NP1_ENDTIME > GRAVEYARD24)
                                                        {
                                                            if (NP1_BEGTIME > GRAVEYARD24)
                                                                iTimeMinTemp3 = NP1_BEGTIME - GRAVEYARD24;
                                                            else
                                                                iTimeMinTemp3 = NP1_BEGTIME;

                                                            if (NP1_ENDTIME > GRAVEYARD24)
                                                                iTimeMinTemp4 = NP1_ENDTIME - GRAVEYARD24;
                                                            else
                                                                iTimeMinTemp4 = NP1_ENDTIME;

                                                            if (iTimeMinTemp4 < iTimeMinTemp3)
                                                                iTimeMinTemp3 = 0;

                                                            iOTTemp = (iTimeMinTemp3 > iOTStartMin) ? iTimeMinTemp3 : iOTStartMin;
                                                            iOTTemp2 = (iTimeMinTemp4 < iOTEndMin) ? iTimeMinTemp4 : iOTEndMin;
                                                            iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                            #endregion
                                                        }
                                                        #endregion

                                                        #region ND Bracket 2
                                                        iOTTemp  = (NP2_BEGTIME > iOTStartMin) ? NP2_BEGTIME : iOTStartMin;
                                                        iOTTemp2 = (NP2_ENDTIME < iOTEndMin) ? NP2_ENDTIME : iOTEndMin;
                                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                                        #endregion
                                                        #endregion

                                                        #region ND Bracket 2 (Early ND)
                                                        if (NP2_ENDTIME < NP2_BEGTIME
                                                            || NP2_BEGTIME > GRAVEYARD24
                                                            || NP2_ENDTIME > GRAVEYARD24)
                                                        {
                                                            if (NP2_BEGTIME > GRAVEYARD24)
                                                                iTimeMinTemp3 = NP2_BEGTIME - GRAVEYARD24;
                                                            else
                                                                iTimeMinTemp3 = NP2_BEGTIME;

                                                            if (NP2_ENDTIME > GRAVEYARD24)
                                                                iTimeMinTemp4 = NP2_ENDTIME - GRAVEYARD24;
                                                            else
                                                                iTimeMinTemp4 = NP2_ENDTIME;

                                                            if (iTimeMinTemp4 < iTimeMinTemp3)
                                                                iTimeMinTemp3 = 0;

                                                            iOTTemp = (iTimeMinTemp3 > iOTStartMin) ? iTimeMinTemp3 : iOTStartMin;
                                                            iOTTemp2 = (iTimeMinTemp4 < iOTEndMin) ? iTimeMinTemp4 : iOTEndMin;
                                                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                                            #endregion
                                                        }
                                                        #endregion
                                                    }
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region Computed Overtime Night Premium (Normal)
                                                if ((iConvTimeIn1Min > 0 && iConvTimeOut2Min > 0 && iConvTimeIn1Min <= iShiftTimeOut1Min && iConvTimeOut2Min >= iShiftTimeIn2Min)
                                                    //|| (iConvTimeIn1Min > 0 && iConvTimeOut1Min > 0 && iConvTimeOut1Min >= iShiftTimeIn2Min)
                                                    //|| (iConvTimeIn2Min > 0 && iConvTimeOut2Min > 0 && iConvTimeIn2Min <= iShiftTimeIn2Min)
                                                    ) //Condition to meet paid break
                                                {
                                                    //Break between shifts
                                                    iBreakMin = (iCompTimeIn1Min > iCompTimeOut1Min) ? iCompTimeIn1Min : iCompTimeOut1Min;

                                                    ///OVERTIME NIGHT PREMIUM FOR DAY SHIFTS
                                                    if (bNDCount && !bIsGraveyard) //HOYA
                                                    {
                                                        if (Convert.ToBoolean(NDALL)) //HOEP: Special Case
                                                        {
                                                            iOTTemp  = (NIGHTDIFFAMSTART > iOTStartMin) ? NIGHTDIFFAMSTART : iOTStartMin;
                                                            iOTTemp2 = (NIGHTDIFFAMEND < iOTEndMin) ? NIGHTDIFFAMEND : iOTEndMin;

                                                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeIn1Min);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeIn1Min, NDFRACTION, HourType.NDOTHour);
                                                            #endregion

                                                            iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeIn1Min, iCompTimeOut1Min);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDHour);
                                                            #endregion

                                                            if (Convert.ToBoolean(NDCNTBREAK))
                                                            {
                                                                iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeOut1Min, iCompTimeIn2Min);
                                                                #region Insert ND Hour to Hour Fraction Table
                                                                InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeOut1Min, iCompTimeIn2Min, NDFRACTION, HourType.NDHour);
                                                                #endregion
                                                            }

                                                            iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeIn2Min, iCompTimeOut2Min);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeIn2Min, iCompTimeOut2Min, NDFRACTION, HourType.NDHour);
                                                            #endregion

                                                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeOut2Min, iConvTimeOut2Min);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeOut2Min, iConvTimeOut2Min, NDFRACTION, HourType.NDOTHour);
                                                            #endregion
                                                        }
                                                        else
                                                        {
                                                            iOTTemp = (NIGHTDIFFAMSTART > iOTStartMin) ? NIGHTDIFFAMSTART : iOTStartMin;
                                                            iOTTemp2 = (NIGHTDIFFAMEND < iOTEndMin) ? NIGHTDIFFAMEND : iOTEndMin;

                                                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeOut1Min);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDOTHour);
                                                            #endregion

                                                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeIn2Min, iConvTimeOut2Min);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeIn2Min, iConvTimeOut2Min, NDFRACTION, HourType.NDOTHour);
                                                            #endregion

                                                            iTimeMinTemp = GetOTHoursInMinutes(iOTTemp, iOTTemp2, iBreakMin, iCompTimeIn2Min);
                                                            //if (iTimeMinTemp > 0 && iTimeMinTemp <= iMasterPaidBreak)
                                                            if (iTimeMinTemp > 0 && Convert.ToBoolean(NDCNTBREAK))
                                                            {
                                                                iCompOvertimeNightPremMin += iTimeMinTemp;
                                                                #region Insert ND Hour to Hour Fraction Table
                                                                InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iBreakMin, iCompTimeIn2Min, NDFRACTION, HourType.NDOTHour);
                                                                #endregion
                                                            }
                                                        }
                                                    }

                                                    ///OVERTIME NIGHT PREMIUM FOR GRAVEYARD SHIFTS
                                                    if (Convert.ToBoolean(NDALL)) //HOEP: Special Case
                                                    {
                                                        iOTTemp  = (NIGHTDIFFGRAVEYARDSTART > iOTStartMin) ? NIGHTDIFFGRAVEYARDSTART : iOTStartMin;
                                                        iOTTemp2 = (NIGHTDIFFGRAVEYARDEND < iOTEndMin) ? NIGHTDIFFGRAVEYARDEND : iOTEndMin;

                                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeIn1Min);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeIn1Min, NDFRACTION, HourType.NDOTHour);
                                                        #endregion

                                                        iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeIn1Min, iCompTimeOut1Min);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDHour);
                                                        #endregion

                                                        if (Convert.ToBoolean(NDCNTBREAK))
                                                        {
                                                            iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeOut1Min, iCompTimeIn2Min);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeOut1Min, iCompTimeIn2Min, NDFRACTION, HourType.NDHour);
                                                            #endregion
                                                        }

                                                        iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeIn2Min, iCompTimeOut2Min);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeIn2Min, iCompTimeOut2Min, NDFRACTION, HourType.NDHour);
                                                        #endregion

                                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeOut2Min, iConvTimeOut2Min);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeOut2Min, iConvTimeOut2Min, NDFRACTION, HourType.NDOTHour);
                                                        #endregion
                                                    }
                                                    else
                                                    {
                                                        iOTTemp  = (NIGHTDIFFGRAVEYARDSTART > iOTStartMin) ? NIGHTDIFFGRAVEYARDSTART : iOTStartMin;
                                                        iOTTemp2 = (NIGHTDIFFGRAVEYARDEND < iOTEndMin) ? NIGHTDIFFGRAVEYARDEND : iOTEndMin;

                                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeOut1Min);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDOTHour);
                                                        #endregion

                                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeIn2Min, iConvTimeOut2Min);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeIn2Min, iConvTimeOut2Min, NDFRACTION, HourType.NDOTHour);
                                                        #endregion

                                                        iTimeMinTemp = GetOTHoursInMinutes(iOTTemp, iOTTemp2, iBreakMin, iCompTimeIn2Min);
                                                        //if (iTimeMinTemp > 0 && iTimeMinTemp <= iMasterPaidBreak)
                                                        if (iTimeMinTemp > 0 && Convert.ToBoolean(NDCNTBREAK))
                                                        {
                                                            iCompOvertimeNightPremMin += iTimeMinTemp;
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iBreakMin, iCompTimeIn2Min, NDFRACTION, HourType.NDOTHour);
                                                            #endregion
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    iTimeMinTemp  = (iConvTimeIn1Min > 0) ? iConvTimeIn1Min : iConvTimeIn2Min;
                                                    iTimeMinTemp2 = (iConvTimeOut2Min > 0) ? iConvTimeOut2Min : iConvTimeOut1Min;
                                                    if (iTimeMinTemp > 0 && iTimeMinTemp2 > 0)
                                                    {
                                                        ///OVERTIME NIGHT PREMIUM FOR DAY SHIFTS
                                                        if (bNDCount) //HOYA
                                                        {
                                                            if (Convert.ToBoolean(NDALL)) //HOEP: Special Case
                                                            {
                                                                iOTTemp  = (NIGHTDIFFAMSTART > iOTStartMin) ? NIGHTDIFFAMSTART : iOTStartMin;
                                                                iOTTemp2 = (NIGHTDIFFAMEND < iOTEndMin) ? NIGHTDIFFAMEND : iOTEndMin;

                                                                iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeIn1Min);
                                                                #region Insert ND Hour to Hour Fraction Table
                                                                InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeIn1Min, NDFRACTION, HourType.NDOTHour);
                                                                #endregion

                                                                iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeIn1Min, iCompTimeOut1Min);
                                                                #region Insert ND Hour to Hour Fraction Table
                                                                InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDHour);
                                                                #endregion

                                                                if (Convert.ToBoolean(NDCNTBREAK))
                                                                {
                                                                    iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeOut1Min, iCompTimeIn2Min);
                                                                    #region Insert ND Hour to Hour Fraction Table
                                                                    InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeOut1Min, iCompTimeIn2Min, NDFRACTION, HourType.NDHour);
                                                                    #endregion
                                                                }

                                                                iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeIn2Min, iCompTimeOut2Min);
                                                                #region Insert ND Hour to Hour Fraction Table
                                                                InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeIn2Min, iCompTimeOut2Min, NDFRACTION, HourType.NDHour);
                                                                #endregion

                                                                iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeOut2Min, iConvTimeOut2Min);
                                                                #region Insert ND Hour to Hour Fraction Table
                                                                InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeOut2Min, iConvTimeOut2Min, NDFRACTION, HourType.NDOTHour);
                                                                #endregion
                                                            }
                                                            else
                                                            {
                                                                iOTTemp  = (NIGHTDIFFAMSTART > iOTStartMin) ? NIGHTDIFFAMSTART : iOTStartMin;
                                                                iOTTemp2 = (NIGHTDIFFAMEND < iOTEndMin) ? NIGHTDIFFAMEND : iOTEndMin;
                                                                iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2);
                                                                #region Insert ND Hour to Hour Fraction Table
                                                                InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                                                #endregion
                                                            }
                                                        }

                                                        ///OVERTIME NIGHT PREMIUM FOR GRAVEYARD SHIFTS
                                                        if (Convert.ToBoolean(NDALL)) //HOEP: Special Case
                                                        {
                                                            iOTTemp  = (NIGHTDIFFGRAVEYARDSTART > iOTStartMin) ? NIGHTDIFFGRAVEYARDSTART : iOTStartMin;
                                                            iOTTemp2 = (NIGHTDIFFGRAVEYARDEND < iOTEndMin) ? NIGHTDIFFGRAVEYARDEND : iOTEndMin;

                                                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeIn1Min);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeIn1Min, iCompTimeIn1Min, NDFRACTION, HourType.NDOTHour);
                                                            #endregion

                                                            iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeIn1Min, iCompTimeOut1Min);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDHour);
                                                            #endregion

                                                            if (Convert.ToBoolean(NDCNTBREAK))
                                                            {
                                                                iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeOut1Min, iCompTimeIn2Min);
                                                                #region Insert ND Hour to Hour Fraction Table
                                                                InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeOut1Min, iCompTimeIn2Min, NDFRACTION, HourType.NDHour);
                                                                #endregion
                                                            }

                                                            iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeIn2Min, iCompTimeOut2Min);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeIn2Min, iCompTimeOut2Min, NDFRACTION, HourType.NDHour);
                                                            #endregion

                                                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iCompTimeOut2Min, iConvTimeOut2Min);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iCompTimeOut2Min, iConvTimeOut2Min, NDFRACTION, HourType.NDOTHour);
                                                            #endregion
                                                        }
                                                        else
                                                        {
                                                            iOTTemp  = (NIGHTDIFFGRAVEYARDSTART > iOTStartMin) ? NIGHTDIFFGRAVEYARDSTART : iOTStartMin;
                                                            iOTTemp2 = (NIGHTDIFFGRAVEYARDEND < iOTEndMin) ? NIGHTDIFFGRAVEYARDEND : iOTEndMin;
                                                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2);
                                                            #region Insert ND Hour to Hour Fraction Table
                                                            InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                                            #endregion
                                                        }
                                                    }
                                                }
                                                #endregion
                                            }
                                        }
                                        else //Regular day
                                        {
                                            #region Computed Overtime Minutes
                                            //[Adv OT = Get OT between ConvertedIn1 and ComputedIn1]
                                            if (strOTType.Equals("A")) //Advance OT Type
                                            {
                                                iOTTemp   = (iCompTimeIn1Min < iCompTimeOut1Min) ? iCompTimeIn1Min : iCompTimeOut1Min;
                                                iAdvOTMin = GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iConvTimeIn1Min, iOTTemp);
                                                if (bCountOTFraction == true)
                                                {
                                                    iAdvOTMin = Convert.ToInt32(iAdvOTMin / iOTFraction) * iOTFraction;
                                                }
                                                iAdjShiftMin += iAdvOTMin;
                                                iComputedOvertimeMin += iAdvOTMin;

                                                #region Insert Overtime to Hour Fraction Table
                                                InsertOTToHourFractionTable(iOTStartMin, iOTEndMin, iConvTimeIn1Min, iCompTimeIn1Min, iOTFraction, bCountOTFraction);
                                                #endregion
                                            }

                                            //[Mid OT = Get OT between ComputedOut1 and ComputedIn2]
                                            if (MIDOT == true && strOTType.Equals("M"))
                                            {
                                                iAdvOTMin = GetOTHoursInMinutes(iOTStartMin, iOTEndMin
                                                                                , Math.Max(Math.Max(iCompTimeOut1Min, iConvTimeIn2Min), iConvTimeIn1Min)
                                                                                , Math.Min(Math.Max(iCompTimeIn2Min, iConvTimeOut1Min), iConvTimeOut2Min));
                                                if (bCountOTFraction == true)
                                                {
                                                    iAdvOTMin = Convert.ToInt32(iAdvOTMin / iOTFraction) * iOTFraction;
                                                }
                                                iComputedOvertimeMin += iAdvOTMin;

                                                #region Insert Overtime to Hour Fraction Table
                                                InsertOTToHourFractionTable(iOTStartMin, iOTEndMin
                                                                            , Math.Max(Math.Max(iCompTimeOut1Min, iConvTimeIn2Min), iConvTimeIn1Min)
                                                                            , Math.Max(Math.Max(iCompTimeIn2Min, iConvTimeOut1Min), iConvTimeOut2Min)
                                                                            , iOTFraction, bCountOTFraction);
                                                #endregion
                                            }

                                            //[Post OT = Get OT between ComputedOut2 and ConvertedOut2]
                                            iOTTemp = (iCompTimeIn2Min > iCompTimeOut2Min) ? iCompTimeIn2Min : iCompTimeOut2Min;
                                            iAdvOTMin = GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iOTTemp, iConvTimeOut2Min);
                                            if (bCountOTFraction == true)
                                            {
                                                iAdvOTMin = Convert.ToInt32(iAdvOTMin / iOTFraction) * iOTFraction;
                                            }
                                            iComputedOvertimeMin += iAdvOTMin;

                                            #region Insert Overtime to Hour Fraction Table
                                            InsertOTToHourFractionTable(iOTStartMin, iOTEndMin, iCompTimeOut2Min, iConvTimeOut2Min, iOTFraction, bCountOTFraction);
                                            #endregion

                                            if (bCountOTFraction == false)
                                            {
                                                iComputedOvertimeMin = Convert.ToInt32(iComputedOvertimeMin / iOTFraction) * iOTFraction;
                                                CorrectOTHourFraction(iComputedOvertimeMin);
                                            }
                                            #endregion

                                            if (NDBRCKTCNT == 2)
                                            {
                                                #region Computed Overtime Night Premium (Sharp)
                                                if (bIsGraveyard) //Graveyard shift
                                                {
                                                    #region ND Bracket 1
                                                    //[NDOTHr = Get NDOT between NP1_BEGTIME/ConvertedIn1 to ComputedIn1]
                                                    iTimeMinTemp = (NP1_BEGTIME > iConvTimeIn1Min) ? NP1_BEGTIME : iConvTimeIn1Min;
                                                    iCompRegNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTimeMinTemp, iCompTimeIn1Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTimeMinTemp, iCompTimeIn1Min, NDFRACTION, HourType.NDHour);
                                                    #endregion

                                                    //[NDOTHr = Get NDOT between ComputedOut2 to NP1_ENDTIME/ConvertedOut2]
                                                    iTimeMinTemp = (iConvTimeOut2Min < NP1_ENDTIME) ? iConvTimeOut2Min : NP1_ENDTIME;
                                                    iCompRegNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iCompTimeOut2Min, iTimeMinTemp);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iCompTimeOut2Min, iTimeMinTemp, NDFRACTION, HourType.NDHour);
                                                    #endregion
                                                    #endregion

                                                    #region ND Bracket 2
                                                    //[NDOTHr = Get NDOT between NP2_BEGTIME/ConvertedIn1 to ComputedIn1]
                                                    iTimeMinTemp = (NP2_BEGTIME > iConvTimeIn1Min) ? NP2_BEGTIME : iConvTimeIn1Min;
                                                    iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTimeMinTemp, iCompTimeIn1Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTimeMinTemp, iCompTimeIn1Min, NDFRACTION, HourType.NDOTHour);
                                                    #endregion

                                                    //[NDOTHr = Get NDOT between ComputedOut2 to NP2_ENDTIME/ConvertedOut2]
                                                    iTimeMinTemp = (iConvTimeOut2Min < NP2_ENDTIME) ? iConvTimeOut2Min : NP2_ENDTIME;
                                                    iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iCompTimeOut2Min, iTimeMinTemp);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iCompTimeOut2Min, iTimeMinTemp, NDFRACTION, HourType.NDOTHour);
                                                    #endregion
                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region ND Bracket 1
                                                    //[NDOTHr = Get NDOT between NP1_BEGTIME/ComputedOut2 to ConvertedOut2]
                                                    iTimeMinTemp  = (iCompTimeOut2Min > NP1_BEGTIME) ? iCompTimeOut2Min : NP1_BEGTIME;
                                                    iTimeMinTemp2 = (iOTEndMin > NP1_ENDTIME) ? NP1_ENDTIME : iOTEndMin;
                                                    iCompRegNightPremMin += GetOTHoursInMinutes(iOTStartMin, iTimeMinTemp2, iTimeMinTemp, iConvTimeOut2Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iOTStartMin, iTimeMinTemp2, iTimeMinTemp, iConvTimeOut2Min, NDFRACTION, HourType.NDHour);
                                                    #endregion
                                                    #endregion

                                                    #region ND Bracket 1 (Early ND)
                                                    if (NP1_ENDTIME < NP1_BEGTIME
                                                        || NP1_BEGTIME > GRAVEYARD24
                                                        || NP1_ENDTIME > GRAVEYARD24)
                                                    {
                                                        if (NP1_BEGTIME > GRAVEYARD24)
                                                            iTimeMinTemp3 = NP1_BEGTIME - GRAVEYARD24;
                                                        else
                                                            iTimeMinTemp3 = NP1_BEGTIME;

                                                        if (NP1_ENDTIME > GRAVEYARD24)
                                                            iTimeMinTemp4 = NP1_ENDTIME - GRAVEYARD24;
                                                        else
                                                            iTimeMinTemp4 = NP1_ENDTIME;

                                                        if (iTimeMinTemp4 < iTimeMinTemp3)
                                                            iTimeMinTemp3 = 0;

                                                        iOTTemp  = (iTimeMinTemp3 > iOTStartMin) ? iTimeMinTemp3 : iOTStartMin;
                                                        iOTTemp2 = (iTimeMinTemp4 < iOTEndMin) ? iTimeMinTemp4 : iOTEndMin;
                                                        iTimeMinTemp = (iTimeMinTemp2 < iCompTimeIn1Min) ? iTimeMinTemp2 : iCompTimeIn1Min;
                                                        iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iConvTimeIn1Min, iTimeMinTemp);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeIn1Min, iTimeMinTemp, NDFRACTION, HourType.NDHour);
                                                        #endregion
                                                    }
                                                    #endregion

                                                    #region ND Bracket 2
                                                    //[NDOTHr = Get NDOT between NP2_BEGTIME/ComputedOut2 to ConvertedOut2]
                                                    iTimeMinTemp  = (iCompTimeOut2Min > NP2_BEGTIME) ? iCompTimeOut2Min : NP2_BEGTIME;
                                                    iTimeMinTemp2 = (iOTEndMin > NP2_ENDTIME) ? NP2_ENDTIME : iOTEndMin;
                                                    iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iTimeMinTemp2, iTimeMinTemp, iConvTimeOut2Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iOTStartMin, iTimeMinTemp2, iTimeMinTemp, iConvTimeOut2Min, NDFRACTION, HourType.NDOTHour);
                                                    #endregion
                                                    #endregion

                                                    #region ND Bracket 2 (Early ND)
                                                    if (NP2_ENDTIME < NP2_BEGTIME
                                                        || NP2_BEGTIME > GRAVEYARD24
                                                        || NP2_ENDTIME > GRAVEYARD24)
                                                    {
                                                        if (NP2_BEGTIME > GRAVEYARD24)
                                                            iTimeMinTemp3 = NP2_BEGTIME - GRAVEYARD24;
                                                        else
                                                            iTimeMinTemp3 = NP2_BEGTIME;

                                                        if (NP2_ENDTIME > GRAVEYARD24)
                                                            iTimeMinTemp4 = NP2_ENDTIME - GRAVEYARD24;
                                                        else
                                                            iTimeMinTemp4 = NP2_ENDTIME;

                                                        if (iTimeMinTemp4 < iTimeMinTemp3)
                                                            iTimeMinTemp3 = 0;

                                                        iOTTemp = (iTimeMinTemp3 > iOTStartMin) ? iTimeMinTemp3 : iOTStartMin;
                                                        iOTTemp2 = (iTimeMinTemp4 < iOTEndMin) ? iTimeMinTemp4 : iOTEndMin;
                                                        iTimeMinTemp = (iTimeMinTemp2 < iCompTimeIn1Min) ? iTimeMinTemp2 : iCompTimeIn1Min;
                                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iConvTimeIn1Min, iTimeMinTemp);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeIn1Min, iTimeMinTemp, NDFRACTION, HourType.NDOTHour);
                                                        #endregion
                                                    }
                                                    #endregion
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region Computed Overtime Night Premium (Normal)
                                                if (bIsGraveyard) //Graveyard shift
                                                {
                                                    //[NDOTHr = Get NDOT between 22:00/ConvertedIn1 to ComputedIn1]
                                                    iTimeMinTemp = (NIGHTDIFFGRAVEYARDSTART > iConvTimeIn1Min) ? NIGHTDIFFGRAVEYARDSTART : iConvTimeIn1Min;
                                                    iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTimeMinTemp, iCompTimeIn1Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTimeMinTemp, iCompTimeIn1Min, NDFRACTION, HourType.NDOTHour);
                                                    #endregion

                                                    //[NDOTHr = Get NDOT between ComputedOut2 to 30:00/ConvertedOut2]
                                                    iTimeMinTemp = (iConvTimeOut2Min < NIGHTDIFFGRAVEYARDEND) ? iConvTimeOut2Min : NIGHTDIFFGRAVEYARDEND;
                                                    iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iCompTimeOut2Min, iTimeMinTemp);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iCompTimeOut2Min, iTimeMinTemp, NDFRACTION, HourType.NDOTHour);
                                                    #endregion
                                                }
                                                else
                                                {
                                                    if (bNDCount) //HOYA
                                                    {
                                                        //[NDOTHr = Get NDOT between ConvertedIn1 to 06:00/ComputedIn1]
                                                        iTimeMinTemp = (NIGHTDIFFAMEND < iCompTimeIn1Min) ? NIGHTDIFFAMEND : iCompTimeIn1Min;
                                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iConvTimeIn1Min, iTimeMinTemp);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iConvTimeIn1Min, iTimeMinTemp, NDFRACTION, HourType.NDOTHour);
                                                        #endregion
                                                    }
                                                    //[NDOTHr = Get NDOT between 22:00/ComputedOut2 to ConvertedOut2]
                                                    iTimeMinTemp  = (iCompTimeOut2Min > NIGHTDIFFGRAVEYARDSTART) ? iCompTimeOut2Min : NIGHTDIFFGRAVEYARDSTART;
                                                    iTimeMinTemp2 = (iOTEndMin > NIGHTDIFFGRAVEYARDEND) ? NIGHTDIFFGRAVEYARDEND : iOTEndMin;
                                                    iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iTimeMinTemp2, iTimeMinTemp, iConvTimeOut2Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iOTStartMin, iTimeMinTemp2, iTimeMinTemp, iConvTimeOut2Min, NDFRACTION, HourType.NDOTHour);
                                                    #endregion
                                                }
                                                #endregion
                                            }
                                        }
                                    }
                                    #endregion

                                    if (NDBRCKTCNT == 2)
                                    {
                                        #region Computed Regular Night Premium for Regular Day (Sharp)
                                        if (!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode //Regular Day
                                            && (dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"] == DBNull.Value //Assumed Postback flag is NULL or not equal to T
                                                    || dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString().Equals("T") == false))
                                        {
                                            //COMPUTED REGULAR NIGHT PREMIUM MIN
                                            if ((iConvTimeIn1Min > 0 && iConvTimeOut2Min > 0 && iConvTimeIn1Min <= iShiftTimeOut1Min && iConvTimeOut2Min >= iShiftTimeIn2Min)
                                                //|| (iConvTimeIn1Min > 0 && iConvTimeOut1Min > 0 && iConvTimeOut1Min >= iShiftTimeIn2Min)
                                                //|| (iConvTimeIn2Min > 0 && iConvTimeOut2Min > 0 && iConvTimeIn2Min <= iShiftTimeIn2Min)
                                                    ) //Condition to meet paid break
                                            {
                                                #region ND Bracket 1
                                                iCompRegNightPremMin += GetOTHoursInMinutes(NP1_BEGTIME, NP1_ENDTIME, iCompTimeIn1Min, iCompTimeOut1Min);
                                                #region Insert ND Hour to Hour Fraction Table
                                                InsertNDToHourFractionTable(NP1_BEGTIME, NP1_ENDTIME, iCompTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDHour);
                                                #endregion

                                                iCompRegNightPremMin += GetOTHoursInMinutes(NP1_BEGTIME, NP1_ENDTIME, iCompTimeIn2Min, iCompTimeOut2Min);
                                                #region Insert ND Hour to Hour Fraction Table
                                                InsertNDToHourFractionTable(NP1_BEGTIME, NP1_ENDTIME, iCompTimeIn2Min, iCompTimeOut2Min, NDFRACTION, HourType.NDHour);
                                                #endregion

                                                //Break between shifts
                                                iPaidBreak = GetOTHoursInMinutes(iShiftTimeOut1Min, iShiftTimeIn2Min, iCompTimeIn1Min, iCompTimeOut2Min);
                                                if (iMasterPaidBreak > 0 && iPaidBreak <= iMasterPaidBreak) //Must not exceed the set paid break
                                                {
                                                    iTimeMinTemp = (iCompTimeIn1Min > iCompTimeOut1Min) ? iCompTimeIn1Min : iCompTimeOut1Min;
                                                    iCompRegNightPremMin += GetOTHoursInMinutes(NP1_BEGTIME, NP1_ENDTIME, iTimeMinTemp, iCompTimeIn2Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(NP1_BEGTIME, NP1_ENDTIME, iTimeMinTemp, iCompTimeIn2Min, NDFRACTION, HourType.NDHour);
                                                    #endregion
                                                }
                                                #endregion

                                                #region ND Bracket 1 (Early ND)
                                                if (NP1_ENDTIME < NP1_BEGTIME
                                                    || NP1_BEGTIME > GRAVEYARD24
                                                    || NP1_ENDTIME > GRAVEYARD24)
                                                {
                                                    if (NP1_BEGTIME > GRAVEYARD24)
                                                        iTimeMinTemp3 = NP1_BEGTIME - GRAVEYARD24;
                                                    else
                                                        iTimeMinTemp3 = NP1_BEGTIME;

                                                    if (NP1_ENDTIME > GRAVEYARD24)
                                                        iTimeMinTemp4 = NP1_ENDTIME - GRAVEYARD24;
                                                    else
                                                        iTimeMinTemp4 = NP1_ENDTIME;

                                                    if (iTimeMinTemp4 < iTimeMinTemp3)
                                                        iTimeMinTemp3 = 0;

                                                    iCompRegNightPremMin += GetOTHoursInMinutes(iTimeMinTemp3, iTimeMinTemp4, iCompTimeIn1Min, iCompTimeOut1Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iTimeMinTemp3, iTimeMinTemp4, iCompTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDHour);
                                                    #endregion

                                                    iCompRegNightPremMin += GetOTHoursInMinutes(iTimeMinTemp3, iTimeMinTemp4, iCompTimeIn2Min, iCompTimeOut2Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iTimeMinTemp3, iTimeMinTemp4, iCompTimeIn2Min, iCompTimeOut2Min, NDFRACTION, HourType.NDHour);
                                                    #endregion
                                                }
                                                #endregion

                                                #region ND Bracket 2
                                                iCompOvertimeNightPremMin += GetOTHoursInMinutes(NP2_BEGTIME, NP2_ENDTIME, iCompTimeIn1Min, iCompTimeOut1Min);
                                                #region Insert ND Hour to Hour Fraction Table
                                                InsertNDToHourFractionTable(NP2_BEGTIME, NP2_ENDTIME, iCompTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDOTHour);
                                                #endregion

                                                iCompOvertimeNightPremMin += GetOTHoursInMinutes(NP2_BEGTIME, NP2_ENDTIME, iCompTimeIn2Min, iCompTimeOut2Min);
                                                #region Insert ND Hour to Hour Fraction Table
                                                InsertNDToHourFractionTable(NP2_BEGTIME, NP2_ENDTIME, iCompTimeIn2Min, iCompTimeOut2Min, NDFRACTION, HourType.NDOTHour);
                                                #endregion

                                                //Break between shifts
                                                iPaidBreak = GetOTHoursInMinutes(iShiftTimeOut1Min, iShiftTimeIn2Min, iCompTimeIn1Min, iCompTimeOut2Min);
                                                if (iMasterPaidBreak > 0 && iPaidBreak <= iMasterPaidBreak) //Must not exceed the set paid break
                                                {
                                                    iTimeMinTemp = (iCompTimeIn1Min > iCompTimeOut1Min) ? iCompTimeIn1Min : iCompTimeOut1Min;
                                                    iCompOvertimeNightPremMin += GetOTHoursInMinutes(NP2_BEGTIME, NP2_ENDTIME, iTimeMinTemp, iCompTimeIn2Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(NP2_BEGTIME, NP2_ENDTIME, iTimeMinTemp, iCompTimeIn2Min, NDFRACTION, HourType.NDOTHour);
                                                    #endregion
                                                }
                                                #endregion

                                                #region ND Bracket 2 (Early ND)
                                                if (NP2_ENDTIME < NP2_BEGTIME
                                                    || NP2_BEGTIME > GRAVEYARD24
                                                    || NP2_ENDTIME > GRAVEYARD24)
                                                {
                                                    if (NP2_BEGTIME > GRAVEYARD24)
                                                        iTimeMinTemp3 = NP2_BEGTIME - GRAVEYARD24;
                                                    else
                                                        iTimeMinTemp3 = NP2_BEGTIME;

                                                    if (NP2_ENDTIME > GRAVEYARD24)
                                                        iTimeMinTemp4 = NP2_ENDTIME - GRAVEYARD24;
                                                    else
                                                        iTimeMinTemp4 = NP2_ENDTIME;

                                                    if (iTimeMinTemp4 < iTimeMinTemp3)
                                                        iTimeMinTemp3 = 0;

                                                    iCompOvertimeNightPremMin += GetOTHoursInMinutes(iTimeMinTemp3, iTimeMinTemp4, iCompTimeIn1Min, iCompTimeOut1Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iTimeMinTemp3, iTimeMinTemp4, iCompTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDOTHour);
                                                    #endregion

                                                    iCompOvertimeNightPremMin += GetOTHoursInMinutes(iTimeMinTemp3, iTimeMinTemp4, iCompTimeIn2Min, iCompTimeOut2Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(iTimeMinTemp3, iTimeMinTemp4, iCompTimeIn2Min, iCompTimeOut2Min, NDFRACTION, HourType.NDOTHour);
                                                    #endregion
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                iTimeMinTemp  = (iCompTimeIn1Min > 0) ? iCompTimeIn1Min : iCompTimeIn2Min;
                                                iTimeMinTemp2 = (iCompTimeOut2Min > 0) ? iCompTimeOut2Min : iCompTimeOut1Min;
                                                if (iTimeMinTemp > 0 && iTimeMinTemp2 > 0)
                                                {
                                                    #region ND Bracket 1
                                                    iCompRegNightPremMin += GetOTHoursInMinutes(NP1_BEGTIME, NP1_ENDTIME, iTimeMinTemp, iTimeMinTemp2);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(NP1_BEGTIME, NP1_ENDTIME, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                    #endregion
                                                    #endregion

                                                    #region ND Bracket 1 (Early ND)
                                                    if (NP1_ENDTIME < NP1_BEGTIME
                                                        || NP1_BEGTIME > GRAVEYARD24
                                                        || NP1_ENDTIME > GRAVEYARD24)
                                                    {
                                                        if (NP1_BEGTIME > GRAVEYARD24)
                                                            iTimeMinTemp3 = NP1_BEGTIME - GRAVEYARD24;
                                                        else
                                                            iTimeMinTemp3 = NP1_BEGTIME;

                                                        if (NP1_ENDTIME > GRAVEYARD24)
                                                            iTimeMinTemp4 = NP1_ENDTIME - GRAVEYARD24;
                                                        else
                                                            iTimeMinTemp4 = NP1_ENDTIME;

                                                        if (iTimeMinTemp4 < iTimeMinTemp3)
                                                            iTimeMinTemp3 = 0;

                                                        iCompRegNightPremMin += GetOTHoursInMinutes(iTimeMinTemp3, iTimeMinTemp4, iTimeMinTemp, iTimeMinTemp2);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iTimeMinTemp3, iTimeMinTemp4, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                        #endregion
                                                    }
                                                    #endregion

                                                    #region ND Bracket 2
                                                    iCompOvertimeNightPremMin += GetOTHoursInMinutes(NP2_BEGTIME, NP2_ENDTIME, iTimeMinTemp, iTimeMinTemp2);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(NP2_BEGTIME, NP2_ENDTIME, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                                    #endregion
                                                    #endregion

                                                    #region ND Bracket 2 (Early ND)
                                                    if (NP2_ENDTIME < NP2_BEGTIME
                                                        || NP2_BEGTIME > GRAVEYARD24
                                                        || NP2_ENDTIME > GRAVEYARD24)
                                                    {
                                                        if (NP2_BEGTIME > GRAVEYARD24)
                                                            iTimeMinTemp3 = NP2_BEGTIME - GRAVEYARD24;
                                                        else
                                                            iTimeMinTemp3 = NP2_BEGTIME;

                                                        if (NP2_ENDTIME > GRAVEYARD24)
                                                            iTimeMinTemp4 = NP2_ENDTIME - GRAVEYARD24;
                                                        else
                                                            iTimeMinTemp4 = NP2_ENDTIME;

                                                        if (iTimeMinTemp4 < iTimeMinTemp3)
                                                            iTimeMinTemp3 = 0;

                                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iTimeMinTemp3, iTimeMinTemp4, iTimeMinTemp, iTimeMinTemp2);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(iTimeMinTemp3, iTimeMinTemp4, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                                        #endregion
                                                    }
                                                    #endregion
                                                }
                                            }
                                        }
                                        #endregion

                                        #region NDFraction Filter (Sharp)
                                        iCompRegNightPremMin      = Convert.ToInt32((iCompRegNightPremMin / iNDFraction)) * iNDFraction;
                                        iCompOvertimeNightPremMin = Convert.ToInt32((iCompOvertimeNightPremMin / iNDFraction)) * iNDFraction;
                                        #endregion
                                    }
                                    else
                                    {
                                        #region Computed Regular Night Premium for Regular Day (Normal)
                                        if (!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode //Regular Day
                                            && (bNDCount || bIsGraveyard == true) //NDREGSHIFT flag is true / graveyard shift
                                            && (dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"] == DBNull.Value //Assumed Postback flag is NULL or not equal to T
                                                    || dtEmpTimeRegister.Rows[i]["Ttr_AssumedPost"].ToString().Equals("T") == false))
                                        {
                                            //COMPUTED REGULAR NIGHT PREMIUM MIN
                                            if ((iConvTimeIn1Min > 0 && iConvTimeOut2Min > 0 && iConvTimeIn1Min <= iShiftTimeOut1Min && iConvTimeOut2Min >= iShiftTimeIn2Min)
                                                //|| (iConvTimeIn1Min > 0 && iConvTimeOut1Min > 0 && iConvTimeOut1Min >= iShiftTimeIn2Min)
                                                //|| (iConvTimeIn2Min > 0 && iConvTimeOut2Min > 0 && iConvTimeIn2Min <= iShiftTimeIn2Min)
                                                    ) //Condition to meet paid break
                                            {
                                                if (bNDCount && !bIsGraveyard) //HOYA
                                                {
                                                    iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iCompTimeIn1Min, iCompTimeOut1Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iCompTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDHour);
                                                    #endregion

                                                    iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iCompTimeIn2Min, iCompTimeOut2Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iCompTimeIn2Min, iCompTimeOut2Min, NDFRACTION, HourType.NDHour);
                                                    #endregion
                                                }
                                                iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iCompTimeIn1Min, iCompTimeOut1Min);
                                                #region Insert ND Hour to Hour Fraction Table
                                                InsertNDToHourFractionTable(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iCompTimeIn1Min, iCompTimeOut1Min, NDFRACTION, HourType.NDHour);
                                                #endregion

                                                iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iCompTimeIn2Min, iCompTimeOut2Min);
                                                #region Insert ND Hour to Hour Fraction Table
                                                InsertNDToHourFractionTable(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iCompTimeIn2Min, iCompTimeOut2Min, NDFRACTION, HourType.NDHour);
                                                #endregion

                                                //Break between shifts
                                                iPaidBreak = GetOTHoursInMinutes(iShiftTimeOut1Min, iShiftTimeIn2Min, iCompTimeIn1Min, iCompTimeOut2Min);
                                                if ((iMasterPaidBreak > 0 && iPaidBreak <= iMasterPaidBreak) //Must not exceed the set paid break
                                                    || Convert.ToBoolean(NDCNTBREAK) == true) //NDCNTBREAK for regular days
                                                {
                                                    iTimeMinTemp = (iCompTimeIn1Min > iCompTimeOut1Min) ? iCompTimeIn1Min : iCompTimeOut1Min;
                                                    if (bNDCount) //HOYA
                                                    {
                                                        iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iTimeMinTemp, iCompTimeIn2Min);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iTimeMinTemp, iCompTimeIn2Min, NDFRACTION, HourType.NDHour);
                                                        #endregion
                                                    }
                                                    iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iTimeMinTemp, iCompTimeIn2Min);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iTimeMinTemp, iCompTimeIn2Min, NDFRACTION, HourType.NDHour);
                                                    #endregion
                                                }
                                            }
                                            else
                                            {
                                                iTimeMinTemp  = (iCompTimeIn1Min > 0) ? iCompTimeIn1Min : iCompTimeIn2Min;
                                                iTimeMinTemp2 = (iCompTimeOut2Min > 0) ? iCompTimeOut2Min : iCompTimeOut1Min;
                                                if (iTimeMinTemp > 0 && iTimeMinTemp2 > 0)
                                                {
                                                    if (bNDCount && !bIsGraveyard) //HOYA
                                                    {
                                                        iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iTimeMinTemp, iTimeMinTemp2);
                                                        #region Insert ND Hour to Hour Fraction Table
                                                        InsertNDToHourFractionTable(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                        #endregion
                                                    }

                                                    iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iTimeMinTemp, iTimeMinTemp2);
                                                    #region Insert ND Hour to Hour Fraction Table
                                                    InsertNDToHourFractionTable(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                                    #endregion
                                                }
                                            }
                                        }
                                        #endregion

                                        #region NDFraction Filter (Normal)
                                        iCompRegNightPremMin      = Convert.ToInt32((iCompRegNightPremMin / iNDFraction)) * iNDFraction;
                                        iCompOvertimeNightPremMin = Convert.ToInt32((iCompOvertimeNightPremMin / iNDFraction)) * iNDFraction;
                                        ////HOYA
                                        if (Convert.ToBoolean(NDALL)) //&& (bIsRestDay || bIsHoliday))) //Commented (10/6/2015)
                                        {
                                            iNDSum = iCompRegNightPremMin + iCompOvertimeNightPremMin;
                                            if (iNDSum > 8 * 60)
                                            {
                                                iCompRegNightPremMin      = 8 * 60; //ND hours is set to 8 hours
                                                iCompOvertimeNightPremMin = iNDSum - iCompRegNightPremMin; //excess 8 hours is set to NDOT hours
                                            }
                                            else
                                            {
                                                iCompRegNightPremMin      = iNDSum; //all ND and NDOT hours to ND premium
                                                iCompOvertimeNightPremMin = 0; //no NDOT hours
                                            }
                                        }
                                        #endregion
                                    }
                                    #endregion

                                    #region Computed Day Work Minutes for Restday or Holiday
                                    if (bIsRestDay || bIsHoliday || !bIsRegOrReg5DayCode || strDayCode.Equals("REGA"))
                                    {
                                        //Overtime Hour is Pre-added with Paid Break Hours
                                        if (iComputedOvertimeMin > 0)
                                            iComputedOvertimeMin += iPaidBreak;
                                        //COMPUTED DAY WORK MIN
                                        iComputedDayWorkMin = iComputedOvertimeMin;
                                        //COMPUTED REGULAR MIN
                                        iComputedRegularMin = (iComputedDayWorkMin > iShiftMin) ? iShiftMin : iComputedDayWorkMin;
                                        //COMPUTED OVERTIME MIN
                                        iComputedOvertimeMin = (iComputedOvertimeMin > iShiftMin) ? iComputedOvertimeMin - iShiftMin : 0;

                                        #region Re-evaluate Absent Minutes (in case of holidays)
                                        iComputedLateMin            = 0;
                                        iComputedLate2Min           = 0;
                                        iComputedUndertime1Min      = 0;
                                        iComputedUndertime2Min      = 0;

                                        if (bDailiesNoWorkNoPay == false) //Legal Holiday, Company Holiday, etc
                                        {
                                            iInitialAbsentMin       = 0;
                                            iComputedAbsentMin      = 0;
                                            iNoPayLeaveMin          = 0;
                                            iTotalComputedAbsentMin = 0;
                                        }
                                        else  //SPL, CMPY and PSD (Dailies)
                                        {
                                            #region Compute Deduction Minutes
                                            //Computed Absent Min
                                            if (iComputedRegularMin > 0 && iShiftMin - iComputedRegularMin > 0)
                                            {
                                                iComputedAbsentMin = iShiftMin - iComputedRegularMin;
                                            }
                                            else if (iComputedRegularMin == 0)
                                            {
                                                iComputedAbsentMin = iShiftMin;

                                                //Zero-out Actual Late and Undertime because employee has no worked hours
                                                iActualLate1Mins = 0;
                                                iActualLate2Mins = 0;
                                                iActualUT1Mins   = 0;
                                                iActualUT2Mins   = 0;
                                            }
                                            else
                                            {
                                                iComputedAbsentMin = 0;
                                            }

                                            //Cleanup Paid Leave
                                            if (iPayLeaveMin > 0)
                                            {
                                                //Just in case the leave hours filed is greater than the shift hours
                                                if (iShiftMin - iPayLeaveMin < 0)
                                                    iPayLeaveMin = iShiftMin;

                                                if (iPayLeaveMin <= iComputedAbsentMin)
                                                {
                                                    iComputedAbsentMin -= iPayLeaveMin;
                                                    iComputedDayWorkMin += iPayLeaveMin;
                                                }
                                                else
                                                {
                                                    if (Convert.ToBoolean(FLEXSHIFT) == true && Convert.ToBoolean(EXTREGLVE) == false)
                                                    {
                                                        iComputedRegularMin = iShiftMin - iPayLeaveMin;
                                                        iComputedDayWorkMin = iShiftMin;
                                                    }
                                                    else
                                                    {
                                                        iPayLeaveMin = iComputedAbsentMin;
                                                        iComputedDayWorkMin += iComputedAbsentMin;
                                                    }

                                                    iComputedAbsentMin = 0;
                                                    iInitialAbsentMin = 0;
                                                }
                                            }

                                            //Cleanup Unpaid Leave
                                            if (iNoPayLeaveMin > 0)
                                            {
                                                //Just in case the leave hours filed is greater than the shift hours
                                                if (iShiftMin - iNoPayLeaveMin < 0)
                                                    iNoPayLeaveMin = iShiftMin;

                                                if (iNoPayLeaveMin > iComputedAbsentMin)
                                                {
                                                    if (Convert.ToBoolean(FLEXSHIFT) == true && Convert.ToBoolean(EXTREGULVE) == false)
                                                    {
                                                        iComputedRegularMin = iShiftMin - iNoPayLeaveMin;
                                                        iComputedDayWorkMin = iComputedRegularMin;
                                                    }
                                                    else
                                                    {
                                                        iNoPayLeaveMin = iComputedAbsentMin;
                                                    }
                                                }

                                                iInitialAbsentMin = 0;
                                                iComputedAbsentMin = 0;
                                            }

                                            //Total Absent Minutes for Holidays
                                            iTotalComputedAbsentMin = iComputedAbsentMin + iNoPayLeaveMin;
                                            #endregion
                                        }
                                        #endregion
                                    }
                                    else
                                        iComputedDayWorkMin += iComputedOvertimeMin;
                                    #endregion

                                    #region //Offset Hours Checking
                                    //if (Convert.ToBoolean(TKOFFSET))
                                    //{
                                    //    iAccumulatedMins = 0;
                                    //    drArrOffsetApp = dtOffsetTable.Select("Eof_OffsetDate = '" + strProcessDate + "'");
                                    //    //loop to sum all accumulated hours
                                    //    foreach (DataRow drOffset in drArrOffsetApp)
                                    //    {
                                    //        iAccumulatedMins += Convert.ToInt32(drOffset["Eof_ActualAccumulatedMin"]);
                                    //    }

                                    //    if (drArrOffsetApp.Length > 0) // && iComputedRegularMin + iAccumulatedMins >= iShiftMin)
                                    //    {
                                    //        //offset applications valid
                                    //        //loop to get actual offset hours
                                    //        iExcessOffset = 0;
                                    //        iForOffsetMin = 0;
                                    //        foreach (DataRow drOffset in drArrOffsetApp)
                                    //        {
                                    //            iAccumulatedMins = Convert.ToInt32(drOffset["Eof_ActualAccumulatedMin"]);
                                    //            if ((iComputedRegularMin + iAccumulatedMins) - iShiftMin > 0)
                                    //            {
                                    //                iExcessOffset += (iComputedRegularMin + iAccumulatedMins) - iShiftMin;
                                    //                iForOffsetMin += iShiftMin - iComputedRegularMin;
                                    //                iComputedRegularMin = iShiftMin;
                                    //                iComputedDayWorkMin = iShiftMin;
                                    //                drOffset["Eof_ActualOffsetMin"] = iShiftMin - iComputedRegularMin;
                                    //                UpdateOffsetHours(drOffset["Eof_CurrentPayPeriod"].ToString(), drOffset["Eof_EmployeeId"].ToString(), drOffset["Eof_SeqNo"].ToString(), drOffset["Eof_OffsetDate"].ToString(), iShiftMin - iComputedRegularMin, LoginUser);
                                    //            }
                                    //            else
                                    //            {
                                    //                iForOffsetMin += iAccumulatedMins;
                                    //                iComputedRegularMin += iAccumulatedMins;
                                    //                iComputedDayWorkMin += iAccumulatedMins;
                                    //                drOffset["Eof_ActualOffsetMin"] = iAccumulatedMins;
                                    //                UpdateOffsetHours(drOffset["Eof_CurrentPayPeriod"].ToString(), drOffset["Eof_EmployeeId"].ToString(), drOffset["Eof_SeqNo"].ToString(), drOffset["Eof_OffsetDate"].ToString(), iAccumulatedMins, LoginUser);
                                    //            }
                                    //        }
                                    //    }
                                    //}
                                    #endregion

                                    #region Overtime with OB Computation
                                    //if (Convert.ToBoolean(OBCOMPOT)) 
                                    //{
                                    bCountOTFraction = false;
                                    if (Convert.ToBoolean(OTRNDFRAC) == true
                                            && (Convert.ToInt32(iShiftTimeOut1Min / iOTFraction) * iOTFraction == iShiftTimeOut1Min
                                                || Convert.ToInt32(iShiftTimeIn2Min / iOTFraction) * iOTFraction == iShiftTimeIn2Min))
                                        bCountOTFraction = true;

                                    iAdvOTMin = 0;
                                    iTimeMinTemp = 0;
                                    iTimeMinTemp2 = 0;
                                    ComputeOvertimeForOBEx(curEmployeeID, strProcessDate
                                                            , iShiftTimeIn1Min, iShiftTimeOut1Min, iShiftTimeIn2Min, iShiftTimeOut2Min
                                                            , ref iAdvOTMin, ref iTimeMinTemp, ref iTimeMinTemp2
                                                            , strDayCode, (bIsRestDay || bIsHoliday || !bIsRegOrReg5DayCode), bIsGraveyard && !bOverrideGraveyardConv
                                                            , bCountOTFraction, iOTFraction, iNDFraction, iMasterPaidBreak, true
                                                            , drArrOTApproved, bNDCount);

                                    iComputedOvertimeMin += iAdvOTMin;
                                    iCompRegNightPremMin += iTimeMinTemp;
                                    iCompOvertimeNightPremMin += iTimeMinTemp2;
                                    if (bIsRestDay || bIsHoliday || !bIsRegOrReg5DayCode || strDayCode.Equals("REGA")) //if restday/holiday, re-evaluate..
                                    {
                                        //COMPUTED DAY WORK MIN
                                        iComputedDayWorkMin = iComputedRegularMin + iComputedOvertimeMin;
                                        //COMPUTED REGULAR MIN
                                        iComputedRegularMin = (iComputedDayWorkMin > iShiftMin) ? iShiftMin : iComputedDayWorkMin;
                                        //COMPUTED OVERTIME MIN
                                        iComputedOvertimeMin = (iComputedDayWorkMin > iShiftMin) ? iComputedDayWorkMin - iShiftMin : 0;
                                    }
                                    //}
                                    #endregion

                                    #endregion
                                }

                                #region Offset Absence Checking
                                if (strDayCode.Equals("REGA"))
                                {
                                    #region COZO
                                    iComputedLateMin        = 0;
                                    iComputedLate2Min       = 0;
                                    iComputedUndertime1Min  = 0;
                                    iComputedUndertime2Min  = 0;
                                    iInitialAbsentMin       = 0;
                                    iComputedAbsentMin      = 0;
                                    iTotalComputedAbsentMin = 0;
                                    #endregion
                                }
                                else if (Convert.ToBoolean(OTOFSETABS) && iTotalComputedAbsentMin > 0)
                                {
                                    #region HOGP (Overtime offsets Absence)
                                    if (iComputedOvertimeMin > 0)
                                    {
                                        if (iTotalComputedAbsentMin >= iComputedOvertimeMin)
                                        {
                                            //COMPUTED REGULAR MIN
                                            iComputedRegularMin += iComputedOvertimeMin;
                                            iComputedDayWorkMin = iComputedRegularMin;
                                            iComputedRegularMin = (iComputedDayWorkMin > iShiftMin) ? iShiftMin : iComputedDayWorkMin;
                                            //COMPUTED OVERTIME MIN
                                            iTimeMinTemp = iComputedOvertimeMin;
                                            iComputedOvertimeMin = (iComputedDayWorkMin > iShiftMin) ? iComputedDayWorkMin - iShiftMin : 0;
                                            //COMPUTED ABSENT MIN
                                            iTotalComputedAbsentMin -= iTimeMinTemp;
                                            //OFFSET OVERTIME MIN
                                            iOffsetOvertimeMin = iTimeMinTemp;

                                            #region Subtract absent details
                                            //Subtract absent details
                                            ///Whole-day Absent
                                            if (iInitialAbsentMin > 0 && iTimeMinTemp > 0)
                                            {
                                                if (iInitialAbsentMin == iTimeMinTemp)
                                                {
                                                    iTimeMinTemp -= iInitialAbsentMin;
                                                    iInitialAbsentMin = 0;
                                                }
                                            }
                                            ///Unpaid Leave
                                            if (iNoPayLeaveMin > 0 && iTimeMinTemp > 0)
                                            {
                                                if (iNoPayLeaveMin <= iTimeMinTemp)
                                                {
                                                    iTimeMinTemp -= iNoPayLeaveMin;
                                                    iNoPayLeaveMin = 0;
                                                }
                                                else
                                                {
                                                    iNoPayLeaveMin -= iTimeMinTemp;
                                                    iTimeMinTemp = 0;
                                                }
                                            }
                                            ///Late AM
                                            if (iComputedLateMin > 0 && iTimeMinTemp > 0)
                                            {
                                                if (iComputedLateMin <= iTimeMinTemp)
                                                {
                                                    iTimeMinTemp -= iComputedLateMin;
                                                    iComputedLateMin = 0;
                                                }
                                                else
                                                {
                                                    iComputedLateMin -= iTimeMinTemp;
                                                    iTimeMinTemp = 0;
                                                }
                                            }
                                            ///Late PM
                                            if (iComputedLate2Min > 0 && iTimeMinTemp > 0)
                                            {
                                                if (iComputedLate2Min <= iTimeMinTemp)
                                                {
                                                    iTimeMinTemp -= iComputedLate2Min;
                                                    iComputedLate2Min = 0;
                                                }
                                                else
                                                {
                                                    iComputedLate2Min -= iTimeMinTemp;
                                                    iTimeMinTemp = 0;
                                                }
                                            }
                                            ///Undertime AM
                                            if (iComputedUndertime1Min > 0 && iTimeMinTemp > 0)
                                            {
                                                if (iComputedUndertime1Min <= iTimeMinTemp)
                                                {
                                                    iTimeMinTemp -= iComputedUndertime1Min;
                                                    iComputedUndertime1Min = 0;
                                                }
                                                else
                                                {
                                                    iComputedUndertime1Min -= iTimeMinTemp;
                                                    iTimeMinTemp = 0;
                                                }
                                            }
                                            ///Undertime PM
                                            if (iComputedUndertime2Min > 0 && iTimeMinTemp > 0)
                                            {
                                                if (iComputedUndertime2Min <= iTimeMinTemp)
                                                {
                                                    iTimeMinTemp -= iComputedUndertime2Min;
                                                    iComputedUndertime2Min = 0;
                                                }
                                                else
                                                {
                                                    iComputedUndertime2Min -= iTimeMinTemp;
                                                    iTimeMinTemp = 0;
                                                }
                                            }
                                            #endregion
                                        }
                                        else
                                        {
                                            //COMPUTED OVERTIME MIN
                                            iComputedOvertimeMin -= iTotalComputedAbsentMin;
                                            //COMPUTED REGULAR MIN
                                            if (iComputedRegularMin + iTotalComputedAbsentMin <= iShiftMin)
                                                iComputedRegularMin += iTotalComputedAbsentMin;
                                            //OFFSET OVERTIME MIN
                                            iOffsetOvertimeMin = iTotalComputedAbsentMin;
                                            //COMPUTED DAY WORK MIN
                                            iComputedDayWorkMin = iComputedRegularMin + iComputedOvertimeMin;
                                            //COMPUTED ABSENT MIN
                                            iComputedLateMin        = 0;
                                            iComputedLate2Min       = 0;
                                            iComputedUndertime1Min  = 0;
                                            iComputedUndertime2Min  = 0;
                                            iInitialAbsentMin       = 0;
                                            iComputedAbsentMin      = 0;
                                            iTotalComputedAbsentMin = 0;
                                            iNoPayLeaveMin          = 0;
                                        }
                                    }
                                    #endregion
                                }
                                #endregion

                                #region Checking of Minimum OT Hour
                                if ((bIsRestDay || bIsHoliday || !bIsRegOrReg5DayCode) && bDailiesNoWorkNoPay == false) //Rest day or holiday
                                {
                                    if (iComputedRegularMin + iComputedOvertimeMin < OTMINHR_NONREG * 60)
                                    {
                                        iComputedRegularMin  = 0;
                                        iComputedOvertimeMin = 0;
                                        iComputedDayWorkMin  = 0;
                                    }
                                }
                                else if (iComputedOvertimeMin < OTMINHR_REG * 60)
                                {
                                    iComputedDayWorkMin -= iComputedOvertimeMin;
                                    iComputedOvertimeMin = 0;
                                }
                                #endregion

                                #region Checking of Minimum ND Hour  

                                if ((bIsRestDay || bIsHoliday || !bIsRegOrReg5DayCode) && bDailiesNoWorkNoPay == false) //Rest day or holiday
                                {
                                    if (iCompRegNightPremMin + iCompOvertimeNightPremMin < NDMINHR_NONREG * 60)
                                    {
                                        iCompRegNightPremMin = 0;
                                        iCompOvertimeNightPremMin = 0;
                                    }
                                }
                                else if (iCompRegNightPremMin + iCompOvertimeNightPremMin < NDMINHR_REG * 60)
                                {
                                    iCompRegNightPremMin = 0;
                                    iCompOvertimeNightPremMin = 0;
                                }
                                #endregion

                                #region No Absent for New Hirees
                                //DASH
                                if (bIsNewHire && Convert.ToBoolean(NOABSNWHRE))
                                {
                                    iComputedLateMin        = 0;
                                    iComputedLate2Min       = 0;
                                    iComputedUndertime1Min  = 0;
                                    iComputedUndertime2Min  = 0;
                                    iInitialAbsentMin       = 0;
                                    iComputedAbsentMin      = 0;
                                    iNoPayLeaveMin          = 0;
                                    iTotalComputedAbsentMin = 0;
                                }
                                #endregion

                                #region Holiday Previous Day Processing
                                dtEmpTimeRegister.Rows[i]["Ttr_PrvDayHolRef"]       = DBNull.Value;
                                dtEmpTimeRegister.Rows[i]["Ttr_PrvDayWorkMin"]      = 0;
                                dtEmpTimeRegister.Rows[i]["Ttr_PDRESTLEGHOLDay"]    = 0;
                                dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]          = 0;
                                drArrPrevDay = dtHolidays.Select(string.Format("Thl_CompanyCode = '{0}' AND Thl_HolidayDate = '{1}' AND (Thl_LocationCode = 'ALL' OR Thl_LocationCode = '{2}')", companyCode, Convert.ToDateTime(dtEmpTimeRegister.Rows[i]["Ttr_Date"]), dtEmpTimeRegister.Rows[i]["Ttr_WorkLocationCode"]));
                                //drArrPrevDay = dtHolidays.Select(string.Format("Thl_CompanyCode = '{0}' AND Thl_HolidayDate = '{1}' AND (Thl_LocationCode = 'ALL' OR Thl_LocationCode = '{2}')", companyCode, dtEmpTimeRegister.Rows[i]["Ttr_Date"], dtEmpTimeRegister.Rows[i]["Ttr_WorkLocationCode"]));
                                if (drArrPrevDay != null && drArrPrevDay.Length > 0)
                                {
                                    drHol = drArrPrevDay[0];
                                    iHolPrevDayInMin = Convert.ToInt32(Convert.ToDecimal(drHol["Thl_PrevDayHourRequired"].ToString()) * 60);
                                    iDecrement = 1;
                                    bIsFound = false;
                                    do
                                    {
                                        #region Get Previous Day Record
                                        if (Convert.ToDateTime(drHol["Thl_HolidayDate"].ToString()).AddDays(-iDecrement) >= Convert.ToDateTime(PayrollStart))
                                        {
                                            drArrPrevDay = dtEmpTimeRegister.Select("Ttr_IDNo = '" + dtEmpTimeRegister.Rows[i]["Ttr_IDNo"].ToString()
                                                                                            + "' AND Ttr_Date = '" + Convert.ToDateTime(drHol["Thl_HolidayDate"].ToString()).AddDays(-iDecrement).ToString("MM/dd/yyyy") + "'", "");
                                            drPrevDay = drArrPrevDay[0];
                                        }
                                        else
                                        {
                                            drPrevDay = GetHolidayPrevDayHist(dtEmpTimeRegister.Rows[i]["Ttr_IDNo"].ToString()
                                                                                    , Convert.ToDateTime(drHol["Thl_HolidayDate"].ToString()).AddDays(-iDecrement).ToString("MM/dd/yyyy"));
                                        }
                                        #endregion

                                        if (drPrevDay != null
                                            || (bIsNewHire == true && strHireDate != "" && Convert.ToDateTime(strHireDate) >= Convert.ToDateTime(dtEmpTimeRegister.Rows[i]["Ttr_Date"])))
                                        {
                                            #region Previous Day Values
                                            if (drPrevDay == null)
                                            {
                                                strPreviousDayReference = Convert.ToDateTime(drHol["Thl_HolidayDate"].ToString()).AddDays(-iDecrement).ToString("MM/dd/yyyy");
                                                iPrevCompDayWorkMin     = 0;
                                                strPrevDayCode          = "REG";
                                                bPrevRestDay            = false;
                                                strPreviousDayLeaveType = "";
                                            }
                                            else
                                            {
                                                strPreviousDayReference = drPrevDay["Ttr_Date"].ToString();
                                                iPrevCompDayWorkMin     = Convert.ToInt32((Convert.ToDouble(drPrevDay["Ttr_REGHour"]) + Convert.ToDouble(drPrevDay["Ttr_LVHour"]) + Convert.ToDouble(drPrevDay["Ttr_OTHour"])) * 60);
                                                strPrevDayCode          = drPrevDay["Ttr_DayCode"].ToString();
                                                bPrevRestDay            = Convert.ToBoolean(drPrevDay["Ttr_RestDayFlag"]);
                                                strPreviousDayLeaveType = drPrevDay["Ttr_WFNoPayLVCode"].ToString();

                                                #region PrevDay Shift Initialization 
                                                iPrevShiftTimeIn1Min    = GetMinsFromHourStr(drPrevDay["Msh_ShiftIn1"].ToString());
                                                iPrevShiftTimeOut1Min   = GetMinsFromHourStr(drPrevDay["Msh_ShiftOut1"].ToString());
                                                iPrevShiftTimeIn2Min    = GetMinsFromHourStr(drPrevDay["Msh_ShiftIn2"].ToString());
                                                iPrevShiftTimeOut2Min   = GetMinsFromHourStr(drPrevDay["Msh_ShiftOut2"].ToString());
                                                iPrevShiftReducedTimeOut2Min = GetMinsFromHourStr(drPrevDay["Msh_ReducedTimeOut2"].ToString());

                                                //SHIFT TIME IN 2 
                                                if (iPrevShiftTimeIn1Min > iPrevShiftTimeIn2Min)
                                                {
                                                    iPrevShiftTimeIn2Min = ConvertToGraveyardTime(iPrevShiftTimeIn2Min, drPrevDay["Msh_Schedule"].ToString().Equals("G"));
                                                }
                                                //SHIFT TIME OUT 2
                                                if (iPrevShiftTimeIn1Min > iPrevShiftTimeOut2Min)
                                                {
                                                    iPrevShiftTimeOut2Min = ConvertToGraveyardTime(iPrevShiftTimeOut2Min, drPrevDay["Msh_Schedule"].ToString().Equals("G"));
                                                    iPrevShiftReducedTimeOut2Min = ConvertToGraveyardTime(iPrevShiftReducedTimeOut2Min, drPrevDay["Msh_Schedule"].ToString().Equals("G"));
                                                }

                                                if (iPrevShiftReducedTimeOut2Min != 0 && (iHolPrevDayInMin - GetOTHoursInMinutes(iPrevShiftTimeIn1Min, iPrevShiftReducedTimeOut2Min, iPrevShiftTimeIn1Min, iPrevShiftReducedTimeOut2Min)) >= 0)
                                                    iHolPrevDayInMin -= GetOTHoursInMinutes(iPrevShiftTimeIn1Min, iPrevShiftReducedTimeOut2Min, iPrevShiftTimeIn1Min, iPrevShiftReducedTimeOut2Min);
                                                #endregion

                                            }
                                            #endregion

                                            ///COMPARISON OF REGPREVDAY AND ONEPREVDAY:
                                            ///REGPREVDAY   ONEPREVDAY      RESULT
                                            /// TRUE         TRUE        PREVIOUS DAY MUST BE THE NEAREST REGULAR DAY (OVERRIDE ONEPREVDAY CONDITION)
                                            /// FALSE        TRUE        PREVIOUS DAY IS THE DAY PRIOR TO THE HOLIDAY, REGARDLESS IF REGULAR OR REST DAY
                                            /// TRUE         FALSE       PREVIOUS DAY MUST BE THE NEAREST REGULAR DAY
                                            /// FALSE        FALSE       PREVIOUS DAY CAN EITHER BE THE NEAREST REGULAR DAY, OR IF THE COMPUTED HOURS OF THE NEAREST DAY IS EQUAL TO THE PREVIOUS DAY HOUR PARAMETER (DEFAULT)
                                            if ((Convert.ToBoolean(REGPREVDAY) == true && (strPrevDayCode.Substring(0, 3).Equals("REG") || strPrevDayCode.Substring(0, 3).Equals("REGN")))
                                                || (Convert.ToBoolean(REGPREVDAY) == false && (iPrevCompDayWorkMin >= iHolPrevDayInMin || strPrevDayCode.Substring(0, 3).Equals("REG") || strPrevDayCode.Substring(0, 3).Equals("REGN") || (Convert.ToBoolean(ONEPREVDAY) == true && bPrevRestDay))))
                                            {
                                                bIsFound = true; //Found previous day record

                                                if //(strDayCode == "HOL" ||
                                                    (CheckIfExistsInCommaDelString(dtEmpTimeRegister.Rows[i]["Ttr_PayrollType"].ToString(), drHol["Thl_PayrollType"].ToString(), ',') == true
                                                        && CheckIfExistsInCommaDelString(dtEmpTimeRegister.Rows[i]["Ttr_PayrollGroup"].ToString(), drHol["Thl_PayrollGroup"].ToString(), ',') == true
                                                        && CheckIfExistsInCommaDelString(dtEmpTimeRegister.Rows[i]["Ttr_EmploymentStatusCode"].ToString(), drHol["Thl_EmploymentStatus"].ToString(), ',') == true
                                                        && CheckIfExistsInCommaDelString(dtEmpTimeRegister.Rows[i]["Ttr_CalendarGroup"].ToString(), drHol["Thl_CalendarGroup"].ToString(), ',') == true)
                                                    //)
                                                {
                                                    #region Initialize
                                                    iShiftInHours       = iShiftMin / 60;
                                                    iPaidHolidayHrs     = 0;
                                                    iSundayHolidayCount = 0;

                                                    //Check Previous Day Requirement
                                                    if ((Convert.ToBoolean(ONEPREVDAY) && bPrevRestDay == true && bIsRestDay == true && iPrevCompDayWorkMin >= iHolPrevDayInMin)
                                                            || (bIsRestDay == true && iPrevCompDayWorkMin >= iHolPrevDayInMin)
                                                            || (bIsRestDay == false && iPrevCompDayWorkMin >= iHolPrevDayInMin)
                                                            || (Convert.ToBoolean(MLPAYHOL) && (strPreviousDayLeaveType == "ML" || strPreviousDayLeaveType == "SW") && strPayType.Equals("D"))
                                                            || (ULPREVDAY != null && ULPREVDAY.Rows.Count > 0 && commonBL.IsFoundInParameterTable(ULPREVDAY, strPreviousDayLeaveType) == true))
                                                        bMetHolidayPreviousDay = true;
                                                    else
                                                        bMetHolidayPreviousDay = false;

                                                    if (strDayCode == "PSD" && iComputedRegularMin + iPayLeaveMin + iComputedOvertimeMin == 0)
                                                        bMetHolidayPreviousDay = false;

                                                    //Check if New Hire or Resigned
                                                    if ((bIsNewHire && !Convert.ToBoolean(NOABSNWHRE))
                                                        || (dtEmpTimeRegister.Rows[i]["Mem_SeparationDate"].ToString() != ""
                                                            && Convert.ToDateTime(strProcessDate) >= Convert.ToDateTime(dtEmpTimeRegister.Rows[i]["Mem_SeparationDate"])))
                                                        bIsNewHireOrResigned = true;
                                                    else
                                                        bIsNewHireOrResigned = false;
                                                    #endregion

                                                    #region Checking of Holiday Code
                                                    //if (iComputedRegularMin + iPayLeaveMin + iComputedOvertimeMin == 0 //applicable on unworked holidays
                                                    //   || ((strDayCode == "HOL" || (bHasDayCodeExt && strDayCode == "HOL2")) && bIsRestDay == false) // && Convert.ToBoolean(LEGHOLINRG) == true) //or if worked on legal holidays and WHEN LEGHOLINRG is true 
                                                    //   ) 
                                                    //{
                                                        if (strDayCode == "HOL") //only for legal holidays NOT falling on restdays
                                                        {
                                                            #region HOL
                                                            if (bIsRestDay == false)
                                                            {
                                                                if (bMetHolidayPreviousDay && !bIsNewHireOrResigned
                                                                     && (iComputedRegularMin + iPayLeaveMin + iComputedOvertimeMin) == 0) //|| (Convert.ToBoolean(LEGHOLINRG) == true && iComputedRegularMin + iPayLeaveMin + iComputedOvertimeMin != 0))
                                                                {
                                                                    iPaidHolidayHrs     = iShiftInHours;
                                                                    PaidLegalHolidayHr += iShiftInHours;
                                                                }
                                                                else if (!bMetHolidayPreviousDay && strPayType.Equals("M"))
                                                                {
                                                                    iPaidHolidayHrs      = iShiftInHours * -1;
                                                                    AbsentLegalHolidayHr += iShiftInHours;
                                                                }
                                                            }
                                                            #endregion
                                                        }
                                                        else if (strDayCode == "SPL")
                                                        {
                                                            #region SPL
                                                            if (strPayType.Equals("M")) //Monthly only
                                                            {
                                                                if (bIsRestDay == false && bMetHolidayPreviousDay && !bIsNewHireOrResigned
                                                                    && (iComputedRegularMin + iPayLeaveMin + iComputedOvertimeMin) == 0) //gcd
                                                                {
                                                                    iPaidHolidayHrs     = iShiftInHours;
                                                                    PaidSpecialHolidayHr += iShiftInHours;
                                                                }
                                                                else if (!bMetHolidayPreviousDay && (bIsRestDay == false
                                                                                                    || (bIsRestDay == true && NEWHIRE == "P" && (bIsNewHire || Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Mem_IsComputedPerDay"].ToString()))))
                                                                        )
                                                                {
                                                                    iPaidHolidayHrs        = iShiftInHours * -1;
                                                                    AbsentSpecialHolidayHr += iShiftInHours;
                                                                }
                                                            }
                                                            #endregion
                                                        }
                                                        else if (strDayCode == "COMP")
                                                        {
                                                            #region COMP
                                                            if (bMetHolidayPreviousDay && !bIsNewHireOrResigned
                                                                && (iComputedRegularMin + iPayLeaveMin + iComputedOvertimeMin) == 0)
                                                            {
                                                                iPaidHolidayHrs      = iShiftInHours;
                                                                PaidCompanyHolidayHr += iShiftInHours;
                                                            }
                                                            else if (bIsRestDay == false && !bMetHolidayPreviousDay && strPayType.Equals("M"))
                                                            {
                                                                iPaidHolidayHrs        = iShiftInHours * -1;
                                                                AbsentCompanyHolidayHr += iShiftInHours;
                                                            }
                                                            #endregion
                                                        }
                                                        else if (strDayCode == "PSD")
                                                        {
                                                            #region PSD
                                                            if (!bMetHolidayPreviousDay || bIsNewHireOrResigned)
                                                            {
                                                                if (bMetHolidayPreviousDay && !bIsNewHireOrResigned
                                                                    && (iComputedRegularMin + iPayLeaveMin + iComputedOvertimeMin) == 0)
                                                                {
                                                                    iPaidHolidayHrs = iShiftInHours;
                                                                    PaidPlantShutdownHolidayHr += iShiftInHours;
                                                                }
                                                                else if (bIsRestDay == false && !bMetHolidayPreviousDay && strPayType.Equals("M"))
                                                                {
                                                                    iPaidHolidayHrs         = iShiftInHours * -1;
                                                                    AbsentPlantShutdownHr   += iShiftInHours;
                                                                    iComputedLateMin        = 0;
                                                                    iComputedLate2Min       = 0;
                                                                    iComputedUndertime1Min  = 0;
                                                                    iComputedUndertime2Min  = 0;
                                                                    iInitialAbsentMin       = 0;
                                                                    iComputedAbsentMin      = 0;
                                                                    iTotalComputedAbsentMin = 0;
                                                                }
                                                            }
                                                            #endregion
                                                        }
                                                        else if (bHasDayCodeExt)
                                                        {
                                                            #region Filler
                                                            drArrDayCodeFiller = dtDayCodeFillers.Select(string.Format("Mmd_DayCode = '{0}'", strDayCode));
                                                            if (drArrDayCodeFiller.Length > 0)
                                                            {
                                                                if (strDayCode.Equals("CMPY")) //CMPY for HOGP
                                                                {
                                                                    if (strPayType.Equals("M")) //Monthly only
                                                                    {
                                                                        if (bMetHolidayPreviousDay && !bIsNewHireOrResigned
                                                                            && (iComputedRegularMin + iPayLeaveMin + iComputedOvertimeMin) == 0)
                                                                        {
                                                                            iPaidHolidayHrs     = iShiftInHours;
                                                                            PaidFillerHolidayHr += iShiftInHours;
                                                                        }
                                                                        else if (bIsRestDay == false && !bMetHolidayPreviousDay && strPayType.Equals("M"))
                                                                        {
                                                                            iPaidHolidayHrs       = iShiftInHours * -1;
                                                                            AbsentFillerHolidayHr += iShiftInHours;
                                                                        }
                                                                    }
                                                                }
                                                                else if (strDayCode.Equals("HOL2")) //Double Holiday
                                                                {
                                                                    if (bIsRestDay == false)
                                                                    {
                                                                        if (bMetHolidayPreviousDay && !bIsNewHireOrResigned
                                                                            && (iComputedRegularMin + iPayLeaveMin + iComputedOvertimeMin) == 0)
                                                                        {
                                                                            iPaidHolidayHrs = iShiftInHours * 2;
                                                                            PaidFillerHolidayHr += (iShiftInHours * 2);
                                                                        }
                                                                        else if  (!bMetHolidayPreviousDay && strPayType.Equals("M"))
                                                                        {
                                                                            iPaidHolidayHrs = iShiftInHours * -1;
                                                                            AbsentFillerHolidayHr += iShiftInHours;
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    if (bMetHolidayPreviousDay && !bIsNewHireOrResigned
                                                                        && (iComputedRegularMin + iPayLeaveMin + iComputedOvertimeMin) == 0)
                                                                    {
                                                                        iPaidHolidayHrs      = iShiftInHours;
                                                                        PaidFillerHolidayHr += iShiftInHours;
                                                                    }
                                                                    else if (bIsRestDay == false && !bMetHolidayPreviousDay && strPayType.Equals("M"))
                                                                    {
                                                                        iPaidHolidayHrs       = iShiftInHours * -1;
                                                                        AbsentFillerHolidayHr += iShiftInHours;
                                                                    }
                                                                }
                                                            }
                                                            #endregion
                                                        }
                                                    //}
                                                    #endregion

                                                    #region Sunday Holiday Count (Legal Holiday Falling on a Restday)
                                                    if (iComputedRegularMin + iPayLeaveMin + iComputedOvertimeMin == 0 && strDayCode == "HOL" && bMetHolidayPreviousDay == true && bIsRestDay == true && bIsNewHireOrResigned == false)
                                                    {
                                                        if (drHol["Thl_IsPaidRestLegalHoliday"].ToString() != ""
                                                           && Convert.ToBoolean(drHol["Thl_IsPaidRestLegalHoliday"]) == true
                                                           && CheckIfExistsInCommaDelString(dtEmpTimeRegister.Rows[i]["Ttr_PayrollType"].ToString(), drHol["Thl_PaidRestLegalHolidayPayrollType"].ToString(), ',') == true)
                                                        {
                                                            iSundayHolidayCount = 1;
                                                        }
                                                        else
                                                            AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No Legal Holiday Falling on a Restday Pay", "AW");
                                                    }
                                                    #endregion

                                                    #region Update Columns
                                                    if (strDayCode != "PSD")
                                                    {
                                                        dtEmpTimeRegister.Rows[i]["Ttr_PrvDayHolRef"]  = strPreviousDayReference;
                                                        dtEmpTimeRegister.Rows[i]["Ttr_PrvDayWorkMin"] = iPrevCompDayWorkMin;
                                                    }
                                                    dtEmpTimeRegister.Rows[i]["Ttr_PDRESTLEGHOLDay"] = iSundayHolidayCount;
                                                    dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]   = iPaidHolidayHrs;

                                                    //Add PSD 
                                                    if (strDayCode == "PSD" && bIsRestDay == false && iTotalComputedAbsentMin > 0 && !Convert.ToBoolean(PSDMONTHLY))
                                                    {
                                                        dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"] = Math.Round(iTotalComputedAbsentMin / 60.0, 2) * -1;
                                                        AbsentPlantShutdownHr += Math.Round(iTotalComputedAbsentMin / 60.0, 2);
														iInitialAbsentMin = 0;
                                                        iTotalComputedAbsentMin = 0;
                                                    }
                                                    #endregion
                                                }
                                                else
                                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "No Holiday Pay", "AW");
                                            }
                                        }
                                        iDecrement++;
                                    } while (!bIsFound && iDecrement <= 30);
                                }
                                #endregion

                                #region Working Day
                                if (!Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                {
                                    dtEmpTimeRegister.Rows[i]["Ttr_WorkDay"] = 1;

                                    //Check if New Hire or Resigned
                                    if ((bIsNewHire && !Convert.ToBoolean(NOABSNWHRE))
                                        || (dtEmpTimeRegister.Rows[i]["Mem_SeparationDate"].ToString() != ""
                                            && Convert.ToDateTime(strProcessDate) > Convert.ToDateTime(dtEmpTimeRegister.Rows[i]["Mem_SeparationDate"])))
                                        dtEmpTimeRegister.Rows[i]["Ttr_WorkDay"] = 0;
                                }
                                else
                                    dtEmpTimeRegister.Rows[i]["Ttr_WorkDay"] = 0;
                                #endregion

                                #region Check for Errors
                                if (strActualTimeIn1.Length < 4)
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, strActualTimeIn1 + " Invalid Time In 1", "BW");
                                if (strActualTimeOut1.Length < 4)
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, strActualTimeOut1 + " Invalid Time Out 1", "BW");
                                if (strActualTimeIn2.Length < 4)
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, strActualTimeIn2 + " Invalid Time In 2", "BW");
                                if (strActualTimeOut2.Length < 4)
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, strActualTimeOut2 + " Invalid Time Out 2", "BW");
                                if ((!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode) && iComputedRegularMin + iPayLeaveMin + iTotalComputedAbsentMin != iShiftMin)
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Regular + Absent + Leave minutes not equal to Shift minutes", "AE");
                                if (iComputedRegularMin > iShiftMin)
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Regular hour greater than Shift hour", "AE");
                                if (iTotalComputedAbsentMin > iShiftMin)
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Absent hour greater than Shift hour", "AE");
                                if (iComputedRegularMin < 0)
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Regular hour less than zero", "AE");
                                if (iTotalComputedAbsentMin < 0)
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Absent less than zero", "AE");
                                if (iEncodedOvertimeMin < iComputedOvertimeMin)
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Computed overtime greater than Approved Overtime", "AE");
                                if (Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_WFOTAdvHr"]) < 0)
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, string.Format("Negative {0} overtime", commonBL.GetPolicyDtlDescription("OTTYPE", "A", companyCode)), "AE");
                                if (Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_WFOTPostHr"]) < 0)
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, string.Format("Negative {0} overtime", commonBL.GetPolicyDtlDescription("OTTYPE", "P", companyCode)), "AE");
                                if ((bIsRestDay || bIsHoliday || !bIsRegOrReg5DayCode || strDayCode.Equals("REGA"))
                                        && iComputedRegularMin + iComputedOvertimeMin != iComputedDayWorkMin)
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Incorrect Total Working Hours", "AW");
                                if ((!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode) //Regular Day
                                        && iComputedRegularMin + iComputedOvertimeMin + iPayLeaveMin != iComputedDayWorkMin)
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Incorrect Total Working Hours", "AW");
                                #endregion

                                #region Save Changes
                                dtEmpTimeRegister.Rows[i]["Ttr_ConvIn_1Min"]    = iConvTimeIn1Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_ConvOut_1Min"]   = iConvTimeOut1Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_ConvIn_2Min"]    = iConvTimeIn2Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_ConvOut_2Min"]   = iConvTimeOut2Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_ShiftIn_1Min"]   = iShiftTimeIn1Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_ShiftOut_1Min"]  = iShiftTimeOut1Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_ShiftIn_2Min"]   = iShiftTimeIn2Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_ShiftOut_2Min"]  = iShiftTimeOut2Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_OTMin"]          = iEncodedOvertimeMin;
                                
                                dtEmpTimeRegister.Rows[i]["Ttr_CompIn_1Min"]    = iCompTimeIn1Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompOut_1Min"]   = iCompTimeOut1Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompIn_2Min"]    = iCompTimeIn2Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompOut_2Min"]   = iCompTimeOut2Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompREGMin"]     = iComputedRegularMin;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompOTMin"]      = iComputedOvertimeMin;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompWorkMin"]    = iComputedDayWorkMin;
                                dtEmpTimeRegister.Rows[i]["Ttr_InitialABSMin"]  = iInitialAbsentMin;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompABSMin"]     = iComputedAbsentMin;
                                dtEmpTimeRegister.Rows[i]["Ttr_OffsetOTMin"]    = iOffsetOvertimeMin;
                                dtEmpTimeRegister.Rows[i]["Ttr_PayLVMin"]       = iPayLeaveMin;
                                dtEmpTimeRegister.Rows[i]["Ttr_NoPayLVMin"]     = iNoPayLeaveMin;
                                dtEmpTimeRegister.Rows[i]["Ttr_ExcLVMin"]       = iExcessLeaveMin;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompAdvOTMin"]   = iAdjShiftMin;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompNDMin"]      = iCompRegNightPremMin;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompNDOTMin"]    = iCompOvertimeNightPremMin;

                                dtEmpTimeRegister.Rows[i]["Ttr_ActLT1Min"]      = iActualLate1Mins;
                                dtEmpTimeRegister.Rows[i]["Ttr_ActLT2Min"]      = iActualLate2Mins;
                                dtEmpTimeRegister.Rows[i]["Ttr_ActUT1Min"]      = iActualUT1Mins;
                                dtEmpTimeRegister.Rows[i]["Ttr_ActUT2Min"]      = iActualUT2Mins;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompLT1Min"]     = iComputedLateMin;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompLT2Min"]     = iComputedLate2Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompUT1Min"]     = iComputedUndertime1Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompUT2Min"]     = iComputedUndertime2Min;
                                dtEmpTimeRegister.Rows[i]["Ttr_OBHour"]         = Math.Round(Convert.ToDouble(iLeaveMinToBeAddedToReg) / 60.0, 2); //OB
                                dtEmpTimeRegister.Rows[i]["Ttr_PaidBreakHour"]  = Math.Round(Convert.ToDouble(iPaidBreakOnReg) / 60.0, 2);
                                dtEmpTimeRegister.Rows[i]["Ttr_EXPHour"]        = iEXPHourMin;
                                #endregion

                                #region Convert to Hours
                                dtEmpTimeRegister.Rows[i]["Ttr_ABSHour"]    = Math.Round(iTotalComputedAbsentMin / 60.0, 2);
                                dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]    = Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_CompREGMin"]) / 60.0, 2);
                                dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]     = Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_CompOTMin"]) / 60.0, 2);
                                dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]     = Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_CompNDMin"]) / 60.0, 2);
                                dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]   = Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_CompNDOTMin"]) / 60.0, 2);
                                dtEmpTimeRegister.Rows[i]["Ttr_LVHour"]     = Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_PayLVMin"]) / 60.0, 2);
                                dtEmpTimeRegister.Rows[i]["Ttr_EXPHour"]    = Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_EXPHour"]) / 60.0, 2);

                                #region Actual Hours Value
                                if (POCKETSIZE <= 2)
                                {
                                    dtEmpTimeRegister.Rows[i]["Ttr_EXPHour"] = 0;
                                    if (Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_CompOut_1Min"]) - Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_ConvIn_1Min"]) > 0)
                                    {
                                        dtEmpTimeRegister.Rows[i]["Ttr_EXPHour"] = Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_CompOut_1Min"]) - Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_ConvIn_1Min"]), 2);
                                    }
                                    if (Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_ConvOut_2Min"]) != 0 && Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_ConvOut_2Min"]) < Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_ShiftIn_1Min"]))
                                    {
                                        if ((Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_ConvOut_2Min"]) + 1440) - Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_CompIn_2Min"]) > 0)
                                            dtEmpTimeRegister.Rows[i]["Ttr_EXPHour"] = Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_EXPHour"]) + (Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_ConvOut_2Min"]) + 1440) - Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_CompIn_2Min"]), 2);
                                    }
                                    else
                                    {
                                        if (Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_ConvOut_2Min"]) - Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_CompIn_2Min"]) > 0)
                                            dtEmpTimeRegister.Rows[i]["Ttr_EXPHour"] = Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_EXPHour"]) + Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_ConvOut_2Min"]) - Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_CompIn_2Min"]), 2);
                                    }
                                    dtEmpTimeRegister.Rows[i]["Ttr_EXPHour"] = Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_EXPHour"]) / 60.0, 2);
                                }
                                #endregion

                                if ((!bIsRestDay && !bIsHoliday && bIsRegOrReg5DayCode)
                                    && Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]) + Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_LVHour"]) + Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_ABSHour"]), 2)
                                        != Math.Round(Convert.ToDouble(iShiftMin / 60.0), 2))
                                    AddErrorToLaborHourReport(curEmployeeID, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), strProcessDate, "Regular + Absent hour not equal to Shift hour", "AE");
                                #endregion
                            }

                            #region Payroll Transaction Totals
                            iShiftMin = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_ShiftMin"].ToString());

                            //Regular Hours Requirement
                            if (HasMetRegularHourRequirement(dtEmpTimeRegister.Rows[i]["Ttr_PayrollGroup"].ToString(), Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]), Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_LVHour"]), dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString()))
                            {
                                dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]        = (iShiftMin / 60.0) - Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_LVHour"]);
                                dtEmpTimeRegister.Rows[i]["Ttr_ABSHour"]        = 0;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompLT1Min"]     = 0;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompLT2Min"]     = 0;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompUT1Min"]     = 0;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompUT2Min"]     = 0;
                                dtEmpTimeRegister.Rows[i]["Ttr_InitialABSMin"]  = 0;
                                dtEmpTimeRegister.Rows[i]["Ttr_CompABSMin"]     = 0;
                            }

                            //Filter Regular Hours for REG only
                            if (Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_HolidayFlag"]) == false
                                && Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]) == false
                                && (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString() == "REG"
                                    || dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString() == "REGN"))
                            {
                                RegularHrMonthlyDailyPay += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]), 2);
                            }

                            //Filter PSD  hours for PSD only
                            if (Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_HolidayFlag"]) == true
                                && Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]) == false
                                && dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString() == "PSD")
                            {
                                RegularHrMonthlyDailyPay += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]), 2);
                            }

                            LateHours                += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_CompLT1Min"]) / 60.0, 2);
                            LateHours                += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_CompLT2Min"]) / 60.0, 2);
                            UndertimeHours           += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_CompUT1Min"]) / 60.0, 2);
                            UndertimeHours           += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_CompUT2Min"]) / 60.0, 2);
                            PaidLeaveHours           += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_PayLVMin"]) / 60.0, 2);
                            UnpaidLeaveHours         += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NoPayLVMin"]) / 60.0, 2);
                            if (Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_InitialABSMin"]) < iShiftMin)
                                LateUndertimeMaxAbsentHours += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_InitialABSMin"]) / 60.0, 2);
                            else 
                                WholeDayAbsentHours += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_InitialABSMin"]) / 60.0, 2);
                            AbsentHr                 += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_ABSHour"]), 2);
                            RestdayLegalHolidayCount += (Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDRESTLEGHOLDay"]) * 8);
                            WorkingDay               += Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_WorkDay"]);
                            #endregion

                            //drArrEmpWithSalaryMovement = dtEmpWithSalaryMovement.Select("Tsl_IDNo = '" + curEmployeeID + "'");
                            if (!bProcessTrail)
                            {
                                if (!Convert.ToBoolean(HRFRCLBRHR)) //Normal
                                {
                                    #region Payroll Transaction variables
                                    if ((dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("REG")
                                            || dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("REGN")
                                            || dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("PSD"))
                                        && !Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        if (!dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("PSD"))
                                        {
                                            RegularOTHr += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]), 2);
                                            RegularNDHr += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]), 2);
                                            RegularOTNDHr += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]), 2);
                                        }
                                        else
                                        {
                                            PlantShutdownOTHr   += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]), 2);
                                            PlantShutdownNDHr   += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]), 2);
                                            PlantShutdownOTNDHr += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]), 2);
                                        }
                                        RegularHr       += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]), 2);
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("REST") && Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        RestdayHr       += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]), 2);
                                        RestdayOTHr     += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]), 2);
                                        RestdayNDHr     += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]), 2);
                                        RestdayOTNDHr   += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]), 2);
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("HOL") && !Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        LegalHolidayHr      += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]), 2);
                                        LegalHolidayOTHr    += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]), 2);
                                        LegalHolidayNDHr    += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]), 2);
                                        LegalHolidayOTNDHr  += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]), 2);
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("SPL") && !Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        SpecialHolidayHr        += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]), 2);
                                        SpecialHolidayOTHr      += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]), 2);
                                        SpecialHolidayNDHr      += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]), 2);
                                        SpecialHolidayOTNDHr    += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]), 2);
                                    }
                                    //else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("PSD") && !Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    //{
                                    //    PlantShutdownHr     += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]), 2);
                                    //    PlantShutdownOTHr   += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]), 2);
                                    //    PlantShutdownNDHr   += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]), 2);
                                    //    PlantShutdownOTNDHr += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]), 2);
                                    //}
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("COMP") && !Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        CompanyHolidayHr     += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]), 2);
                                        CompanyHolidayOTHr   += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]), 2);
                                        CompanyHolidayNDHr   += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]), 2);
                                        CompanyHolidayOTNDHr += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]), 2);
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("HOL") && Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        RestdayLegalHolidayHr     += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]), 2);
                                        RestdayLegalHolidayOTHr   += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]), 2);
                                        RestdayLegalHolidayNDHr   += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]), 2);
                                        RestdayLegalHolidayOTNDHr += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]), 2);
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("SPL") && Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        RestdaySpecialHolidayHr     += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]), 2);
                                        RestdaySpecialHolidayOTHr   += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]), 2);
                                        RestdaySpecialHolidayNDHr   += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]), 2);
                                        RestdaySpecialHolidayOTNDHr += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]), 2);
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("COMP") && Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        RestdayCompanyHolidayHr     += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]), 2);
                                        RestdayCompanyHolidayOTHr   += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]), 2);
                                        RestdayCompanyHolidayNDHr   += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]), 2);
                                        RestdayCompanyHolidayOTNDHr += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]), 2);
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("PSD") && Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        RestdayPlantShutdownHr      += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]), 2);
                                        RestdayPlantShutdownOTHr    += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]), 2);
                                        RestdayPlantShutdownNDHr    += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]), 2);
                                        RestdayPlantShutdownOTNDHr  += Math.Round(Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]), 2);
                                    }
                                    else if (bHasDayCodeExt)
                                    {
                                        foreach (DataRow drFiller in dtDayCodeFillers.Rows)
                                        {
                                            fillerHrCol     = string.Format("Tph_Misc{0}Hr", drFiller["Mmd_MiscDayID"]);
                                            fillerOTHrCol   = string.Format("Tph_Misc{0}OTHr", drFiller["Mmd_MiscDayID"]);
                                            fillerNDHrCol   = string.Format("Tph_Misc{0}NDHr", drFiller["Mmd_MiscDayID"]);
                                            fillerOTNDHrCol = string.Format("Tph_Misc{0}NDOTHr", drFiller["Mmd_MiscDayID"]);
                                            if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals(drFiller["Mmd_DayCode"].ToString()) && Convert.ToBoolean(drFiller["Mmd_RestDayFlag"]) == Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                            {
                                                drEmpPayTranHdrMisc[fillerHrCol]     = Math.Round(Convert.ToDouble(drEmpPayTranHdrMisc[fillerHrCol]) + Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]), 2);
                                                drEmpPayTranHdrMisc[fillerOTHrCol]   = Math.Round(Convert.ToDouble(drEmpPayTranHdrMisc[fillerOTHrCol]) + Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]), 2);
                                                drEmpPayTranHdrMisc[fillerNDHrCol]   = Math.Round(Convert.ToDouble(drEmpPayTranHdrMisc[fillerNDHrCol]) + Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]), 2);
                                                drEmpPayTranHdrMisc[fillerOTNDHrCol] = Math.Round(Convert.ToDouble(drEmpPayTranHdrMisc[fillerOTNDHrCol]) + Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]), 2);
                                            }
                                        }
                                    }
                                    #endregion
                                }
                                else //Hour Fraction Computation
                                {
                                    #region Payroll Transaction Detail variables
                                    SavePayrollTransactionAmounts(curEmployeeID
                                                                    , Convert.ToDateTime(dtEmpTimeRegister.Rows[i]["Ttr_Date"])
                                                                    , dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString()
                                                                    , Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]));

                                    #region Minimum OT Checking
                                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_REGOTHr"]) < OTMINHR)
                                        drEmpPayTranDtl["Tpd_REGOTHr"] = 0;
                                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTOTHr"]) < OTMINHR)
                                    {
                                        drEmpPayTranDtl["Tpd_RESTHr"]   = 0;
                                        drEmpPayTranDtl["Tpd_RESTOTHr"] = 0;
                                    }
                                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLOTHr"]) < OTMINHR)
                                    {
                                        drEmpPayTranDtl["Tpd_LEGHOLHr"] = 0;
                                        drEmpPayTranDtl["Tpd_LEGHOLOTHr"] = 0;
                                    }
                                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLOTHr"]) < OTMINHR)
                                    {
                                        drEmpPayTranDtl["Tpd_SPLHOLHr"]   = 0;
                                        drEmpPayTranDtl["Tpd_SPLHOLOTHr"] = 0;
                                    }
                                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDOTHr"]) < OTMINHR)
                                    {
                                        drEmpPayTranDtl["Tpd_PSDHr"]   = 0;
                                        drEmpPayTranDtl["Tpd_PSDOTHr"] = 0;
                                    }
                                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLOTHr"]) < OTMINHR)
                                    {
                                        drEmpPayTranDtl["Tpd_COMPHOLHr"]   = 0;
                                        drEmpPayTranDtl["Tpd_COMPHOLOTHr"] = 0;
                                    }
                                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"]) < OTMINHR)
                                    {
                                        drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]   = 0;
                                        drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"] = 0;
                                    }
                                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"]) < OTMINHR)
                                    {
                                        drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]   = 0;
                                        drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"] = 0;
                                    }
                                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"]) < OTMINHR)
                                    {
                                        drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]   = 0;
                                        drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"] = 0;
                                    }
                                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDOTHr"]) < OTMINHR)
                                    {
                                        drEmpPayTranDtl["Tpd_RESTPSDHr"]   = 0;
                                        drEmpPayTranDtl["Tpd_RESTPSDOTHr"] = 0;
                                    }
                                    if (bHasDayCodeExt)
                                    {
                                        foreach (DataRow drFiller in dtDayCodeFillers.Rows)
                                        {
                                            fillerHrCol   = string.Format("Tph_Misc{0}Hr", drFiller["Mmd_MiscDayID"]);
                                            fillerOTHrCol = string.Format("Tph_Misc{0}OTHr", drFiller["Mmd_MiscDayID"]);
                                            if (Convert.ToDouble(drEmpPayTranDtlMisc[fillerHrCol]) + Convert.ToDouble(drEmpPayTranDtlMisc[fillerOTHrCol]) < OTMINHR)
                                            {
                                                drEmpPayTranHdrMisc[fillerHrCol]    = Convert.ToDouble(drEmpPayTranHdrMisc[fillerHrCol]) - Convert.ToDouble(drEmpPayTranDtlMisc[fillerHrCol]);
                                                drEmpPayTranHdrMisc[fillerOTHrCol]  = Convert.ToDouble(drEmpPayTranHdrMisc[fillerOTHrCol]) - Convert.ToDouble(drEmpPayTranDtlMisc[fillerOTHrCol]);
                                                drEmpPayTranDtlMisc[fillerHrCol]    = 0;
                                                drEmpPayTranDtlMisc[fillerOTHrCol]  = 0;
                                            }
                                        }
                                    }
                                    #endregion

                                    #region Add to Total Hours
                                    if (LBRHRFORMULA == "FORMULA2"
                                        || (LBRHRFORMULA == "FORMULA1" && bHasAddedCurrentHrs == false)
                                        || LBRHRFORMULA == "")
                                    {
                                        RegularHr                   += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_REGHr"]), 2);
                                        RegularOTHr                 += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_REGOTHr"]), 2);
                                        RestdayHr                   += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTHr"]), 2);
                                        RestdayOTHr                 += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTOTHr"]), 2);
                                        LegalHolidayHr              += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLHr"]), 2);
                                        LegalHolidayOTHr            += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLOTHr"]), 2);
                                        SpecialHolidayHr            += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLHr"]), 2);
                                        SpecialHolidayOTHr          += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLOTHr"]), 2);
                                        PlantShutdownHr             += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDHr"]), 2);
                                        PlantShutdownOTHr           += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDOTHr"]), 2);
                                        CompanyHolidayHr            += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLHr"]), 2);
                                        CompanyHolidayOTHr          += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLOTHr"]), 2);
                                        RestdayLegalHolidayHr       += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]), 2);
                                        RestdayLegalHolidayOTHr     += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"]), 2);
                                        RestdaySpecialHolidayHr     += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]), 2);
                                        RestdaySpecialHolidayOTHr   += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"]), 2);
                                        RestdayCompanyHolidayHr     += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]), 2);
                                        RestdayCompanyHolidayOTHr   += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"]), 2);
                                        RestdayPlantShutdownHr      += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDHr"]), 2);
                                        RestdayPlantShutdownOTHr    += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDOTHr"]), 2);
                                    }

                                    RegularNDHr                 += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_REGNDHr"]), 2);
                                    RegularOTNDHr               += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_REGNDOTHr"]), 2);
                                    RestdayNDHr                 += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTNDHr"]), 2);
                                    RestdayOTNDHr               += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTNDOTHr"]), 2);
                                    LegalHolidayNDHr            += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLNDHr"]), 2);
                                    LegalHolidayOTNDHr          += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLNDOTHr"]), 2);
                                    SpecialHolidayNDHr          += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLNDHr"]), 2);
                                    SpecialHolidayOTNDHr        += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLNDOTHr"]), 2);
                                    PlantShutdownNDHr           += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDNDHr"]), 2);
                                    PlantShutdownOTNDHr         += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDNDOTHr"]), 2);
                                    CompanyHolidayNDHr          += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLNDHr"]), 2);
                                    CompanyHolidayOTNDHr        += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLNDOTHr"]), 2);
                                    RestdayLegalHolidayNDHr     += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLNDHr"]), 2);
                                    RestdayLegalHolidayOTNDHr   += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLNDOTHr"]), 2);
                                    RestdaySpecialHolidayNDHr   += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLNDHr"]), 2);
                                    RestdaySpecialHolidayOTNDHr += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLNDOTHr"]), 2);
                                    RestdayCompanyHolidayNDHr   += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLNDHr"]), 2);
                                    RestdayCompanyHolidayOTNDHr += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLNDOTHr"]), 2);
                                    RestdayPlantShutdownNDHr    += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDNDHr"]), 2);
                                    RestdayPlantShutdownOTNDHr  += Math.Round(Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDNDOTHr"]), 2);

                                    bHasAddedCurrentHrs = false; //reset per date to FALSE
                                    #endregion

                                    //Regular Hours Requirement
                                    if (HasMetRegularHourRequirement(dtEmpTimeRegister.Rows[i]["Ttr_PayrollGroup"].ToString(), Convert.ToDouble(drEmpPayTranDtl["Tpd_REGHr"]), Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_LVHour"]), dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString()))
                                    {
                                        drEmpPayTranDtl["Tpd_REGHr"] = (iShiftMin / 60.0) - Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_LVHour"]);
                                        drEmpPayTranDtl["Tpd_ABSHr"] = 0;
                                    }
                                    #endregion
                                }
                            }

                            #region Copy to employee payroll transaction detail table
                            if (bUserGeneratedPayTrans == false || !ProcessCurrentPeriod) //allow save if past pay period
                            {
                                drEmpPayTranDtl["Tpd_IDNo"]             = curEmployeeID;
                                drEmpPayTranDtl["Tpd_PayCycle"]         = ProcessPayrollPeriod;
                                drEmpPayTranDtl["Tpd_ABSHr"]            = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_ABSHour"]);
                                drEmpPayTranDtl["Tpd_PDRESTLEGHOLHr"] = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDRESTLEGHOLDay"]) * 8.0;
                                drEmpPayTranDtl["Tpd_WorkDay"]          = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_WorkDay"]);
                                drEmpPayTranDtl["Tpd_Date"]             = dtEmpTimeRegister.Rows[i]["Ttr_Date"];

                                drEmpPayTranDtl["Tpd_LTHr"]             = (Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_CompLT1Min"]) + Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_CompLT2Min"])) / 60.0;
                                drEmpPayTranDtl["Tpd_UTHr"]             = (Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_CompUT1Min"]) + Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_CompUT2Min"])) / 60.0;
                                drEmpPayTranDtl["Tpd_PDLVHr"]           = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PayLVMin"]) / 60.0;
                                drEmpPayTranDtl["Tpd_UPLVHr"]           = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_NoPayLVMin"]) / 60.0;
                                if (Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_InitialABSMin"]) < iShiftMin)
                                    drEmpPayTranDtl["Tpd_LTUTMaxHr"]    = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_InitialABSMin"]) / 60.0;
                                else
                                    drEmpPayTranDtl["Tpd_WDABSHr"]      = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_InitialABSMin"]) / 60.0;
                                

                                #region If Not Hour Fraction, Copy to Payroll Transaction Detail
                                if (!Convert.ToBoolean(HRFRCLBRHR))
                                {
                                    if ((dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("REG")
                                            || dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("REGN")
                                            || dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("PSD")) //PSD  Updated 01/10/2018
                                        && !Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        if (!dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("PSD"))
                                        {
                                            drEmpPayTranDtl["Tpd_REGOTHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]);
                                            drEmpPayTranDtl["Tpd_REGNDHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]);
                                            drEmpPayTranDtl["Tpd_REGNDOTHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]);
                                        }
                                        else
                                        {
                                             drEmpPayTranDtl["Tpd_PSDOTHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]);
                                             drEmpPayTranDtl["Tpd_PSDNDHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]);
                                             drEmpPayTranDtl["Tpd_PSDNDOTHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]);
                                        }
                                        drEmpPayTranDtl["Tpd_REGHr"]     = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]);
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("REST") && Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        drEmpPayTranDtl["Tpd_RESTHr"]     = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]);
                                        drEmpPayTranDtl["Tpd_RESTOTHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]);
                                        drEmpPayTranDtl["Tpd_RESTNDHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]);
                                        drEmpPayTranDtl["Tpd_RESTNDOTHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]);
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("HOL") && !Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        drEmpPayTranDtl["Tpd_LEGHOLHr"]     = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]);
                                        drEmpPayTranDtl["Tpd_LEGHOLOTHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]);
                                        drEmpPayTranDtl["Tpd_LEGHOLNDHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]);
                                        drEmpPayTranDtl["Tpd_LEGHOLNDOTHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]);
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("SPL") && !Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        drEmpPayTranDtl["Tpd_SPLHOLHr"]     = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]);
                                        drEmpPayTranDtl["Tpd_SPLHOLOTHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]);
                                        drEmpPayTranDtl["Tpd_SPLHOLNDHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]);
                                        drEmpPayTranDtl["Tpd_SPLHOLNDOTHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]);
                                    }
                                    //else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("PSD") && !Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    //{
                                    //    drEmpPayTranDtl["Tpd_PSDHr"]     = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]);
                                    //    drEmpPayTranDtl["Tpd_PSDOTHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]);
                                    //    drEmpPayTranDtl["Tpd_PSDNDHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]);
                                    //    drEmpPayTranDtl["Tpd_PSDNDOTHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]);
                                    //}
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("COMP") && !Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        drEmpPayTranDtl["Tpd_COMPHOLHr"]     = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]);
                                        drEmpPayTranDtl["Tpd_COMPHOLOTHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]);
                                        drEmpPayTranDtl["Tpd_COMPHOLNDHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]);
                                        drEmpPayTranDtl["Tpd_COMPHOLNDOTHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]);
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("HOL") && Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]     = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]);
                                        drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]);
                                        drEmpPayTranDtl["Tpd_RESTLEGHOLNDHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]);
                                        drEmpPayTranDtl["Tpd_RESTLEGHOLNDOTHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]);
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("SPL") && Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]     = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]);
                                        drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]);
                                        drEmpPayTranDtl["Tpd_RESTSPLHOLNDHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]);
                                        drEmpPayTranDtl["Tpd_RESTSPLHOLNDOTHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]);
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("COMP") && Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]     = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]);
                                        drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]);
                                        drEmpPayTranDtl["Tpd_RESTCOMPHOLNDHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]);
                                        drEmpPayTranDtl["Tpd_RESTCOMPHOLNDOTHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]);
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals("PSD") && Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                    {
                                        drEmpPayTranDtl["Tpd_RESTPSDHr"]     = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]);
                                        drEmpPayTranDtl["Tpd_RESTPSDOTHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]);
                                        drEmpPayTranDtl["Tpd_RESTPSDNDHr"]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]);
                                        drEmpPayTranDtl["Tpd_RESTPSDNDOTHr"] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]);
                                    }
                                    else if (bHasDayCodeExt)
                                    {
                                        foreach (DataRow drFiller in dtDayCodeFillers.Rows)
                                        {
                                            fillerHrColD     = string.Format("Tpd_Misc{0}Hr", drFiller["Mmd_MiscDayID"]);
                                            fillerOTHrColD   = string.Format("Tpd_Misc{0}OTHr", drFiller["Mmd_MiscDayID"]);
                                            fillerNDHrColD   = string.Format("Tpd_Misc{0}NDHr", drFiller["Mmd_MiscDayID"]);
                                            fillerOTNDHrColD = string.Format("Tpd_Misc{0}NDOTHr", drFiller["Mmd_MiscDayID"]);
                                            if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString().Equals(drFiller["Mmd_DayCode"].ToString()) && Convert.ToBoolean(drFiller["Mmd_RestDayFlag"]) == Convert.ToBoolean(dtEmpTimeRegister.Rows[i]["Ttr_RestDayFlag"]))
                                            {
                                                drEmpPayTranDtlMisc[fillerHrColD]     = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_REGHour"]);
                                                drEmpPayTranDtlMisc[fillerOTHrColD]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_OTHour"]);
                                                drEmpPayTranDtlMisc[fillerNDHrColD]   = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDHour"]);
                                                drEmpPayTranDtlMisc[fillerOTNDHrColD] = Convert.ToDouble(dtEmpTimeRegister.Rows[i]["Ttr_NDOTHour"]);
                                            }
                                        }
                                    }
                                }
                                #endregion

                                #region Paid Holiday Hours
                                if (dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"].ToString() != "" && Convert.ToDecimal(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) != 0)
                                {
                                    if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString() == "HOL")
                                    {
                                        if (Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) > 0)
                                            drEmpPayTranDtl["Tpd_PDLEGHOLHr"] = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]);
                                        else if (Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) < 0)
                                            drEmpPayTranDtl["Tpd_ABSLEGHOLHr"] = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) * -1;
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString() == "SPL")
                                    {
                                        if (Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) > 0)
                                            drEmpPayTranDtl["Tpd_PDSPLHOLHr"] = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]);
                                        else if (Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) < 0)
                                            drEmpPayTranDtl["Tpd_ABSSPLHOLHr"] = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) * -1;
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString() == "COMP")
                                    {
                                        if (Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) > 0)
                                            drEmpPayTranDtl["Tpd_PDCOMPHOLHr"] = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]);
                                        else if (Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) < 0)
                                            drEmpPayTranDtl["Tpd_ABSCOMPHOLHr"] = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) * -1;
                                    }
                                    else if (dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString() == "PSD")
                                    {
                                        if (Convert.ToDecimal(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) > 0)
                                            drEmpPayTranDtl["Tpd_PDPSDHr"] = Convert.ToDecimal(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]);
                                        else if (Convert.ToDecimal(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) < 0)
                                            drEmpPayTranDtl["Tpd_ABSPSDHr"] = Convert.ToDecimal(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) * -1;
                                    }
                                    else
                                    {
                                        drArrDayCodeFiller = dtDayCodeFillers.Select(string.Format("Mmd_DayCode = '{0}'", dtEmpTimeRegister.Rows[i]["Ttr_DayCode"].ToString()));
                                        if (drArrDayCodeFiller.Length > 0)
                                        {
                                            if (Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) > 0)
                                                drEmpPayTranDtl["Tpd_PDOTHHOLHr"] = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]);
                                            else if (Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) < 0)
                                                drEmpPayTranDtl["Tpd_ABSOTHHOLHr"] = Convert.ToInt32(dtEmpTimeRegister.Rows[i]["Ttr_PDHOLHour"]) * -1;
                                        }
                                    }
                                }
                                #endregion

                                drEmpPayTranDtl["Tpd_PayrollType"]  = strPayType;
                                drEmpPayTranDtl["Tpd_PremiumGrpCode"] = dtEmpTimeRegister.Rows[i]["Ttr_PremiumGrpCode"].ToString(); 
                                drEmpPayTranDtl["Usr_Login"]        = LoginUser;
                                drEmpPayTranDtl["Ludatetime"]       = DateTime.Now;
                                if (bProcessTrail)
                                    drEmpPayTranDtl["Tpd_AdjPayCycle"] = AdjustPayrollPeriod;

                                if (bHasDayCodeExt)
                                {
                                    drEmpPayTranDtlMisc["Tpd_IDNo"]         	= curEmployeeID;
                                    drEmpPayTranDtlMisc["Tpd_PayCycle"]     	= ProcessPayrollPeriod;
                                    drEmpPayTranDtlMisc["Usr_Login"]        	= LoginUser;
                                    drEmpPayTranDtlMisc["Ludatetime"]       	= DateTime.Now;
                                    drEmpPayTranDtlMisc["Tpd_Date"]         	= dtEmpTimeRegister.Rows[i]["Ttr_Date"];
                                    if (bProcessTrail)
                                        drEmpPayTranDtlMisc["Tpd_AdjPayCycle"] = AdjustPayrollPeriod;
                                }

                                //copy to table
                                dtEmpPayTranDtl.Rows.Add(drEmpPayTranDtl);
                                if (bHasDayCodeExt)
                                    dtEmpPayTranDtlMisc.Rows.Add(drEmpPayTranDtlMisc);
                            }
                            #endregion

                            #region Initialize payroll trans detail row
                            if (strScheduleType == "G") //Hour Fraction feature: lookup to previous day only works for if the previous day's shift is graveyard
                                drEmpPayTranDtlPrev = drEmpPayTranDtl;
                            else
                                drEmpPayTranDtlPrev = null;

                            drEmpPayTranDtl = dtEmpPayTranDtl.NewRow();
                            if (bHasDayCodeExt)
                                drEmpPayTranDtlMisc = dtEmpPayTranDtlMisc.NewRow();
                            #region Initialize payroll trans detail hours
                            drEmpPayTranDtl["Tpd_LTHr"]                 = 0;
                            drEmpPayTranDtl["Tpd_UTHr"]                 = 0;
                            drEmpPayTranDtl["Tpd_UPLVHr"]               = 0;
                            drEmpPayTranDtl["Tpd_ABSLEGHOLHr"]          = 0;
                            drEmpPayTranDtl["Tpd_ABSSPLHOLHr"]          = 0;
                            drEmpPayTranDtl["Tpd_ABSCOMPHOLHr"]         = 0;
                            drEmpPayTranDtl["Tpd_ABSPSDHr"]             = 0;
                            drEmpPayTranDtl["Tpd_ABSOTHHOLHr"]          = 0;
                            drEmpPayTranDtl["Tpd_WDABSHr"]              = 0;
                            drEmpPayTranDtl["Tpd_LTUTMaxHr"]            = 0;
                            drEmpPayTranDtl["Tpd_ABSHr"]                = 0;
                            drEmpPayTranDtl["Tpd_REGHr"]                = 0;
                            drEmpPayTranDtl["Tpd_PDLVHr"]               = 0;
                            drEmpPayTranDtl["Tpd_PDLEGHOLHr"]           = 0;
                            drEmpPayTranDtl["Tpd_PDSPLHOLHr"]           = 0;
                            drEmpPayTranDtl["Tpd_PDCOMPHOLHr"]          = 0;
                            drEmpPayTranDtl["Tpd_PDPSDHr"]              = 0;
                            drEmpPayTranDtl["Tpd_PDOTHHOLHr"]           = 0;
                            drEmpPayTranDtl["Tpd_PDRESTLEGHOLHr"]       = 0;
                            drEmpPayTranDtl["Tpd_REGOTHr"]              = 0;
                            drEmpPayTranDtl["Tpd_REGNDHr"]              = 0;
                            drEmpPayTranDtl["Tpd_REGNDOTHr"]            = 0;
                            drEmpPayTranDtl["Tpd_RESTHr"]               = 0;
                            drEmpPayTranDtl["Tpd_RESTOTHr"]             = 0;
                            drEmpPayTranDtl["Tpd_RESTNDHr"]             = 0;
                            drEmpPayTranDtl["Tpd_RESTNDOTHr"]           = 0;
                            drEmpPayTranDtl["Tpd_LEGHOLHr"]             = 0;
                            drEmpPayTranDtl["Tpd_LEGHOLOTHr"]           = 0;
                            drEmpPayTranDtl["Tpd_LEGHOLNDHr"]           = 0;
                            drEmpPayTranDtl["Tpd_LEGHOLNDOTHr"]         = 0;
                            drEmpPayTranDtl["Tpd_SPLHOLHr"]             = 0;
                            drEmpPayTranDtl["Tpd_SPLHOLOTHr"]           = 0;
                            drEmpPayTranDtl["Tpd_SPLHOLNDHr"]           = 0;
                            drEmpPayTranDtl["Tpd_SPLHOLNDOTHr"]         = 0;
                            drEmpPayTranDtl["Tpd_PSDHr"]                = 0;
                            drEmpPayTranDtl["Tpd_PSDOTHr"]              = 0;
                            drEmpPayTranDtl["Tpd_PSDNDHr"]              = 0;
                            drEmpPayTranDtl["Tpd_PSDNDOTHr"]            = 0;
                            drEmpPayTranDtl["Tpd_COMPHOLHr"]            = 0;
                            drEmpPayTranDtl["Tpd_COMPHOLOTHr"]          = 0;
                            drEmpPayTranDtl["Tpd_COMPHOLNDHr"]          = 0;
                            drEmpPayTranDtl["Tpd_COMPHOLNDOTHr"]        = 0;
                            drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]         = 0;
                            drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"]       = 0;
                            drEmpPayTranDtl["Tpd_RESTLEGHOLNDHr"]       = 0;
                            drEmpPayTranDtl["Tpd_RESTLEGHOLNDOTHr"]     = 0;
                            drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]         = 0;
                            drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"]       = 0;
                            drEmpPayTranDtl["Tpd_RESTSPLHOLNDHr"]       = 0;
                            drEmpPayTranDtl["Tpd_RESTSPLHOLNDOTHr"]     = 0;
                            drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]        = 0;
                            drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"]      = 0;
                            drEmpPayTranDtl["Tpd_RESTCOMPHOLNDHr"]      = 0;
                            drEmpPayTranDtl["Tpd_RESTCOMPHOLNDOTHr"]    = 0;
                            drEmpPayTranDtl["Tpd_RESTPSDHr"]            = 0;
                            drEmpPayTranDtl["Tpd_RESTPSDOTHr"]          = 0;
                            drEmpPayTranDtl["Tpd_RESTPSDNDHr"]          = 0;
                            drEmpPayTranDtl["Tpd_RESTPSDNDOTHr"]        = 0;
                            #endregion
                            #region Initialize payroll trans detail ext hours
                            if (bHasDayCodeExt)
                            {
                                for (int n = 1; n <= FILLERCNT; n++)
                                {
                                    //initialize
                                    fillerHrColD     = string.Format("Tpd_Misc{0:0}Hr", n);
                                    fillerOTHrColD   = string.Format("Tpd_Misc{0:0}OTHr", n);
                                    fillerNDHrColD   = string.Format("Tpd_Misc{0:0}NDHr", n);
                                    fillerOTNDHrColD = string.Format("Tpd_Misc{0:0}NDOTHr", n);
                                    drEmpPayTranDtlMisc[fillerHrColD]     = 0;
                                    drEmpPayTranDtlMisc[fillerOTHrColD]   = 0;
                                    drEmpPayTranDtlMisc[fillerNDHrColD]   = 0;
                                    drEmpPayTranDtlMisc[fillerOTNDHrColD] = 0;
                                }
                            }
                            #endregion
                            #endregion
                        }
                        catch (System.Data.DataException ex)
                        {
                            CommonProcedures.logErrorToFile(ex.ToString());
                            string strError = string.Format("Wrong Time Register Setup");
                            EmpDispHandler(this, new EmpDispEventArgs(dtEmpTimeRegister.Rows[i]["Ttr_IDNo"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), strError));
                            AddErrorToLaborHourReport(dtEmpTimeRegister.Rows[i]["Ttr_IDNo"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), dtEmpTimeRegister.Rows[i]["Ttr_Date"].ToString(), strError,"AW");
                        }
                        catch (Exception ex)
                        {
                            CommonProcedures.logErrorToFile(ex.ToString());
                            EmpDispHandler(this, new EmpDispEventArgs(dtEmpTimeRegister.Rows[i]["Ttr_IDNo"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), "Error in Labor Hours Generation : " + ex.Message));
                            AddErrorToLaborHourReport(dtEmpTimeRegister.Rows[i]["Ttr_IDNo"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), dtEmpTimeRegister.Rows[i]["Ttr_Date"].ToString(), ex.Message.Substring(0, Math.Min(ex.Message.Length, 1000)), "AE");
                        }

                        //assign to prev
                        prevEmployeeID = curEmployeeID;
                    }
                }
                //-----------------------------END MAIN PROCESS
                //Save Log Ledger Table
                StatusHandler(this, new StatusEventArgs("Saving Time Register Records", false));
                string strInsertIntoTemplate;
                string strUpdateRecordTemplate;
                string strUpdateQuery = "";

                string strAdjPayPeriod       = "";
                string strAdjPayPeriodHdrCol = "";
                string strAdjPayPeriodDtlCol = "";
                string strAdjPayPeriodVal    = "";
                if (bProcessTrail)
                {
                    strAdjPayPeriod     = " AND Ttr_AdjPayCycle = '" + AdjustPayrollPeriod + "' AND Ttr_PayCycle = '" + ProcessPayrollPeriod + "'";
                    strAdjPayPeriodHdrCol = "Tph_AdjPayCycle,"; //gcd 
                    strAdjPayPeriodDtlCol = "Tpd_AdjPayCycle,"; //gcd 
                    strAdjPayPeriodVal = string.Format("'{0}',", AdjustPayrollPeriod);
                }

                int iUpdateCtr;
                if (!bProcessTrail)
                {
                    iUpdateCtr = 0;
                    #region Log Ledger Update
                    strUpdateRecordTemplate = @"UPDATE {0} SET Ttr_WFPayLVCode = '{4}', Ttr_WFPayLVHr = {5}, Ttr_PayLVMin = {6}, Ttr_ExcLVMin = {7}, Ttr_WFNoPayLVCode = '{8}', Ttr_WFNoPayLVHr = {9}, Ttr_NoPayLVMin = {10}, Ttr_WFOTAdvHr = {11}, Ttr_WFOTPostHr = {12}, Ttr_OTMin = {13}, Ttr_CompOTMin = {14}, Ttr_OffsetOTMin = {15}, Ttr_ConvIn_1Min = {16}, Ttr_ConvOut_1Min = {17}, Ttr_ConvIn_2Min = {18}, Ttr_ConvOut_2Min = {19}, Ttr_CompIn_1Min = {20}, Ttr_CompOut_1Min = {21}, Ttr_CompIn_2Min = {22}, Ttr_CompOut_2Min = {23}, Ttr_CompAdvOTMin = {24}, Ttr_ShiftIn_1Min = {25}, Ttr_ShiftOut_1Min = {26}, Ttr_ShiftIn_2Min = {27}, Ttr_ShiftOut_2Min = {28}, Ttr_ShiftMin = {29}, Ttr_ScheduleType = '{30}', Ttr_ActLT1Min = {31}, Ttr_ActLT2Min = {32}, Ttr_CompLT1Min = {33}, Ttr_CompLT2Min = {34}, Ttr_ActUT1Min = {35}, Ttr_ActUT2Min = {36}, Ttr_CompUT1Min = {37}, Ttr_CompUT2Min = {38}, Ttr_InitialABSMin = {39}, Ttr_CompABSMin = {40}, Ttr_CompREGMin = {41}, Ttr_CompWorkMin = {42}, Ttr_CompNDMin = {43}, Ttr_CompNDOTMin = {44}, Ttr_PrvDayWorkMin = {45}, Ttr_PrvDayHolRef = {46}, Ttr_PDHOLHour = {47}, Ttr_PDRESTLEGHOLDay = {48}, Ttr_WorkDay = {49}, Ttr_EXPHour = {50}, Ttr_ABSHour = {51}, Ttr_REGHour = {52}, Ttr_OTHour = {53}, Ttr_NDHour = {54}, Ttr_NDOTHour = {55}, Ttr_LVHour = {56}, Ttr_PaidBreakHour = {57}, Ttr_OBHour = {58}, Ttr_RegPlusHour = {59}, Usr_Login = '{60}', Ludatetime = GetDate() WHERE Ttr_IDNo = '{1}' AND Ttr_Date = '{2}' {3} ";
                    #endregion
                    foreach (DataRow drLogLedger in dtEmpTimeRegister.Rows)
                    {
                        #region Log Ledger Save
                        strUpdateQuery += string.Format(strUpdateRecordTemplate
                                                        , EmpTimeRegisterTable                        //0                 
                                                        , drLogLedger["Ttr_IDNo"]
                                                        , drLogLedger["Ttr_Date"]
                                                        , strAdjPayPeriod
                                                        , drLogLedger["Ttr_WFPayLVCode"]
                                                        , drLogLedger["Ttr_WFPayLVHr"]                  //5             
                                                        , drLogLedger["Ttr_PayLVMin"]
                                                        , drLogLedger["Ttr_ExcLVMin"]
                                                        , drLogLedger["Ttr_WFNoPayLVCode"]
                                                        , drLogLedger["Ttr_WFNoPayLVHr"]
                                                        , drLogLedger["Ttr_NoPayLVMin"]                 //10
                                                         , drLogLedger["Ttr_WFOTAdvHr"]
                                                        , drLogLedger["Ttr_WFOTPostHr"]
                                                        , drLogLedger["Ttr_OTMin"]
                                                        , drLogLedger["Ttr_CompOTMin"]
                                                        , drLogLedger["Ttr_OffsetOTMin"]                //15

                                                        , drLogLedger["Ttr_ConvIn_1Min"]
                                                        , drLogLedger["Ttr_ConvOut_1Min"]
                                                        , drLogLedger["Ttr_ConvIn_2Min"]
                                                        , drLogLedger["Ttr_ConvOut_2Min"]
                                                        , drLogLedger["Ttr_CompIn_1Min"]                //20
                                                        , drLogLedger["Ttr_CompOut_1Min"]
                                                        , drLogLedger["Ttr_CompIn_2Min"]
                                                        , drLogLedger["Ttr_CompOut_2Min"]       
                                                        , drLogLedger["Ttr_CompAdvOTMin"]   
                                                        , drLogLedger["Ttr_ShiftIn_1Min"]               //25
                                                        , drLogLedger["Ttr_ShiftOut_1Min"]
                                                        , drLogLedger["Ttr_ShiftIn_2Min"]
                                                        , drLogLedger["Ttr_ShiftOut_2Min"]
                                                        , drLogLedger["Ttr_ShiftMin"]
                                                        , drLogLedger["Ttr_ScheduleType"]               //30

                                                        , drLogLedger["Ttr_ActLT1Min"]
                                                        , drLogLedger["Ttr_ActLT2Min"]
                                                        , drLogLedger["Ttr_CompLT1Min"]
                                                        , drLogLedger["Ttr_CompLT2Min"]
                                                         , drLogLedger["Ttr_ActUT1Min"]                 //35
                                                        , drLogLedger["Ttr_ActUT2Min"]
                                                        , drLogLedger["Ttr_CompUT1Min"]
                                                        , drLogLedger["Ttr_CompUT2Min"]

                                                        , drLogLedger["Ttr_InitialABSMin"]
                                                        , drLogLedger["Ttr_CompABSMin"]                 //40
                                                        , drLogLedger["Ttr_CompREGMin"]         
                                                        , drLogLedger["Ttr_CompWorkMin"]
                                                        , drLogLedger["Ttr_CompNDMin"]
                                                        , drLogLedger["Ttr_CompNDOTMin"]
                                                        , drLogLedger["Ttr_PrvDayWorkMin"]              //45
                                                        , (drLogLedger["Ttr_PrvDayHolRef"] == DBNull.Value) ? "null" : "'" + drLogLedger["Ttr_PrvDayHolRef"].ToString() + "'"
                                                        , drLogLedger["Ttr_PDHOLHour"]
                                                        , drLogLedger["Ttr_PDRESTLEGHOLDay"]
                                                        , drLogLedger["Ttr_WorkDay"]
                                                        , drLogLedger["Ttr_EXPHour"]                    //50
                                                        , drLogLedger["Ttr_ABSHour"]
                                                        , drLogLedger["Ttr_REGHour"]                
                                                        , drLogLedger["Ttr_OTHour"]
                                                        , drLogLedger["Ttr_NDHour"]
                                                        , drLogLedger["Ttr_NDOTHour"]                   //55
                                                        , drLogLedger["Ttr_LVHour"]
                                                        , drLogLedger["Ttr_PaidBreakHour"]
                                                        , drLogLedger["Ttr_OBHour"]
                                                        , drLogLedger["Ttr_RegPlusHour"]
                                                        , LoginUser);                                   //60
                        #endregion
                        iUpdateCtr++;
                        if (iUpdateCtr == 150) //approx 10 employees
                        {
                            dal.ExecuteNonQuery(strUpdateQuery);
                            strUpdateQuery = "";
                            iUpdateCtr = 0;
                        }
                    }
                    if (strUpdateQuery != "")
                        dal.ExecuteNonQuery(strUpdateQuery);
                }
                StatusHandler(this, new StatusEventArgs("Saving Time Register Records", true));
                //-------------------------------
                //Saving Time Register Misc
                if (POCKETSIZE > 2) //Multiple Pockets
                {
                    strUpdateQuery = "";
                    iUpdateCtr = 0;
                    #region Log Ledger Misc Update
                    strUpdateRecordTemplate = @"UPDATE {0} SET Ttm_Result = '{3}', Usr_Login = '{4}', Ludatetime = GetDate() WHERE Ttm_IDNo = '{1}' AND Ttm_Date = '{2}' ";
                    #endregion
                    foreach (DataRow drLogLedgerMisc in dtEmpTimeRegisterMisc.Rows)
                    {
                        #region Log Ledger Misc Save
                        strUpdateQuery += string.Format(strUpdateRecordTemplate
                                                        , EmpTimeRegisterMiscTable                   //0
                                                        , drLogLedgerMisc["Ttm_IDNo"]
                                                        , drLogLedgerMisc["Ttm_Date"]
                                                        , drLogLedgerMisc["Ttm_Result"]
                                                        , LoginUser);                               //4
                        #endregion
                        iUpdateCtr++;
                        if (iUpdateCtr == 150) //approx 10 employees
                        {
                            dal.ExecuteNonQuery(strUpdateQuery);
                            strUpdateQuery = "";
                            iUpdateCtr = 0;
                        }
                    }
                    if (strUpdateQuery != "")
                        dal.ExecuteNonQuery(strUpdateQuery);

                    StatusHandler(this, new StatusEventArgs("Saving Time Register Misc Records", false));
                }
                //-----------------------------
                //Save Payroll Transaction Table
                StatusHandler(this, new StatusEventArgs("Saving Payroll Transaction Records", false));
                strUpdateQuery = "";
                iUpdateCtr = 0;
                #region Payroll Transaction Update
                strInsertIntoTemplate = string.Format(@" INSERT INTO {0} (Tph_IDNo,Tph_PayCycle,{1}Tph_LTHr,Tph_UTHr,Tph_UPLVHr,Tph_ABSLEGHOLHr,Tph_ABSSPLHOLHr,Tph_ABSCOMPHOLHr,Tph_ABSPSDHr,Tph_ABSOTHHOLHr,Tph_WDABSHr,Tph_LTUTMaxHr,Tph_ABSHr,Tph_REGHr,Tph_PDLVHr,Tph_PDLEGHOLHr,Tph_PDSPLHOLHr,Tph_PDCOMPHOLHr,Tph_PDPSDHr,Tph_PDOTHHOLHr,Tph_PDRESTLEGHOLHr,Tph_REGOTHr,Tph_REGNDHr,Tph_REGNDOTHr,Tph_RESTHr,Tph_RESTOTHr,Tph_RESTNDHr,Tph_RESTNDOTHr,Tph_LEGHOLHr,Tph_LEGHOLOTHr,Tph_LEGHOLNDHr,Tph_LEGHOLNDOTHr,Tph_SPLHOLHr,Tph_SPLHOLOTHr,Tph_SPLHOLNDHr,Tph_SPLHOLNDOTHr,Tph_PSDHr,Tph_PSDOTHr,Tph_PSDNDHr,Tph_PSDNDOTHr,Tph_COMPHOLHr,Tph_COMPHOLOTHr,Tph_COMPHOLNDHr,Tph_COMPHOLNDOTHr,Tph_RESTLEGHOLHr,Tph_RESTLEGHOLOTHr,Tph_RESTLEGHOLNDHr,Tph_RESTLEGHOLNDOTHr,Tph_RESTSPLHOLHr,Tph_RESTSPLHOLOTHr,Tph_RESTSPLHOLNDHr,Tph_RESTSPLHOLNDOTHr,Tph_RESTCOMPHOLHr,Tph_RESTCOMPHOLOTHr,Tph_RESTCOMPHOLNDHr,Tph_RESTCOMPHOLNDOTHr,Tph_RESTPSDHr,Tph_RESTPSDOTHr,Tph_RESTPSDNDHr,Tph_RESTPSDNDOTHr,Tph_SRGAdjHr,Tph_SRGAdjAmt,Tph_SOTAdjHr,Tph_SOTAdjAmt,Tph_SHOLAdjHr,Tph_SHOLAdjAmt,Tph_SNDAdjHr,Tph_SNDAdjAmt,Tph_SLVAdjHr,Tph_SLVAdjAmt,Tph_MRGAdjHr,Tph_MRGAdjAmt,Tph_MOTAdjHr,Tph_MOTAdjAmt,Tph_MHOLAdjHr,Tph_MHOLAdjAmt,Tph_MNDAdjHr,Tph_MNDAdjAmt,Tph_TotalAdjAmt,Tph_TaxableIncomeAmt,Tph_NontaxableIncomeAmt,Tph_WorkDay,Tph_PayrollType,Tph_PremiumGrpCode,Tph_RetainUserEntry,Usr_Login,Ludatetime) ", EmpPayTranHdrTable, strAdjPayPeriodHdrCol);
                strUpdateRecordTemplate = @"SELECT '{0}','{1}',{86}{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37},{38},{39},{40},{41},{42},{43},{44},{45},{46},{47},{48},{49},{50},{51},{52},{53},{54},{55},{56},{57},{58},{59},{60},{61},{62},{63},{64},{65},{66},{67},{68},{69},{70},{71},{72},{73},{74},{75},{76},{77},{78},{79},{80},'{81}','{82}','{83}','{84}','{85}',GETDATE() UNION ALL ";

                #endregion
                foreach (DataRow drEmployeePayrollTrans in dtEmpPayTranHdr.Rows)
                {
                    #region Payroll Transaction Save
                    strUpdateQuery += string.Format(strUpdateRecordTemplate                                 
                                                        , drEmployeePayrollTrans["Tph_IDNo"]                //0
                                                        , drEmployeePayrollTrans["Tph_PayCycle"]            //1
                                                        , drEmployeePayrollTrans["Tph_LTHr"]                //2
                                                        , drEmployeePayrollTrans["Tph_UTHr"]                //3
                                                        , drEmployeePayrollTrans["Tph_UPLVHr"]             //4
                                                        , drEmployeePayrollTrans["Tph_ABSLEGHOLHr"]         //5
                                                        , drEmployeePayrollTrans["Tph_ABSSPLHOLHr"]         //6
                                                        , drEmployeePayrollTrans["Tph_ABSCOMPHOLHr"]        
                                                        , drEmployeePayrollTrans["Tph_ABSPSDHr"]
                                                        , drEmployeePayrollTrans["Tph_ABSOTHHOLHr"]
                                                        , drEmployeePayrollTrans["Tph_WDABSHr"]             //10
                                                        , drEmployeePayrollTrans["Tph_LTUTMaxHr"]             
                                                        , drEmployeePayrollTrans["Tph_ABSHr"]
                                                        , drEmployeePayrollTrans["Tph_REGHr"]
                                                        , drEmployeePayrollTrans["Tph_PDLVHr"]
                                                        , drEmployeePayrollTrans["Tph_PDLEGHOLHr"]          //15
                                                        , drEmployeePayrollTrans["Tph_PDSPLHOLHr"]         
                                                        , drEmployeePayrollTrans["Tph_PDCOMPHOLHr"]
                                                        , drEmployeePayrollTrans["Tph_PDPSDHr"]
                                                        , drEmployeePayrollTrans["Tph_PDOTHHOLHr"]
                                                        , drEmployeePayrollTrans["Tph_PDRESTLEGHOLHr"]      //20
                                                        , drEmployeePayrollTrans["Tph_REGOTHr"]             
                                                        , drEmployeePayrollTrans["Tph_REGNDHr"]             
                                                        , drEmployeePayrollTrans["Tph_REGNDOTHr"]
                                                        , drEmployeePayrollTrans["Tph_RESTHr"]
                                                        , drEmployeePayrollTrans["Tph_RESTOTHr"]            //25
                                                        , drEmployeePayrollTrans["Tph_RESTNDHr"]            
                                                        , drEmployeePayrollTrans["Tph_RESTNDOTHr"]          
                                                        , drEmployeePayrollTrans["Tph_LEGHOLHr"]
                                                        , drEmployeePayrollTrans["Tph_LEGHOLOTHr"]
                                                        , drEmployeePayrollTrans["Tph_LEGHOLNDHr"]          //30
                                                        , drEmployeePayrollTrans["Tph_LEGHOLNDOTHr"]        
                                                        , drEmployeePayrollTrans["Tph_SPLHOLHr"]            
                                                        , drEmployeePayrollTrans["Tph_SPLHOLOTHr"]
                                                        , drEmployeePayrollTrans["Tph_SPLHOLNDHr"]
                                                        , drEmployeePayrollTrans["Tph_SPLHOLNDOTHr"]        //35
                                                        , drEmployeePayrollTrans["Tph_PSDHr"]               
                                                        , drEmployeePayrollTrans["Tph_PSDOTHr"]             
                                                        , drEmployeePayrollTrans["Tph_PSDNDHr"]
                                                        , drEmployeePayrollTrans["Tph_PSDNDOTHr"]
                                                        , drEmployeePayrollTrans["Tph_COMPHOLHr"]           //40
                                                        , drEmployeePayrollTrans["Tph_COMPHOLOTHr"]         
                                                        , drEmployeePayrollTrans["Tph_COMPHOLNDHr"]         
                                                        , drEmployeePayrollTrans["Tph_COMPHOLNDOTHr"]
                                                        , drEmployeePayrollTrans["Tph_RESTLEGHOLHr"]
                                                        , drEmployeePayrollTrans["Tph_RESTLEGHOLOTHr"]      //45
                                                        , drEmployeePayrollTrans["Tph_RESTLEGHOLNDHr"]      
                                                        , drEmployeePayrollTrans["Tph_RESTLEGHOLNDOTHr"]    
                                                        , drEmployeePayrollTrans["Tph_RESTSPLHOLHr"]
                                                        , drEmployeePayrollTrans["Tph_RESTSPLHOLOTHr"]
                                                        , drEmployeePayrollTrans["Tph_RESTSPLHOLNDHr"]      //50
                                                        , drEmployeePayrollTrans["Tph_RESTSPLHOLNDOTHr"]    
                                                        , drEmployeePayrollTrans["Tph_RESTCOMPHOLHr"]       
                                                        , drEmployeePayrollTrans["Tph_RESTCOMPHOLOTHr"]
                                                        , drEmployeePayrollTrans["Tph_RESTCOMPHOLNDHr"]
                                                        , drEmployeePayrollTrans["Tph_RESTCOMPHOLNDOTHr"]   //55
                                                        , drEmployeePayrollTrans["Tph_RESTPSDHr"]           
                                                        , drEmployeePayrollTrans["Tph_RESTPSDOTHr"]         
                                                        , drEmployeePayrollTrans["Tph_RESTPSDNDHr"]
                                                        , drEmployeePayrollTrans["Tph_RESTPSDNDOTHr"]       
                                                        , drEmployeePayrollTrans["Tph_SRGAdjHr"]            //60 
                                                        , drEmployeePayrollTrans["Tph_SRGAdjAmt"]           
                                                        , drEmployeePayrollTrans["Tph_SOTAdjHr"]            
                                                        , drEmployeePayrollTrans["Tph_SOTAdjAmt"]
                                                        , drEmployeePayrollTrans["Tph_SHOLAdjHr"]
                                                        , drEmployeePayrollTrans["Tph_SHOLAdjAmt"]          //65
                                                        , drEmployeePayrollTrans["Tph_SNDAdjHr"]            
                                                        , drEmployeePayrollTrans["Tph_SNDAdjAmt"]           
                                                        , drEmployeePayrollTrans["Tph_SLVAdjHr"]            
                                                        , drEmployeePayrollTrans["Tph_SLVAdjAmt"]
                                                        , drEmployeePayrollTrans["Tph_MRGAdjHr"]            //70
                                                        , drEmployeePayrollTrans["Tph_MRGAdjAmt"]           
                                                        , drEmployeePayrollTrans["Tph_MOTAdjHr"]            
                                                        , drEmployeePayrollTrans["Tph_MOTAdjAmt"]
                                                        , drEmployeePayrollTrans["Tph_MHOLAdjHr"]
                                                        , drEmployeePayrollTrans["Tph_MHOLAdjAmt"]          //75
                                                        , drEmployeePayrollTrans["Tph_MNDAdjHr"]            
                                                        , drEmployeePayrollTrans["Tph_MNDAdjAmt"]           
                                                        , drEmployeePayrollTrans["Tph_TotalAdjAmt"]
                                                        , drEmployeePayrollTrans["Tph_TaxableIncomeAmt"]
                                                        , drEmployeePayrollTrans["Tph_NontaxableIncomeAmt"] //80
                                                        , drEmployeePayrollTrans["Tph_WorkDay"]             
                                                        , drEmployeePayrollTrans["Tph_PayrollType"]         
                                                        , drEmployeePayrollTrans["Tph_PremiumGrpCode"]         
                                                        , drEmployeePayrollTrans["Tph_RetainUserEntry"]   
                                                        , drEmployeePayrollTrans["Usr_Login"]               //85
                                                        , strAdjPayPeriodVal                                //86
                                                        );                                           
                                                          
                    #endregion
                    iUpdateCtr++;
                    if (iUpdateCtr == 50)
                    {
                        if (strUpdateQuery != "")
                            strUpdateQuery = strUpdateQuery.Substring(0, strUpdateQuery.Length - 10);

                        dal.ExecuteNonQuery(strInsertIntoTemplate + strUpdateQuery);
                        strUpdateQuery = "";
                        iUpdateCtr = 0;

                    }
                }
                if (strUpdateQuery != "")
                {
                    strUpdateQuery = strUpdateQuery.Substring(0, strUpdateQuery.Length - 10);
                    dal.ExecuteNonQuery(strInsertIntoTemplate + strUpdateQuery);
                }
                //-----------------------------
                //Save Payroll Transaction Ext Table
                if (bHasDayCodeExt)
                {
                    strUpdateQuery = "";
                    iUpdateCtr = 0;
                    #region Payroll Transaction Ext Update
                    strInsertIntoTemplate = string.Format(@" INSERT INTO {0} (Tph_IDNo,Tph_PayCycle,{1}Tph_Misc1Hr,Tph_Misc1OTHr,Tph_Misc1NDHr,Tph_Misc1NDOTHr,Tph_Misc2Hr,Tph_Misc2OTHr,Tph_Misc2NDHr,Tph_Misc2NDOTHr,Tph_Misc3Hr,Tph_Misc3OTHr,Tph_Misc3NDHr,Tph_Misc3NDOTHr,Tph_Misc4Hr,Tph_Misc4OTHr,Tph_Misc4NDHr,Tph_Misc4NDOTHr,Tph_Misc5Hr,Tph_Misc5OTHr,Tph_Misc5NDHr,Tph_Misc5NDOTHr,Tph_Misc6Hr,Tph_Misc6OTHr,Tph_Misc6NDHr,Tph_Misc6NDOTHr,Usr_Login,Ludatetime) ", EmpPayTranHdrMiscTable, strAdjPayPeriodHdrCol); //gcd
                    strUpdateRecordTemplate = @"{0}{28} SELECT '{1}','{2}',{29}{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},'{27}',GetDate() UNION ALL ";
                    //strUpdateRecordTemplate = @" INSERT INTO {0} (Tph_IDNo,Tph_PayCycle,{28}Tph_Misc1Hr,Tph_Misc1OTHr,Tph_Misc1NDHr,Tph_Misc1NDOTHr,Tph_Misc2Hr,Tph_Misc2OTHr,Tph_Misc2NDHr,Tph_Misc2NDOTHr,Tph_Misc3Hr,Tph_Misc3OTHr,Tph_Misc3NDHr,Tph_Misc3NDOTHr,Tph_Misc4Hr,Tph_Misc4OTHr,Tph_Misc4NDHr,Tph_Misc4NDOTHr,Tph_Misc5Hr,Tph_Misc5OTHr,Tph_Misc5NDHr,Tph_Misc5NDOTHr,Tph_Misc6Hr,Tph_Misc6OTHr,Tph_Misc6NDHr,Tph_Misc6NDOTHr,Usr_Login,Ludatetime) VALUES('{1}','{2}',{29}{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},'{27}',GetDate()) ";
                    #endregion
                    foreach (DataRow drEmployeePayrollTransExt in dtEmpPayTranHdrMisc.Rows)
                    {
                        #region Payroll Transaction Ext Save
                        strUpdateQuery += string.Format(strUpdateRecordTemplate
                                                            , "" //EmpPayTranHdrTable + "Ext"                     //0
                                                            , drEmployeePayrollTransExt["Tph_IDNo"]
                                                            , drEmployeePayrollTransExt["Tph_PayCycle"]
                                                            , drEmployeePayrollTransExt["Tph_Misc1Hr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc1OTHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc1NDHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc1NDOTHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc2Hr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc2OTHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc2NDHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc2NDOTHr"]                //10
                                                            , drEmployeePayrollTransExt["Tph_Misc3Hr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc3OTHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc3NDHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc3NDOTHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc4Hr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc4OTHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc4NDHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc4NDOTHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc5Hr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc5OTHr"]                //20
                                                            , drEmployeePayrollTransExt["Tph_Misc5NDHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc5NDOTHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc6Hr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc6OTHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc6NDHr"]
                                                            , drEmployeePayrollTransExt["Tph_Misc6NDOTHr"]
                                                            , drEmployeePayrollTransExt["Usr_Login"]
                                                            , "" //strAdjPayPeriodCol
                                                            , strAdjPayPeriodVal);
                        #endregion
                        iUpdateCtr++;
                        if (iUpdateCtr == 50)
                        {
                            if (strUpdateQuery != "")
                                strUpdateQuery = strUpdateQuery.Substring(0, strUpdateQuery.Length - 10);

                            dal.ExecuteNonQuery(strInsertIntoTemplate + strUpdateQuery);
                            strUpdateQuery = "";
                            iUpdateCtr = 0;
                        }
                    }
                    if (strUpdateQuery != "")
                    {
                        strUpdateQuery = strUpdateQuery.Substring(0, strUpdateQuery.Length - 10);
                        dal.ExecuteNonQuery(strInsertIntoTemplate + strUpdateQuery);
                    }
                }
                //-----------------------------
                //if (!ProcessCurrentPeriod || Convert.ToBoolean(MULTSAL))
                //{
                //Save Payroll Transaction Detail Table
                strUpdateQuery = "";
                iUpdateCtr = 0;
                #region Payroll Transaction Detail Update
                strInsertIntoTemplate = string.Format(@" INSERT INTO {0} (Tpd_IDNo,Tpd_PayCycle,{1}Tpd_Date,Tpd_PayrollType,Tpd_PremiumGrpCode,Tpd_LTHr,Tpd_UTHr,Tpd_UPLVHr,Tpd_ABSLEGHOLHr,Tpd_ABSSPLHOLHr,Tpd_ABSCOMPHOLHr,Tpd_ABSPSDHr,Tpd_ABSOTHHOLHr,Tpd_WDABSHr,Tpd_LTUTMaxHr,Tpd_ABSHr,Tpd_REGHr,Tpd_PDLVHr,Tpd_PDLEGHOLHr,Tpd_PDSPLHOLHr,Tpd_PDCOMPHOLHr,Tpd_PDPSDHr,Tpd_PDOTHHOLHr,Tpd_PDRESTLEGHOLHr,Tpd_REGOTHr,Tpd_REGNDHr,Tpd_REGNDOTHr,Tpd_RESTHr,Tpd_RESTOTHr,Tpd_RESTNDHr,Tpd_RESTNDOTHr,Tpd_LEGHOLHr,Tpd_LEGHOLOTHr,Tpd_LEGHOLNDHr,Tpd_LEGHOLNDOTHr,Tpd_SPLHOLHr,Tpd_SPLHOLOTHr,Tpd_SPLHOLNDHr,Tpd_SPLHOLNDOTHr,Tpd_PSDHr,Tpd_PSDOTHr,Tpd_PSDNDHr,Tpd_PSDNDOTHr,Tpd_COMPHOLHr,Tpd_COMPHOLOTHr,Tpd_COMPHOLNDHr,Tpd_COMPHOLNDOTHr,Tpd_RESTLEGHOLHr,Tpd_RESTLEGHOLOTHr,Tpd_RESTLEGHOLNDHr,Tpd_RESTLEGHOLNDOTHr,Tpd_RESTSPLHOLHr,Tpd_RESTSPLHOLOTHr,Tpd_RESTSPLHOLNDHr,Tpd_RESTSPLHOLNDOTHr,Tpd_RESTCOMPHOLHr,Tpd_RESTCOMPHOLOTHr,Tpd_RESTCOMPHOLNDHr,Tpd_RESTCOMPHOLNDOTHr,Tpd_RESTPSDHr,Tpd_RESTPSDOTHr,Tpd_RESTPSDNDHr,Tpd_RESTPSDNDOTHr,Tpd_WorkDay,Usr_Login,Ludatetime) ", EmpPayTranDtlTable, strAdjPayPeriodDtlCol); 
                strUpdateRecordTemplate = @"SELECT '{0}','{1}',{65}'{2}','{3}','{4}',{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37},{38},{39},{40},{41},{42},{43},{44},{45},{46},{47},{48},{49},{50},{51},{52},{53},{54},{55},{56},{57},{58},{59},{60},{61},{62},{63},'{64}',GETDATE() UNION ALL ";
                #endregion
                foreach (DataRow drEmployeePayrollTransDetail in dtEmpPayTranDtl.Rows)
                {
                    #region Payroll Transaction Detail Save
                    strUpdateQuery += string.Format(strUpdateRecordTemplate                                                      
                                                        , drEmployeePayrollTransDetail["Tpd_IDNo"]                     //0
                                                        , drEmployeePayrollTransDetail["Tpd_PayCycle"]
                                                        , drEmployeePayrollTransDetail["Tpd_Date"]                                              
                                                        , drEmployeePayrollTransDetail["Tpd_PayrollType"]              
                                                        , drEmployeePayrollTransDetail["Tpd_PremiumGrpCode"]              
                                                        , drEmployeePayrollTransDetail["Tpd_LTHr"]                      //5
                                                        , drEmployeePayrollTransDetail["Tpd_UTHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_UPLVHr"]                   
                                                        , drEmployeePayrollTransDetail["Tpd_ABSLEGHOLHr"]                            
                                                        , drEmployeePayrollTransDetail["Tpd_ABSSPLHOLHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_ABSCOMPHOLHr"]              //10
                                                        , drEmployeePayrollTransDetail["Tpd_ABSPSDHr"]                                       
                                                        , drEmployeePayrollTransDetail["Tpd_ABSOTHHOLHr"]               
                                                        , drEmployeePayrollTransDetail["Tpd_WDABSHr"]                    
                                                        , drEmployeePayrollTransDetail["Tpd_LTUTMaxHr"]                 
                                                        , drEmployeePayrollTransDetail["Tpd_ABSHr"]                     //15
                                                        , drEmployeePayrollTransDetail["Tpd_REGHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_PDLVHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_PDLEGHOLHr"]                
                                                        , drEmployeePayrollTransDetail["Tpd_PDSPLHOLHr"]                
                                                        , drEmployeePayrollTransDetail["Tpd_PDCOMPHOLHr"]               //20
                                                        , drEmployeePayrollTransDetail["Tpd_PDPSDHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_PDOTHHOLHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_PDRESTLEGHOLHr"]            
                                                        , drEmployeePayrollTransDetail["Tpd_REGOTHr"]                   
                                                        , drEmployeePayrollTransDetail["Tpd_REGNDHr"]                   //25               
                                                        , drEmployeePayrollTransDetail["Tpd_REGNDOTHr"]                 
                                                        , drEmployeePayrollTransDetail["Tpd_RESTHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_RESTOTHr"]                  
                                                        , drEmployeePayrollTransDetail["Tpd_RESTNDHr"]                                                      
                                                        , drEmployeePayrollTransDetail["Tpd_RESTNDOTHr"]                //30               
                                                        , drEmployeePayrollTransDetail["Tpd_LEGHOLHr"]                  
                                                        , drEmployeePayrollTransDetail["Tpd_LEGHOLOTHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_LEGHOLNDHr"]                
                                                        , drEmployeePayrollTransDetail["Tpd_LEGHOLNDOTHr"]                  
                                                        , drEmployeePayrollTransDetail["Tpd_SPLHOLHr"]                  //35             
                                                        , drEmployeePayrollTransDetail["Tpd_SPLHOLOTHr"]               
                                                        , drEmployeePayrollTransDetail["Tpd_SPLHOLNDHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_SPLHOLNDOTHr"]              
                                                        , drEmployeePayrollTransDetail["Tpd_PSDHr"]                                       
                                                        , drEmployeePayrollTransDetail["Tpd_PSDOTHr"]                   //40                
                                                        , drEmployeePayrollTransDetail["Tpd_PSDNDHr"]                   
                                                        , drEmployeePayrollTransDetail["Tpd_PSDNDOTHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_COMPHOLHr"]                 
                                                        , drEmployeePayrollTransDetail["Tpd_COMPHOLOTHr"]               
                                                        , drEmployeePayrollTransDetail["Tpd_COMPHOLNDHr"]               //45              
                                                        , drEmployeePayrollTransDetail["Tpd_COMPHOLNDOTHr"]  
                                                        , drEmployeePayrollTransDetail["Tpd_RESTLEGHOLHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_RESTLEGHOLOTHr"]            
                                                        , drEmployeePayrollTransDetail["Tpd_RESTLEGHOLNDHr"]                               
                                                        , drEmployeePayrollTransDetail["Tpd_RESTLEGHOLNDOTHr"]          //50         
                                                        , drEmployeePayrollTransDetail["Tpd_RESTSPLHOLHr"]              
                                                        , drEmployeePayrollTransDetail["Tpd_RESTSPLHOLOTHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_RESTSPLHOLNDHr"]            
                                                        , drEmployeePayrollTransDetail["Tpd_RESTSPLHOLNDOTHr"]          
                                                        , drEmployeePayrollTransDetail["Tpd_RESTCOMPHOLHr"]             //55                                
                                                        , drEmployeePayrollTransDetail["Tpd_RESTCOMPHOLOTHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_RESTCOMPHOLNDHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_RESTCOMPHOLNDOTHr"]         
                                                        , drEmployeePayrollTransDetail["Tpd_RESTPSDHr"]                 
                                                        , drEmployeePayrollTransDetail["Tpd_RESTPSDOTHr"]               //60              
                                                        , drEmployeePayrollTransDetail["Tpd_RESTPSDNDHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_RESTPSDNDOTHr"]
                                                        , drEmployeePayrollTransDetail["Tpd_WorkDay"]                   
                                                        , drEmployeePayrollTransDetail["Usr_Login"]                                                           
                                                        , strAdjPayPeriodVal );                                         //65           
                    #endregion
                    iUpdateCtr++;
                    if (iUpdateCtr == 50)
                    {
                        if (strUpdateQuery != "")
                            strUpdateQuery = strUpdateQuery.Substring(0, strUpdateQuery.Length - 10);

                        dal.ExecuteNonQuery(strInsertIntoTemplate + strUpdateQuery);
                        strUpdateQuery = "";
                        iUpdateCtr = 0;
                    }
                }
                if (strUpdateQuery != "")
                {
                    strUpdateQuery = strUpdateQuery.Substring(0, strUpdateQuery.Length - 10);
                    dal.ExecuteNonQuery(strInsertIntoTemplate + strUpdateQuery);
                }
                //-----------------------------
                //Save Payroll Transaction Ext Detail Table
                if (bHasDayCodeExt)
                {
                    strUpdateQuery = "";
                    iUpdateCtr = 0;
                    #region Payroll Transaction Ext Detail Update
                    strInsertIntoTemplate = string.Format(@" INSERT INTO {0} (Tpd_IDNo,Tpd_PayCycle,{1}Tpd_Misc1Hr,Tpd_Misc1OTHr,Tpd_Misc1NDHr,Tpd_Misc1NDOTHr,Tpd_Misc2Hr,Tpd_Misc2OTHr,Tpd_Misc2NDHr,Tpd_Misc2NDOTHr,Tpd_Misc3Hr,Tpd_Misc3OTHr,Tpd_Misc3NDHr,Tpd_Misc3NDOTHr,Tpd_Misc4Hr,Tpd_Misc4OTHr,Tpd_Misc4NDHr,Tpd_Misc4NDOTHr,Tpd_Misc5Hr,Tpd_Misc5OTHr,Tpd_Misc5NDHr,Tpd_Misc5NDOTHr,Tpd_Misc6Hr,Tpd_Misc6OTHr,Tpd_Misc6NDHr,Tpd_Misc6NDOTHr,Usr_Login,Ludatetime,Tpd_Date) ", EmpPayTranDtlMiscTable, strAdjPayPeriodDtlCol);  
                    strUpdateRecordTemplate = @"{0}{29} SELECT '{1}','{2}',{30}{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26},'{27}',GetDate(),'{28}' UNION ALL ";
                    #endregion
                    foreach (DataRow drEmployeePayrollTransExtDetail in dtEmpPayTranDtlMisc.Rows)
                    {
                        #region Payroll Transaction Ext Detail Save
                        strUpdateQuery += string.Format(strUpdateRecordTemplate
                                                            , "" //EmpPayTranHdrTable + "ExtDetail"                     //0
                                                            , drEmployeePayrollTransExtDetail["Tpd_IDNo"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_PayCycle"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc1Hr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc1OTHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc1NDHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc1NDOTHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc2Hr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc2OTHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc2NDHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc2NDOTHr"]                //10
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc3Hr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc3OTHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc3NDHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc3NDOTHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc4Hr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc4OTHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc4NDHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc4NDOTHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc5Hr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc5OTHr"]                //20
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc5NDHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc5NDOTHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc6Hr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc6OTHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc6NDHr"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Misc6NDOTHr"]
                                                            , drEmployeePayrollTransExtDetail["Usr_Login"]
                                                            , drEmployeePayrollTransExtDetail["Tpd_Date"]
                                                            , "" //strAdjPayPeriodCol                                        
                                                            , strAdjPayPeriodVal);                                          //30 
                        #endregion
                        iUpdateCtr++;
                        if (iUpdateCtr == 50)
                        {
                            if (strUpdateQuery != "")
                                strUpdateQuery = strUpdateQuery.Substring(0, strUpdateQuery.Length - 10);

                            dal.ExecuteNonQuery(strInsertIntoTemplate + strUpdateQuery);
                            strUpdateQuery = "";
                            iUpdateCtr = 0;
                        }
                    }
                    if (strUpdateQuery != "")
                    {
                        strUpdateQuery = strUpdateQuery.Substring(0, strUpdateQuery.Length - 10);
                        dal.ExecuteNonQuery(strInsertIntoTemplate + strUpdateQuery);
                    }
                }

                //Update Payroll Rates
                //UpdateSalaryRatePerDay(ProcessAll, EmployeeId);
                //}
                StatusHandler(this, new StatusEventArgs("Saving Payroll Transaction Records", true));
                //-----------------------------
                StatusHandler(this, new StatusEventArgs("Computing Variable Allowances", false));
                //Process Daily Allowance
                if (ProcessAll && ProcessCurrentPeriod && !ProcessSeparated)
                {
                    SystemCycleProcessingBL.GenerateOtherAllowances(ProcessAll, "", EmployeeList, ProcessCurrentPeriod, "");
                    SystemCycleProcessingBL.PostOtherAllowances(ProcessAll, "", EmployeeList, ProcessPayrollPeriod);
                }
                else if (((!ProcessAll && EmployeeId != "") || EmployeeList != "") && !ProcessSeparated)
                {
                    SystemCycleProcessingBL.GenerateOtherAllowances(ProcessAll, EmployeeId, EmployeeList, ProcessCurrentPeriod, "");
                    if (ProcessCurrentPeriod)
                        SystemCycleProcessingBL.PostOtherAllowances(ProcessAll, EmployeeId, EmployeeList, ProcessPayrollPeriod);
                }
                StatusHandler(this, new StatusEventArgs("Computing Variable Allowances", true));
                //-----------------------------
                StatusHandler(this, new StatusEventArgs("Generating Time and Attendance Errors and Warnings", false));
                if (ProcessCurrentPeriod)
                {
                    #region Generate Payroll Transaction Error List
                    DataSet tempds = GetLaborHoursNegative(ProcessAll, EmployeeId);
                    if (tempds.Tables[0].Rows.Count > 0)
                        dtErrList = CreateErrorListForPayTrans(dtErrList, tempds);

                    //Append labor hour generation errors
                    dtErrList = SaveLaborHourErrorReportList(dtErrList);

                    if (dtErrList.Rows.Count > 0)
                        InsertToLaborHrErr(dtErrList);
                    #endregion
                }
                StatusHandler(this, new StatusEventArgs("Generating Time and Attendance Errors and Warnings", true));
                //-----------------------------
                //code end
                //dal.CommitTransactionSnapshot();
            }
            catch (Exception ex)
            {
                //dal.RollBackTransactionSnapshot();
                CommonProcedures.logErrorToFile(ex.ToString());
                throw new Exception("Time and Attendance generation has encountered some errors: \n" + ex.Message);
            }
            finally
            {
                //dal.CloseDB();
            }

            return dtErrList;
        }
        #endregion

        #region Minor Functions
        public void SetProcessFlags()
        {
            string strResult = string.Empty;
            #region Parameters
            StatusHandler(this, new StatusEventArgs("Loading Parameters", false));
            StatusHandler(this, new StatusEventArgs("Loading Parameters", true));

            strResult = commonBL.GetParameterValueFromPayroll("OTMINHR", companyCode, dal);
            OTMINHR = strResult.Equals(string.Empty) ? 0 : Convert.ToDouble(strResult);
            OTMINHR_ORIG = OTMINHR;
            StatusHandler(this, new StatusEventArgs(string.Format(" OTMINHR = {0} ", OTMINHR), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" OTMINHR = {0} ", OTMINHR), true));

            strResult = commonBL.GetParameterDtlValueFromPayroll("OTMINHR", "REG", companyCode, dal);
            OTMINHR_REG = strResult.Equals(string.Empty) ? 0 : Convert.ToInt32(Convert.ToDouble(strResult));
            StatusHandler(this, new StatusEventArgs(string.Format(" OTMINHR_REG = {0} ", OTMINHR_REG), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" OTMINHR_REG = {0} ", OTMINHR_REG), true));

            strResult = commonBL.GetParameterDtlValueFromPayroll("OTMINHR", "NONREG", companyCode, dal);
            OTMINHR_NONREG = strResult.Equals(string.Empty) ? 0 : Convert.ToInt32(Convert.ToDouble(strResult));
            StatusHandler(this, new StatusEventArgs(string.Format(" OTMINHR_NONREG = {0} ", OTMINHR_NONREG), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" OTMINHR_NONREG = {0} ", OTMINHR_NONREG), true));

            strResult = commonBL.GetParameterDtlValueFromPayroll("NDMINHR", "REG", companyCode, dal);
            NDMINHR_REG = strResult.Equals(string.Empty) ? 0 : Convert.ToInt32(Convert.ToDouble(strResult));
            StatusHandler(this, new StatusEventArgs(string.Format(" NDMINHR_REG = {0} ", NDMINHR_REG), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" NDMINHR_REG = {0} ", NDMINHR_REG), true));

            strResult = commonBL.GetParameterDtlValueFromPayroll("NDMINHR", "NONREG", companyCode, dal);
            NDMINHR_NONREG = strResult.Equals(string.Empty) ? 0 : Convert.ToInt32(Convert.ToDouble(strResult));
            StatusHandler(this, new StatusEventArgs(string.Format(" NDMINHR_NONREG = {0} ", NDMINHR_NONREG), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" NDMINHR_NONREG = {0} ", NDMINHR_NONREG), true));

            strResult = commonBL.GetParameterValueFromPayroll("NDFRACTION", companyCode, dal);
            NDFRACTION = strResult.Equals(string.Empty) ? 0 : Convert.ToDouble(strResult);
            StatusHandler(this, new StatusEventArgs(string.Format(" NDFRACTION = {0} ", NDFRACTION), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" NDFRACTION = {0} ", NDFRACTION), true));

            strResult = commonBL.GetParameterDtlValueFromPayroll("ABSFRACT", "REG", companyCode, dal);
            ABSFRACT_REG = strResult.Equals(string.Empty) ? 0 : Convert.ToInt32(Convert.ToDouble(strResult));
            StatusHandler(this, new StatusEventArgs(string.Format(" ABSFRACT_REG = {0} ", ABSFRACT_REG), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" ABSFRACT_REG = {0} ", ABSFRACT_REG), true));

            strResult = commonBL.GetParameterDtlValueFromPayroll("ABSFRACT", "NONREG", companyCode, dal);
            ABSFRACT_NONREG = strResult.Equals(string.Empty) ? 0 : Convert.ToInt32(Convert.ToDouble(strResult));
            StatusHandler(this, new StatusEventArgs(string.Format(" ABSFRACT_NONREG = {0} ", ABSFRACT_NONREG), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" ABSFRACT_NONREG = {0} ", ABSFRACT_NONREG), true));

            strResult = commonBL.GetParameterValueFromPayroll("OTLIMITHR", companyCode, dal);
            OTLIMITHR = strResult.Equals(string.Empty) ? 0 : Convert.ToDouble(strResult);
            OTLIMITHR_ORIG = OTLIMITHR;
            StatusHandler(this, new StatusEventArgs(string.Format(" OTLIMITHR = {0} ", OTLIMITHR), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" OTLIMITHR = {0} ", OTLIMITHR), true));

            strResult = commonBL.GetParameterValueFromPayroll("OTLIMITEQV", companyCode, dal);
            OTLIMITEQV = strResult.Equals(string.Empty) ? 0 : Convert.ToDouble(strResult);
            OTLIMITEQV_ORIG = OTLIMITEQV;
            StatusHandler(this, new StatusEventArgs(string.Format(" OTLIMITEQV = {0} ", OTLIMITEQV), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" OTLIMITEQV = {0} ", OTLIMITEQV), true));

            strResult = commonBL.GetParameterValueFromPayroll("OTLIMITAPP", companyCode, dal);
            OTLIMITAPP = strResult.Equals(string.Empty) ? 0 : Convert.ToDouble(strResult);
            StatusHandler(this, new StatusEventArgs(string.Format(" OTLIMITAPP = {0} ", OTLIMITAPP), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" OTLIMITAPP = {0} ", OTLIMITAPP), true));

            strResult = commonBL.GetParameterValueFromPayroll("TIMEFRAC", companyCode, dal);
            TIMEFRAC = strResult.Equals(string.Empty) ? 0 : Convert.ToInt32(Convert.ToDouble(strResult));
            StatusHandler(this, new StatusEventArgs(string.Format(" TIMEFRAC = {0} ", TIMEFRAC), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" TIMEFRAC = {0} ", TIMEFRAC), true));

            strResult = commonBL.GetParameterDtlValueFromPayroll("LATEGRACE", "IN1", companyCode);
            LATEGRACEIN1 = strResult.Equals(string.Empty) ? 0 : Convert.ToDouble(strResult);
            StatusHandler(this, new StatusEventArgs(string.Format("  LATEGRACEIN1 = {0}", LATEGRACEIN1), false));
            StatusHandler(this, new StatusEventArgs(string.Format("  LATEGRACEIN1 = {0}", LATEGRACEIN1), true));

            strResult = commonBL.GetParameterDtlValueFromPayroll("LATEGRACE", "IN2", companyCode);
            LATEGRACEIN2 = strResult.Equals(string.Empty) ? 0 : Convert.ToDouble(strResult);
            StatusHandler(this, new StatusEventArgs(string.Format("  LATEGRACEIN2 = {0}", LATEGRACEIN2), false));
            StatusHandler(this, new StatusEventArgs(string.Format("  LATEGRACEIN2 = {0}", LATEGRACEIN2), true));

            strResult = commonBL.GetParameterValueFromPayroll("MDIVISOR", companyCode, dal);
            MDIVISOR = strResult.Equals(string.Empty) ? 0 : Convert.ToDouble(strResult);
            StatusHandler(this, new StatusEventArgs(string.Format(" MDIVISOR = {0} ", MDIVISOR), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" MDIVISOR = {0} ", MDIVISOR), true));

            strResult = commonBL.GetParameterValueFromPayroll("OTFRACTION", companyCode, dal);
            OTFRACT = strResult.Equals(string.Empty) ? 0 : Convert.ToDouble(strResult);
            StatusHandler(this, new StatusEventArgs(string.Format(" OTFRACTION = {0} ", OTFRACT), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" OTFRACTION = {0} ", OTFRACT), true));

            strResult = commonBL.GetParameterValueFromPayroll("LATEMAXMIN", companyCode, dal);
            LATEMAXMIN = strResult.Equals(string.Empty) ? 0 : Convert.ToInt32(Convert.ToDouble(strResult));
            StatusHandler(this, new StatusEventArgs(string.Format(" LATEMAXMIN = {0} ", LATEMAXMIN), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" LATEMAXMIN = {0} ", LATEMAXMIN), true));

            strResult = commonBL.GetParameterValueFromPayroll("MAXUTMIN", companyCode, dal);
            MAXUTMIN = strResult.Equals(string.Empty) ? 0 : Convert.ToInt32(Convert.ToDouble(strResult));
            StatusHandler(this, new StatusEventArgs(string.Format(" MAXUTMIN = {0} ", MAXUTMIN), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" MAXUTMIN = {0} ", MAXUTMIN), true));

            strResult = commonBL.GetParameterValueFromPayroll("POCKETGAP", companyCode, dal);
            POCKETGAP = strResult.Equals(string.Empty) ? 0 : Convert.ToInt32(Convert.ToDouble(strResult));
            StatusHandler(this, new StatusEventArgs(string.Format(" POCKETGAP = {0} ", POCKETGAP), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" POCKETGAP = {0} ", POCKETGAP), true));

            strResult = commonBL.GetParameterValueFromPayroll("POCKETTIME", companyCode, dal);
            POCKETTIME = strResult.Equals(string.Empty) ? 0 : Convert.ToInt32(Convert.ToDouble(strResult));
            StatusHandler(this, new StatusEventArgs(string.Format(" POCKETTIME = {0} ", POCKETTIME), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" POCKETTIME = {0} ", POCKETTIME), true));

            strResult = commonBL.GetParameterValueFromPayroll("POCKETSIZE", companyCode, dal);
            POCKETSIZE = strResult.Equals(string.Empty) ? 0 : Convert.ToInt32(Convert.ToDouble(strResult));
            StatusHandler(this, new StatusEventArgs(string.Format(" POCKETSIZE = {0} ", POCKETSIZE), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" POCKETSIZE = {0} ", POCKETSIZE), true));

            strResult = commonBL.GetParameterValueFromPayroll("NDBRCKTCNT", companyCode, dal);
            NDBRCKTCNT = strResult.Equals(string.Empty) ? 1 : Convert.ToInt32(Convert.ToDouble(strResult));
            StatusHandler(this, new StatusEventArgs(string.Format(" NDBRCKTCNT = {0} ", NDBRCKTCNT), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" NDBRCKTCNT = {0} ", NDBRCKTCNT), true));

            MLPAYHOL = commonBL.GetParameterValueFromPayroll("MLPAYHOL", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" MLPAYHOL = {0} ", MLPAYHOL), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" MLPAYHOL = {0} ", MLPAYHOL), true));

            ONEPREVDAY = commonBL.GetParameterValueFromPayroll("ONEPREVDAY", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" ONEPREVDAY = {0} ", ONEPREVDAY), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" ONEPREVDAY = {0} ", ONEPREVDAY), true));

            REGPREVDAY = commonBL.GetParameterValueFromPayroll("REGPREVDAY", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" REGPREVDAY = {0} ", REGPREVDAY), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" REGPREVDAY = {0} ", REGPREVDAY), true));

            OTOFSETABS = commonBL.GetParameterValueFromPayroll("OTOFSETABS", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" OTOFSETABS = {0} ", OTOFSETABS), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" OTOFSETABS = {0} ", OTOFSETABS), true));

            LVHRENTRY = commonBL.GetParameterValueFromPayroll("LVHRENTRY", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" LVHRENTRY = {0} ", LVHRENTRY), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" LVHRENTRY = {0} ", LVHRENTRY), true));

            NOABSNWHRE = commonBL.GetParameterValueFromPayroll("NOABSNWHRE", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" NOABSNWHRE = {0} ", NOABSNWHRE), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" NOABSNWHRE = {0} ", NOABSNWHRE), true));

            OTFORMGR = commonBL.GetParameterValueFromPayroll("OTFORMGR", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" OTFORMGR = {0} ", OTFORMGR), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" OTFORMGR = {0} ", OTFORMGR), true));

            MULTSAL = commonBL.GetParameterValueFromPayroll("MULTSAL", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" MULTSAL = {0} ", MULTSAL), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" MULTSAL = {0} ", MULTSAL), true));

            PSDMONTHLY = commonBL.GetParameterValueFromPayroll("PSDMONTHLY", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" PSDMONTHLY = {0} ", PSDMONTHLY), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" PSDMONTHLY = {0} ", PSDMONTHLY), true));

            NDOTAM = commonBL.GetParameterValueFromPayroll("NDOTAM", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" NDOTAM = {0} ", NDOTAM), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" NDOTAM = {0} ", NDOTAM), true));

            NDALL = commonBL.GetParameterValueFromPayroll("NDALL", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" NDALL = {0} ", NDALL), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" NDALL = {0} ", NDALL), true));

            strResult = commonBL.GetParameterValueFromPayroll("NDCNTBREAK", companyCode, dal);
            NDCNTBREAK = (strResult.Equals(string.Empty) ? "" : strResult.ToUpper());
            StatusHandler(this, new StatusEventArgs(string.Format(" NDCNTBREAK = {0} ", NDCNTBREAK), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" NDCNTBREAK = {0} ", NDCNTBREAK), true));

            strResult = commonBL.GetParameterValueFromPayroll("HRFRCLBRHR", companyCode, dal);
            HRFRCLBRHR = (strResult.Equals(string.Empty) ? "" : strResult.ToUpper());
            StatusHandler(this, new StatusEventArgs(string.Format(" HRFRCLBRHR = {0} ", HRFRCLBRHR), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" HRFRCLBRHR = {0} ", HRFRCLBRHR), true));

            strResult = commonBL.GetParameterValueFromPayroll("LBRHRFORMULA", companyCode, dal);
            LBRHRFORMULA = (strResult.Equals(string.Empty) ? "" : strResult.ToUpper());
            StatusHandler(this, new StatusEventArgs(string.Format(" LBRHRFORMULA = {0} ", LBRHRFORMULA), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" LBRHRFORMULA = {0} ", LBRHRFORMULA), true));

            EXTREGLVE = commonBL.GetParameterValueFromPayroll("EXTREGLVE", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" EXTREGLVE = {0} ", EXTREGLVE), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" EXTREGLVE = {0} ", EXTREGLVE), true));

            EXTREGULVE = commonBL.GetParameterValueFromPayroll("EXTREGULVE", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" EXTREGULVE = {0} ", EXTREGULVE), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" EXTREGULVE = {0} ", EXTREGULVE), true));

            LVWDSHIFT = commonBL.GetParameterValueFromPayroll("LVWDSHIFT", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" LVWDSHIFT = {0}", LVWDSHIFT), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" LVWDSHIFT = {0}", LVWDSHIFT), true));

            OTROUNDING = commonBL.GetParameterValueFromPayroll("OTROUNDING", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" OTROUNDING = {0} ", OTROUNDING), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" OTROUNDING = {0} ", OTROUNDING), true));

            OTRNDFRAC = commonBL.GetParameterValueFromPayroll("OTRNDFRAC", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" OTRNDFRAC = {0} ", OTRNDFRAC), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" OTRNDFRAC = {0} ", OTRNDFRAC), true));

            LATEFREQ = commonBL.GetParameterValueFromPayroll("LATEFREQ", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" LATEFREQ = {0} ", LATEFREQ), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" LATEFREQ = {0} ", LATEFREQ), true));

            CNTPDBRK = commonBL.GetParameterValueFromPayroll("CNTPDBRK", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" CNTPDBRK = {0} ", CNTPDBRK), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" CNTPDBRK = {0} ", CNTPDBRK), true));

            FLEXSHIFT = commonBL.GetParameterValueFromPayroll("FLEXSHIFT", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format(" FLEXSHIFT = {0} ", FLEXSHIFT), false));
            StatusHandler(this, new StatusEventArgs(string.Format(" FLEXSHIFT = {0} ", FLEXSHIFT), true));

            #endregion

            #region Parameter List
            LATEBRCKTD = GetBracketParameter("LATEBRCKTD");
            StatusHandler(this, new StatusEventArgs(string.Format("Getting late bracket deduction"), false));
            StatusHandler(this, new StatusEventArgs(string.Format("Getting late bracket deduction"), true));

            UTIMEBRCKT = GetBracketParameter("UTIMEBRCKT");
            StatusHandler(this, new StatusEventArgs(string.Format("Getting undertime bracket deduction"), false));
            StatusHandler(this, new StatusEventArgs(string.Format("Getting undertime bracket deduction"), true));

            REGHRSREQD = commonBL.GetParameterDtlListfromPayroll("REGHRSREQD", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format("Getting regular hours requirement"), false));
            StatusHandler(this, new StatusEventArgs(string.Format("Getting regular hours requirement"), true));

            MINOTHR_TBL = commonBL.GetParameterDtlListfromPayroll("OTMINHR", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format("Getting minimum overtime hour"), false));
            StatusHandler(this, new StatusEventArgs(string.Format("Getting minimum overtime hour"), true));

            OTLIMITHR_TBL = commonBL.GetParameterDtlListfromPayroll("OTLIMITHR", companyCode, dal);
            OTLIMITEQV_TBL = commonBL.GetParameterDtlListfromPayroll("OTLIMITEQV", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format("Getting overtime limit for managers"), false));
            StatusHandler(this, new StatusEventArgs(string.Format("Getting overtime limit for managers"), true));

            ULPREVDAY = commonBL.GetParameterDtlListfromPayroll("ULPREVDAY", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format("Getting unpaid leaves allowed before holiday"), false));
            StatusHandler(this, new StatusEventArgs(string.Format("Getting unpaid leaves allowed before holiday"), true));

            LT2UT2LEAVETYPE = commonBL.GetParameterDtlListfromPayroll("LT2UT2LEAVETYPE", companyCode, dal);
            StatusHandler(this, new StatusEventArgs(string.Format("Getting late2 Convert to undertime2 according to leave type"), false));
            StatusHandler(this, new StatusEventArgs(string.Format("Getting late2 Convert to undertime2 according to leave type"), true));

            strResult = commonBL.GetPolicyDtlParameterValue("OTTYPE", "M", companyCode, dal);
            MIDOT = (strResult.Equals("1") ? true : false);
            StatusHandler(this, new StatusEventArgs(string.Format("Getting mid-overtime status"), false));
            StatusHandler(this, new StatusEventArgs(string.Format("Getting mid-overtime status"), true));

            NP1_BEGTIME = GetMinsFromHourStr(commonBL.GetParameterDtlValueFromPayroll("NDBRACKET", "NP1_BEGINTIME", companyCode, dal));
            NP1_ENDTIME = GetMinsFromHourStr(commonBL.GetParameterDtlValueFromPayroll("NDBRACKET", "NP1_ENDTIME", companyCode, dal));
            if (NP1_ENDTIME < NP1_BEGTIME)
                NP1_ENDTIME += GRAVEYARD24;

            NP2_BEGTIME = GetMinsFromHourStr(commonBL.GetParameterDtlValueFromPayroll("NDBRACKET", "NP2_BEGINTIME", companyCode, dal));
            NP2_ENDTIME = GetMinsFromHourStr(commonBL.GetParameterDtlValueFromPayroll("NDBRACKET", "NP2_ENDTIME", companyCode, dal));
            if (NP2_ENDTIME < NP2_BEGTIME)
                NP2_ENDTIME += GRAVEYARD24;

            NIGHTDIFFGRAVEYARDSTART = GetMinsFromHourStr(commonBL.GetParameterDtlValueFromPayroll("NDBRACKET", "NP1_BEGINTIME", companyCode, dal));
            NIGHTDIFFGRAVEYARDEND = GetMinsFromHourStr(commonBL.GetParameterDtlValueFromPayroll("NDBRACKET", "NP1_ENDTIME", companyCode, dal));
            if (NIGHTDIFFGRAVEYARDEND < NIGHTDIFFGRAVEYARDSTART)
                NIGHTDIFFGRAVEYARDEND += GRAVEYARD24;

            NIGHTDIFFAMSTART = GetMinsFromHourStr(commonBL.GetParameterDtlValueFromPayroll("NDAMCUTOFF", "NDBEGIN", companyCode, dal));
            NIGHTDIFFAMEND = GetMinsFromHourStr(commonBL.GetParameterDtlValueFromPayroll("NDAMCUTOFF", "NDEND", companyCode, dal));
            if (NIGHTDIFFAMEND < NIGHTDIFFAMSTART)
                NIGHTDIFFAMEND += GRAVEYARD24;

            StatusHandler(this, new StatusEventArgs(string.Format("Getting night diff parameters"), false));
            StatusHandler(this, new StatusEventArgs(string.Format("Getting night diff parameters"), true));

            //MSTDFPM_SHIFT = commonBL.GetParameterDtlValueFromCentral("MSTDFPM", "SHIFT", companyCode, centralProfile);
            //StatusHandler(this, new StatusEventArgs(string.Format("Getting overtime limit for managers"), false));
            //StatusHandler(this, new StatusEventArgs(string.Format("Getting overtime limit for managers"), true));

            #endregion
        }

        public void CheckPreProcessingTimeExists(string ProfileCode, string CentralProfile, string PayCycle,string EmployeeID, string CostCenter, string UserLogin, string CompanyCode, DALHelper dalHelper)
        {
            #region Query
            string condition = string.Empty;
            if (CostCenter != string.Empty)
            {
                condition += string.Format("And Mem_CostcenterCode IN ({0})", (new CommonBL()).EncodeFilterItems(CostCenter, true));
            }
            string query = string.Format(@"
                            DECLARE @EndCycle DATETIME
                            DECLARE @CurPPCnt as tinyint
                                
                            SELECT @CurPPCnt = datediff(dd,Tps_StartCycle,Tps_EndCycle+1)
                                    , @EndCycle = Tps_EndCycle
                            FROM T_PaySchedule
                            WHERE Tps_PayCycle = '{3}'

                            DELETE FROM T_EmpLaborCheck WHERE Tlc_SystemDefined = 1
                                    AND Tlc_PayCycle = '{3}'
                                    AND ('{2}' = '' OR Tlc_IDNo = '{2}')

                            INSERT INTO T_EmpLaborCheck

                            SELECT Ttr_IDNo
                              , 'BW' 
                              , '{3}'
                              , CONVERT(DATE, Ttr_Date) 
                              , NULL 
                              , RTRIM(Ttr_DayCode) + CASE WHEN Mdy_DayCode is null THEN ' day code is not in Master' ELSE ' day code is inactive' END    
                              , 1  
                              , '{4}'
                              , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS
                            INNER JOIN {0}..M_Day ON Mdy_DayCode = Ttr_DayCode
                                AND Mdy_CompanyCode = '{1}'
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Ttr_PayCycle = '{3}'
                                AND ('{2}' = '' OR Ttr_IDNo = '{2}')
                                AND (Mdy_DayCode IS NULL OR Mdy_RecordStatus = 'C')   

                            UNION ALL

                            SELECT Ttr_IDNo
                              , 'BW' 
                              , '{3}'
                              , CONVERT(DATE, Ttr_Date) 
                              , NULL 
                              , RTRIM(Ttr_ShiftCode) + CASE WHEN Msh_ShiftCode is null THEN ' shift is not in Master' ELSE ' shift is inactive' END    
                              , 1  
                              , '{4}'
                              , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS
                            INNER JOIN {0}..M_Shift ON Msh_Shiftcode = Ttr_ShiftCode
                                AND Msh_CompanyCode = '{1}'
                                AND (Msh_ShiftCode IS NULL OR Msh_RecordStatus = 'C')
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Ttr_PayCycle = '{3}'
                                AND ('{2}' = '' OR Ttr_IDNo = '{2}')

                            UNION ALL

                            SELECT Ttr_IDNo
		                            ,'BW' 
		                            , '{3}'
		                            , CONVERT(DATE, Ttr_Date)  
                                    , NULL
		                            , RTRIM(Ttr_ShiftCode) + ' shift on ' + {0}.dbo.Udf_GetTitleCase(Mdy_dayname) + ' is more than 8 hours'    
		                            , 1  
                                    , '{4}'
		                            , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                    @CONDITIONS
                            INNER JOIN {0}..M_Shift ON Msh_Shiftcode = Ttr_ShiftCode
                                    AND Msh_CompanyCode = '{1}'
                                    AND Msh_ShiftHours > 8   
                            @USERCOSTCENTERACCESSCONDITION
                            INNER JOIN {0}..M_Day ON Mdy_Daycode = Ttr_Daycode
                                    AND Mdy_CompanyCode = '{1}'
                            WHERE Ttr_PayCycle = '{3}'
	                            AND ('{2}' = '' OR Ttr_IDNo = '{2}')
	                            AND Ttr_DayCode <>  'REG' 
                                AND Ttr_ActIn_1 + Ttr_ActOut_1 + Ttr_ActIn_2 + Ttr_ActOut_2 <> '0000000000000000' 

                            UNION ALL

                            SELECT  Ttr_IDNo
		                            ,'BW' 
		                            ,'{3}'
		                            , CONVERT(DATE, Ttr_Date)   
                                    , NULL
		                            ,'Regular day with Restday flag'  
                                    , 1  
		                            , '{4}'
		                            , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo    
                                @CONDITIONS   
                            INNER JOIN {0}..M_Day ON Mdy_DayCode = Ttr_DayCode
                                AND Mdy_CompanyCode = '{1}'
                                AND Mdy_RestdayFlag = 0
	                            AND Mdy_HolidayFlag = 0 
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Ttr_PayCycle = '{3}'
	                            AND ('{2}' = '' OR Ttr_IDNo = '{2}')
	                            AND Ttr_RestDayFlag  = 1                                 

                            UNION ALL

                            SELECT  Mem_IDNo
                              , 'BW'
                              , '{3}'
                              , NULL
                              , NULL
                              , 'No Restday set for the whole pay cycle'
                              , 1
                              , '{4}'
                              , GETDATE()
                            FROM M_Employee
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Mem_IDNo IN(SELECT Ttr_IDNo
                                             FROM T_EmpTimeRegister
                                             WHERE Ttr_PayCycle = '{3}'
                                             AND Ttr_Daycode = 'REG'
                                             GROUP BY Ttr_IDNo
                                             HAVING COUNT(Ttr_IDNo) = @CurPPCnt)
                                AND ('{2}' = '' OR Mem_IDNo = '{2}')
                                @CONDITIONS    

                            UNION ALL

                            SELECT Ttr_IDNo
		                            ,'BW' 
		                            ,'{3}'
		                            , CONVERT(DATE, Ttr_Date)   
                                    , NULL
		                            ,'Wrong Restday flag set'  
                                    , 1  
		                            , '{4}'
		                            , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS 
                            INNER JOIN {0}..M_Day ON Mdy_DayCode = Ttr_DayCode
                                AND Mdy_CompanyCode = '{1}'
                                AND Mdy_HolidayFlag = 0
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Ttr_PayCycle = '{3}'
	                            AND ('{2}' = '' OR Ttr_IDNo = '{2}')
	                            AND Ttr_RestDayFlag <> Mdy_RestdayFlag

                            UNION ALL

                            SELECT  Ttr_IDNo
		                            ,'BW' 
		                            ,'{3}'
		                            , NULL 
                                    , NULL
		                            ,'No Restday set'
                                    , 1  
		                            , '{4}'
		                            , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Ttr_PayCycle = '{3}'
	                            AND ('{2}' = '' OR Ttr_IDNo = '{2}')
                            GROUP BY Ttr_IDNo
                            HAVING SUM(CASE WHEN Ttr_RestDayFlag = 1 THEN 1 ELSE 0 END) = 0  

                            UNION ALL

                            SELECT  Ttr_IDNo
                              , 'BW'
                              , '{3}'
                              , CONVERT(DATE, Ttr_Date)
                              , NULL
                              , CASE WHEN(Ttr_WorkLocationCode IS NULL OR LEN(RTRIM(Ttr_WorkLocationCode)) = 0) THEN 'No Work location set'
                                    WHEN Mcd_Code IS NULL THEN Ttr_WorkLocationCode + ' work location is not in Master'
                                    WHEN Mcd_RecordStatus = 'C' THEN Ttr_WorkLocationCode + ' work location is inactive' END
                              , 1
                              , '{4}'
                              , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            LEFT JOIN {0}..M_CodeDtl ON Mcd_CompanyCode = '{1}'
                                AND Mcd_CodeType = 'ZIPCODE'
                                AND Mcd_Code = Ttr_WorkLocationCode
                            WHERE Ttr_PayCycle = '{3}'
                                AND ('{2}' = '' OR Ttr_IDNo = '{2}')
                                AND((Ttr_WorkLocationCode IS NULL OR LEN(RTRIM(Ttr_WorkLocationCode)) = 0) OR (Mcd_Code IS NULL OR Mcd_RecordStatus = 'C'))

                            UNION ALL

                            SELECT  Ttr_IDNo
                              , 'BW' 
                              , '{3}'
                              , CONVERT(DATE, Ttr_Date) 
                              , NULL
                              , CASE WHEN (Ttr_PremiumGrpCode IS NULL OR LEN(RTRIM(Ttr_PremiumGrpCode))=0) THEN 'No premium group set'
                                    WHEN Mcd_Code IS NULL THEN Ttr_PremiumGrpCode + ' premium group is not in Master'
                                    WHEN Mcd_RecordStatus = 'C' THEN Ttr_PremiumGrpCode + ' premium group is inactive' END
                              , 1    
                              , '{4}'
                              , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            LEFT JOIN {0}..M_CodeDtl on Mcd_CompanyCode = '{1}'
                                AND Mcd_CodeType='PREMGRP'
                                AND Mcd_Code = Ttr_PremiumGrpCode
                            WHERE Ttr_PayCycle = '{3}'
                                AND ('{2}' = '' OR Ttr_IDNo = '{2}')
                                AND ((Ttr_PremiumGrpCode IS NULL OR LEN(RTRIM(Ttr_PremiumGrpCode))=0) OR (Mcd_Code IS NULL OR Mcd_RecordStatus = 'C'))

                            UNION ALL

                            SELECT  Ttr_IDNo
                              , 'BW'
                              , '{3}'
                              , CONVERT(DATE, Ttr_Date)
                              , NULL
                              , CASE WHEN(Ttr_PayrollType IS NULL OR LEN(RTRIM(Ttr_PayrollType)) = 0) THEN 'No payroll type set'
                                    WHEN Mcd_Code IS NULL THEN Ttr_PayrollType + ' payroll type is not in Master'
                                    WHEN Mcd_RecordStatus = 'C' THEN Ttr_PayrollType + ' payroll type is inactive' END
                              , 1
                              , '{4}'
                              , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            LEFT JOIN {0}..M_CodeDtl ON Mcd_CompanyCode = '{1}'
                                AND Mcd_CodeType = 'PAYTYPE'
                                AND Mcd_Code = Ttr_PayrollType
                            WHERE Ttr_PayCycle = '{3}'  
                                AND ('{2}' = '' OR Ttr_IDNo = '{2}')
                                AND((Ttr_PayrollType IS NULL OR LEN(RTRIM(Ttr_PayrollType)) = 0) OR (Mcd_Code IS NULL OR Mcd_RecordStatus = 'C'))
                            
                            UNION ALL

                            SELECT  Ttr_IDNo
                              , 'BW'
                              , '{3}'
                              , CONVERT(DATE, Ttr_Date)
                              , NULL
                              , CASE WHEN(Ttr_EmploymentStatusCode IS NULL OR LEN(RTRIM(Ttr_EmploymentStatusCode)) = 0) THEN 'No employment status set'
                                    WHEN Mcd_Code IS NULL THEN Ttr_EmploymentStatusCode + ' employment status is not in Master'
                                    WHEN Mcd_RecordStatus = 'C' THEN Ttr_EmploymentStatusCode + ' employment status is inactive' END
                              , 1
                              , '{4}'
                              , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            LEFT JOIN {0}..M_CodeDtl on Mcd_CompanyCode = '{1}'
                                AND Mcd_CodeType = 'EMPSTAT'
                                AND Mcd_Code = Ttr_EmploymentStatusCode
                            WHERE Ttr_PayCycle = '{3}'
                                AND ('{2}' = '' OR Ttr_IDNo = '{2}')
                                AND((Ttr_EmploymentStatusCode IS NULL OR LEN(RTRIM(Ttr_EmploymentStatusCode)) = 0) OR (Mcd_Code IS NULL OR Mcd_RecordStatus = 'C'))

                            UNION ALL

                            SELECT Ttr_IDNo
                                 , 'BW'
                                 , '{3}'
                                 , CONVERT(DATE, Ttr_Date)
                                 , NULL
                                 , 'No Holiday set'
                                 , 1
                                 , '{4}'
                                 , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            LEFT JOIN {0}..T_Holiday ON Thl_HolidayDate = Ttr_Date
								AND (Ttr_WorkLocationCode IN (SELECT Data FROM {0}.dbo.Udf_Split(Thl_LocationCode,',')) OR Thl_LocationCode = 'ALL')	 
								AND	(Ttr_PayrollGroup IN (SELECT Data FROM {0}.dbo.Udf_Split(Thl_PayrollGroup,',')) OR Thl_PayrollGroup = 'ALL')
								AND	(Ttr_PayrollType IN (SELECT Data FROM {0}.dbo.Udf_Split(Thl_PayrollType,',')) OR Thl_PayrollType = 'ALL')
								AND	(Ttr_EmploymentStatusCode IN (SELECT Data FROM {0}.dbo.Udf_Split(Thl_EmploymentStatus,',')) OR Thl_EmploymentStatus = 'ALL')
								AND	(Ttr_CalendarGroup IN (SELECT Data FROM {0}.dbo.Udf_Split(Thl_CalendarGroup,',')) OR Thl_CalendarGroup = 'ALL')
								AND	(Ttr_Grade IN (SELECT Data FROM {0}.dbo.Udf_Split(Thl_Grade,',')) OR Thl_Grade = 'ALL')
                                AND Thl_CompanyCode = '{1}'
                            INNER JOIN {0}..M_Day ON Ttr_DayCode = Mdy_DayCode
                                AND Mdy_HolidayFlag = 1
                                AND Mdy_CompanyCode = '{1}'
                            WHERE Ttr_PayCycle = '{3}'
                                 AND ('{2}' = '' OR Ttr_IDNo = '{2}')
                                 AND (Ttr_DayCode <> Thl_HolidayCode OR(Ttr_HolidayFlag = 1 and Thl_HolidayCode IS NULL))
                                
                            UNION ALL

                            SELECT Ttr_IDNo
		                            ,'BW' 
		                            ,'{3}'
		                            , CONVERT(DATE, Ttr_Date)  
                                    , NULL
		                            ,'Wrong Holiday flag set'  
                                    , 1  
		                            , '{4}'
		                            , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS
                            INNER JOIN {0}..M_Day ON Mdy_DayCode = Ttr_DayCode
                                 AND Mdy_CompanyCode = '{1}'
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Ttr_PayCycle = '{3}'
	                            AND ('{2}' = '' OR Ttr_IDNo = '{2}')
	                            AND Ttr_HolidayFlag <> Mdy_HolidayFlag

                            UNION ALL

                            SELECT Tlv_IDNo as [ID No]
	                                 , 'BW'
	                                 , '{3}'
	                                 , CONVERT(DATE, Tlv_LeaveDate)
                                     , NULL
	                                 , 'Leave ' + Mcd_name + ' - ' + Tlv_LeaveCode
                                     , 1  
	                                 , '{4}'
	                                 , GETDATE()
                                FROM T_EmpLeave
                                INNER JOIN M_Employee ON Tlv_IDNo = Mem_IDNo
                                    @CONDITIONS
                                @USERCOSTCENTERACCESSCONDITION
                                LEFT JOIN {0}..M_CodeDtl ON Mcd_Code = Tlv_LeaveStatus
	                                AND Mcd_CodeType = 'DOCUSTAT'
                                    AND Mcd_CompanyCode  = '{1}'
                                WHERE Tlv_LeaveStatus in ('21','22','23','24','25','04','06','08','10','12')
                                    AND Tlv_LeaveDate  <= @EndCycle
                                    AND ('{2}' = '' OR Tlv_IDNo = '{2}')

                            UNION ALL

                            SELECT Tot_IDNo as [ID No]
	                                 , 'BW'
	                                 , '{3}'
	                                 , CONVERT(DATE, Tot_Overtimedate)
                                     , NULL
	                                 , 'Overtime ' + Mcd_name + ' - ' + Tot_StartTime + ' - ' + Tot_EndTime
                                     , 1  
	                                 , '{4}'
	                                 , GETDATE()
                                FROM T_EmpOvertime
                                INNER JOIN M_Employee ON Tot_IDNo = Mem_IDNo
                                    @CONDITIONS
                                @USERCOSTCENTERACCESSCONDITION
                                LEFT JOIN {0}..M_CodeDtl ON Mcd_Code = Tot_OvertimeStatus
	                                AND Mcd_CodeType = 'DOCUSTAT'
                                    AND Mcd_CompanyCode  = '{1}'
                                WHERE Tot_OvertimeStatus in ('21','22','23','24','25','04','06','08','10','12')
                                    AND Tot_Overtimedate <= @EndCycle
                                    AND ('{2}' = '' OR Tot_IDNo = '{2}')

                            UNION ALL

                            SELECT Ttm_IDNo as [ID No]
	                                 , 'BW'
	                                 , '{3}'
	                                 , CONVERT(DATE, Ttm_TimeCorDate)
                                     , NULL
	                                 , 'Time Correction ' + DOCUSTAT.Mcd_Name + ' - ' + TMERECTYPE.Mcd_Name 
                                     , 1  
	                                 , '{4}'
	                                 , GETDATE()
                                FROM T_EmpTimeCorrection
                                INNER JOIN M_Employee ON Ttm_IDNo = Mem_IDNo
                                    @CONDITIONS
                                @USERCOSTCENTERACCESSCONDITION
                                LEFT JOIN {0}..M_CodeDtl DOCUSTAT ON DOCUSTAT.Mcd_Code = Ttm_TimeCorStatus
                                    AND DOCUSTAT.Mcd_CodeType = 'DOCUSTAT'
                                    AND DOCUSTAT.Mcd_CompanyCode  = '{1}'
                                LEFT JOIN {0}..M_CodeDtl TMERECTYPE ON TMERECTYPE.Mcd_Code = Ttm_TimeCorType
                                    AND TMERECTYPE.Mcd_CodeType = 'TMERECTYPE'
                                    AND TMERECTYPE.Mcd_CompanyCode  = '{1}'
                                WHERE Ttm_TimeCorStatus in ('21','22','23','24','25','04','06','08','10','12')
                                    AND Ttm_TimeCorDate <= @EndCycle
                                    AND ('{2}' = '' OR Ttm_IDNo = '{2}')
                        
                            UNION ALL

                            SELECT Tes_IDNo as [ID No]
	                                    , 'BW'
	                                    , '{3}'
	                                    , CONVERT(DATE, Tes_ShiftDate)
                                        , NULL
	                                    , 'Shift ' + DOCUSTAT.Mcd_Name 
                                        , 1  
	                                    , '{4}'
	                                    , GETDATE()
                            FROM T_EmpShift
                            INNER JOIN M_Employee ON Tes_IDNo = Mem_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            LEFT JOIN {0}..M_CodeDtl DOCUSTAT ON DOCUSTAT.Mcd_Code = Tes_ShiftStatus
                                AND DOCUSTAT.Mcd_CodeType = 'DOCUSTAT'
                                AND DOCUSTAT.Mcd_CompanyCode  = '{1}'
                            WHERE Tes_ShiftStatus IN ('21','22','23','24','25','04','06','08','10','12')
                                AND Tes_ShiftDate <= @EndCycle
                                AND ('{2}' = '' OR Tes_IDNo = '{2}')

                            UNION ALL

                            SELECT  Mem_IDNo
		                            ,'BW' 
		                            , '{3}'
		                            , NULL
                                    , NULL
		                            ,'All Regular days set for the whole pay cycle'  
                                    , 1  
		                            , '{4}'
		                            , GETDATE()
                            FROM M_Employee
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Mem_IDNo IN (SELECT Ttr_IDNo         					
					                            FROM T_EmpTimeRegister         
					                            WHERE Ttr_PayCycle = '{3}'       
					                            AND Ttr_Daycode = 'REG'         
					                            GROUP BY Ttr_IDNo         
					                            HAVING COUNT(Ttr_IDNo) = @CurPPCnt)
	                            AND ('{2}' = '' OR Mem_IDNo = '{2}')
                                @CONDITIONS

                            UNION ALL

                            SELECT  Mem_IDNo
		                            ,'BW' 
		                            , '{3}'
		                            , NULL
                                    , NULL
		                            ,'No logs for the whole pay cycle'  
                                    , 1  
		                            , '{4}'
		                            , GETDATE()
                            FROM M_Employee
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Mem_IDNo IN (SELECT Ttr_IDNo         					
						                            FROM T_EmpTimeRegister         
						                            WHERE Ttr_ActIn_1 + Ttr_ActOut_1 + Ttr_ActIn_2 + Ttr_ActOut_2 = '0000000000000000'          
						                            AND Ttr_PayCycle = '{3}'       
						                            AND Ttr_AssumedFlag = 0         
						                            GROUP BY Ttr_IDNo         
						                            HAVING COUNT(Ttr_IDNo) = @CurPPCnt          
						                            AND SUM(Ttr_WFPayLVHr) = 0)
	                            AND ('{2}' = '' OR Mem_IDNo = '{2}')
                                @CONDITIONS

                            UNION ALL

                            SELECT Ttr_IDNo
                                  ,'BW' 
                                  , '{3}'
                                  , CONVERT(DATE, Ttr_Date)   
                                  , NULL
                                  , Ttr_WFPayLVCode + CASE WHEN Mlv_LeaveCode IS NULL THEN  + ' leave type is not in Master' 
                                    ELSE ' leave type is inactive' END
                                  , 1
                                  , '{4}'
                                  , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            LEFT JOIN {0}..M_Leave ON Mlv_CompanyCode = '{1}'
                                AND Mlv_LeaveCode = Ttr_WFPayLVCode
                            WHERE Ttr_PayCycle = '{3}'
                                AND ('{2}' = '' OR Mem_IDNo = '{2}')
                                AND Ttr_WFPayLVCode <> '' AND (Mlv_RecordStatus = 'C' OR Mlv_LeaveCode IS NULL)

                            UNION ALL

                            SELECT Ttr_IDNo
                                  ,'BW' 
                                  , '{3}'
                                  , CONVERT(DATE, Ttr_Date)   
                                  , NULL
                                  , Ttr_WFNoPayLVCode + CASE WHEN Mlv_LeaveCode IS NULL THEN  + ' leave type is not in Master' 
                                   ELSE ' leave type is inactive' END
                                  , 1  
                                  , '{4}'
                                  , GETDATE()
                                FROM T_EmpTimeRegister
                                INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                    @CONDITIONS
                                @USERCOSTCENTERACCESSCONDITION
                                LEFT JOIN {0}..M_Leave ON Mlv_CompanyCode = '{1}'
                                    AND Mlv_LeaveCode = Ttr_WFNoPayLVCode
                                WHERE Ttr_PayCycle = '{3}'
                                    AND ('{2}' = '' OR Mem_IDNo = '{2}')
                                    AND Ttr_WFNoPayLVCode <> '' AND (Mlv_RecordStatus = 'C' OR Mlv_LeaveCode IS NULL)

                            UNION ALL

                            SELECT Ttr_IDNo
                                  ,'BW' 
                                  , '{3}'
                                  , CONVERT(DATE, Ttr_Date)   
                                  , NULL
                                  , Ttr_Daycode + ' Assumed Posted on Non-regular days'
                                  , 1  
                                  , '{4}'
                                  , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            INNER JOIN {0}..M_Day ON Mdy_CompanyCode = '{1}'
                                 AND Mdy_DayCode = Ttr_DayCode
                            WHERE Ttr_PayCycle =  '{3}'
                                 AND ('{2}' = '' OR Mem_IDNo = '{2}')
                                 AND Ttr_AssumedPost = 'T' 
                                 AND NOT (Mdy_RestdayFlag = 0 AND Mdy_HolidayFlag = 0)

                            UNION ALL

                            SELECT Ttr_IDNo
                              ,'BW' 
                              , '{3}'
                              , CONVERT(DATE, Ttr_Date)   
                              , NULL
                              , Ttr_Daycode + ' Assumed Posted on Non-regular days' 
                              , 1  
                              , '{4}'
                              , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            INNER JOIN {0}..M_Day ON Mdy_CompanyCode = '{1}'
                                AND Mdy_DayCode = Ttr_DayCode
                            WHERE Ttr_PayCycle = '{3}'
                                AND ('{2}' = '' OR Mem_IDNo = '{2}')
                                AND Ttr_AssumedFlag = 1 
                                AND NOT (Mdy_RestdayFlag = 0 AND Mdy_HolidayFlag = 0)

                            UNION ALL

                            SELECT Ttr_IDNo
                              ,'BE' 
                              , '{3}'
                              , CONVERT(DATE, Ttr_Date)   
                              , NULL
                              , CONVERT(CHAR(6), Ttr_WFPayLVHr) + ' leave hour is negative'
                              , 1  
                              , '{4}'
                              , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Ttr_PayCycle = '{3}'
                                AND ('{2}' = '' OR Mem_IDNo = '{2}')
                                AND Ttr_WFPayLVHr < 0

                            UNION ALL

                            SELECT Ttr_IDNo
                              ,'BE' 
                              , '{3}'
                              , CONVERT(DATE, Ttr_Date) 
                              , NULL
                              , CONVERT(CHAR(6), Ttr_WFNoPayLVHr) + ' leave hour is negative'
                              , 1  
                              , '{4}'
                              , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Ttr_PayCycle = '{3}'
                                AND ('{2}' = '' OR Mem_IDNo = '{2}')
                                AND Ttr_WFNoPayLVHr < 0
    
                            UNION ALL

                            SELECT Ttr_IDNo
	                                ,'BW' 
	                                ,'{3}'
	                                , CONVERT(DATE, Ttr_Date)
                                    , NULL
	                                , Ttr_Daycode + ' set but ' + CASE WHEN Thl_HolidayCode IS NULL THEN 'none registered' ELSE thl_holidaycode END + ' in Holiday Master'
                                    , 1  
	                                , '{4}'
	                                , GETDATE()
                                FROM T_EmpTimeRegister
                                INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                    @CONDITIONS
                                @USERCOSTCENTERACCESSCONDITION
                                LEFT JOIN {0}..T_Holiday on Thl_HolidayDate = Ttr_Date
                                    AND (Ttr_WorkLocationCode IN (SELECT Data FROM {0}.dbo.Udf_Split(Thl_LocationCode,',')) OR Thl_LocationCode = 'ALL')	 
	                                AND	(Ttr_PayrollGroup IN (SELECT Data FROM {0}.dbo.Udf_Split(Thl_PayrollGroup,',')) OR Thl_PayrollGroup = 'ALL')
	                                AND	(Ttr_PayrollType IN (SELECT Data FROM {0}.dbo.Udf_Split(Thl_PayrollType,',')) OR Thl_PayrollType = 'ALL')
	                                AND	(Ttr_EmploymentStatusCode IN (SELECT Data FROM {0}.dbo.Udf_Split(Thl_EmploymentStatus,',')) OR Thl_EmploymentStatus = 'ALL')
	                                AND	(Ttr_CalendarGroup IN (SELECT Data FROM {0}.dbo.Udf_Split(Thl_CalendarGroup,',')) OR Thl_CalendarGroup = 'ALL')
	                                AND	(Ttr_Grade IN (SELECT Data FROM {0}.dbo.Udf_Split(Thl_Grade,',')) OR Thl_Grade = 'ALL')
                                    AND Thl_CompanyCode = '{1}'
                                INNER JOIN {0}..M_Day ON Ttr_DayCode = Mdy_DayCode
                                    ----AND Mdy_HolidayFlag = 1
                                    AND Mdy_CompanyCode = '{1}'
                                WHERE ((Ttr_DayCode <> Thl_HolidayCode) OR (Ttr_HolidayFlag = 1 AND Thl_HolidayCode IS NULL))
	                                AND Ttr_PayCycle = '{3}'
	                                AND ('{2}' = '' OR Ttr_IDNo = '{2}')

                            UNION ALL

                            SELECT Ttr_IDNo
		                            ,'BW' 
		                            ,'{3}'
		                            , CONVERT(DATE, Ttr_Date) 
                                    , NULL
		                            , 'Applied overtime shift ' + Tot_ShiftCode + ' is not equal to computed shift ' + Ttr_ShiftCode 
                                    , 1  
		                            , '{4}'
		                            , GETDATE()
                            FROM T_EmpTimeRegister
                            INNER JOIN M_Employee ON Ttr_IDNo = Mem_IDNo
                                @CONDITIONS 
                            LEFT JOIN (SELECT DISTINCT Tot_IDNo
                                        , Tot_OvertimeDate 
                                        , Tot_ShiftCode
										FROM T_EmpOvertime) Overtime ON Ttr_IDNo = Tot_IDNo AND Ttr_Date = Tot_OvertimeDate
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Ttr_PayCycle = '{3}'
	                            AND ('{2}' = '' OR Ttr_IDNo = '{2}')
	                            AND Ttr_ShiftCode <> Tot_ShiftCode

                            UNION ALL

                            SELECT  Ttm_IDNo 
                                    ,'BW' 
		                            ,'{3}'
		                            , CONVERT(DATE, Ttr_Date)
                                    , NULL
		                            , '[' + CASE WHEN TIn = '0000' THEN '' ELSE LEFT(TIn, 2) + ':' + RIGHT(Tin, 2) END + '-' + CASE WHEN TOut = '0000' THEN '' ELSE LEFT(TOut, 2) + ':' + RIGHT(TOut, 2) END
										+ ' ] ' + CASE WHEN TIn <> '0000' AND TOut = '0000' THEN 'No Out ' + Seq ELSE 'No In ' + Seq END AS [Remarks]
                                    , 1  
		                            , '{4}'
		                            , GETDATE()
                            FROM T_EmpTimeRegisterMisc
                            INNER JOIN T_EmpTimeRegister ON Ttr_IDNo = Ttm_IDNo
	                            AND Ttr_Date = Ttm_Date
	                            AND Ttr_WFTimeMod = 'N'
                            INNER JOIN M_Employee ON Mem_IDNo = Ttm_IDNo
                                @CONDITIONS 
                            @USERCOSTCENTERACCESSCONDITION
                            INNER JOIN {0}..M_Shift ON Msh_ShiftCode = Ttr_ShiftCode
	                            AND Msh_CompanyCode = '{1}'
                                AND Msh_RequiredLogsOnBreak = 1
                            CROSS APPLY ( VALUES ('1', Ttm_ActIn_01,Ttm_Actout_01),
					                            ('2', Ttm_ActIn_02,Ttm_Actout_02),
					                            ('3', Ttm_ActIn_03,Ttm_Actout_03),
					                            ('4', Ttm_ActIn_04,Ttm_Actout_04),
					                            ('5', Ttm_ActIn_05,Ttm_Actout_05),
					                            ('6', Ttm_ActIn_06,Ttm_Actout_06),
					                            ('7', Ttm_ActIn_07,Ttm_Actout_07),
					                            ('8', Ttm_ActIn_08,Ttm_Actout_08),
					                            ('9', Ttm_ActIn_09,Ttm_Actout_09),
					                            ('10', Ttm_ActIn_10,Ttm_Actout_10),
					                            ('11', Ttm_ActIn_11,Ttm_Actout_11),
					                            ('12', Ttm_ActIn_12,Ttm_Actout_12)) temp (Seq, TIn, TOut)
                            WHERE ((TIn <> '0000' AND TOut = '0000') OR (TIn = '0000' AND TOut <> '0000'))
								AND Ttm_PayCycle = '{3}'
	                            AND ('{2}' = '' OR Ttm_IDNo = '{2}')

                            UNION ALL

                            SELECT  Tsa_IDNo
		                            ,'BW' 
		                            , '{3}'
		                            , NULL
                                    , NULL
		                            ,'Override System Adjustment'  
                                    , 1  
		                            , '{4}'
		                            , GETDATE()
                            FROM T_EmpSystemAdj
                            INNER JOIN T_EmpManualAdj
                            ON Tsa_AdjPayCycle = Tma_PayCycle
                                 AND Tsa_IDNo = Tma_IDNo
                            INNER JOIN M_Employee ON Tsa_IDNo = Mem_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Tsa_AdjPayCycle = '{3}'
	                            AND ('{2}' = '' OR Tsa_IDNo = '{2}')
                            
                            "
                                , CentralProfile, CompanyCode, EmployeeID, PayCycle, UserLogin);
            #endregion
            query = query.Replace("@CONDITIONS", condition);
            query = query.Replace("@USERCOSTCENTERACCESSCONDITION", (new HRCReportsBL()).UserCostCenterAccessTmpQuery(ProfileCode, "PAYROLL", UserLogin, "Mem_CostcenterCode", "Mem_PayrollGroup", "Mem_EmploymentStatusCode", "Mem_PayrollType", CompanyCode, CentralProfile , false));
            dalHelper.ExecuteNonQuery(query);
        }

        public void CheckPostProcessingTimeExists(string ProfileCode, string CentralProfile, string PayCycle, string EmployeeID, string CostCenter, string UserLogin, string CompanyCode, DALHelper dalHelper)
        {
            #region Query
            string condition = string.Empty;
            if (CostCenter != string.Empty)
            {
                condition += string.Format("And Mem_CostcenterCode IN ({0})", (new CommonBL()).EncodeFilterItems(CostCenter, true));
            }
            string query = string.Format(@"
                            DECLARE @EndCycle DATETIME
                            DECLARE @CurPPCnt as tinyint
                                
                            SELECT @CurPPCnt = datediff(dd,Tps_StartCycle,Tps_EndCycle+1)
                                    , @EndCycle = Tps_EndCycle
                            FROM T_PaySchedule
                            WHERE Tps_PayCycle = '{3}'

                            INSERT INTO T_EmpLaborCheck
                            SELECT Tpd_IDNo
		                            ,'AE' 
		                            , '{3}'		
		                            , Tpd_Date
		                            , Tpd_ABSHr + 
                                        Tpd_WDABSHr + 
                                        Tpd_ABSLEGHOLHr + 
                                        Tpd_ABSSPLHOLHr + 
                                        Tpd_ABSCOMPHOLHr + 
                                        Tpd_ABSPSDHr + 
                                        Tpd_ABSOTHHOLHr + 
                                        Tpd_LTHr + 
                                        Tpd_UTHr + 
                                        Tpd_UPLVHr +
                                        Tpd_LTUTMaxHr
		                            , 'Negative Daily Absent Hours' 
                                    , 1 
		                            , '{4}'
		                            , GETDATE()
                            FROM T_EmpPayTranDtl
                            INNER JOIN M_Employee On Mem_IDNo = Tpd_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Tpd_PayCycle = '{3}'	
	                            AND (Tpd_ABSHr < 0 OR
		                            Tpd_WDABSHr < 0 OR
		                            Tpd_ABSLEGHOLHr < 0 OR
		                            Tpd_ABSSPLHOLHr < 0 OR
		                            Tpd_ABSCOMPHOLHr < 0 OR
		                            Tpd_ABSPSDHr < 0 OR
		                            Tpd_ABSOTHHOLHr < 0 OR
		                            Tpd_LTHr < 0 OR
		                            Tpd_UTHr < 0 OR
		                            Tpd_UPLVHr < 0 OR
                                    Tpd_LTUTMaxHr < 0)
                                AND ('{2}' = '' OR Tpd_IDNo = '{2}')

                            UNION ALL

                            SELECT Tpd_IDNo
		                            ,'AE' 
		                            , '{3}'
		                            , Tpd_Date
		                            , Tpd_PDLVHr + 
                                        Tpd_PDLEGHOLHr + 
                                        Tpd_PDSPLHOLHr + 
                                        Tpd_PDCOMPHOLHr + 
                                        Tpd_PDOTHHOLHr + 
                                        Tpd_REGHr + 
                                        Tpd_PDRESTLEGHOLHr + 
                                        Tpd_PDPSDHr
		                            ,'Negative Daily Regular Hours'  
                                    , 1
		                            , '{4}'
		                            , GETDATE()
                            FROM T_EmpPayTranDtl
                            INNER JOIN M_Employee On Mem_IDNo = Tpd_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Tpd_PayCycle = '{3}'
	                             AND (Tpd_PDLVHr < 0 OR 
		                            Tpd_PDLEGHOLHr < 0 OR 
		                            Tpd_PDSPLHOLHr < 0 OR 
		                            Tpd_PDCOMPHOLHr < 0 OR 
		                            Tpd_PDOTHHOLHr < 0 OR 
		                            Tpd_REGHr < 0 OR 
		                            Tpd_PDRESTLEGHOLHr < 0 OR
									Tpd_PDPSDHr < 0)
                                AND ('{2}' = '' OR Tpd_IDNo = '{2}')

                            UNION ALL

                            SELECT Tpd_IDNo
		                            , 'AE' 
		                            , '{3}'
		                            , Tpd_Date
		                            , Tpd_REGOTHr + 
                                        Tpd_RESTHr + 
                                        Tpd_RESTOTHr + 
                                        Tpd_LEGHOLHr + 
                                        Tpd_LEGHOLOTHr + 
                                        Tpd_SPLHOLHr + 
                                        Tpd_SPLHOLOTHr + 
                                        Tpd_PSDHr + 
                                        Tpd_PSDOTHr + 
                                        Tpd_COMPHOLHr + 
                                        Tpd_COMPHOLOTHr + 
                                        Tpd_RESTLEGHOLHr + 
                                        Tpd_RESTLEGHOLOTHr + 
                                        Tpd_RESTSPLHOLHr + 
                                        Tpd_RESTSPLHOLOTHr + 
                                        Tpd_RESTCOMPHOLHr + 
                                        Tpd_RESTCOMPHOLOTHr + 
                                        Tpd_RESTPSDHr + 
                                        Tpd_RESTPSDOTHr 
		                            ,'Negative Daily Overtime Hours (Standard Days)'  
                                    , 1
		                            ,'{4}'
		                            , GETDATE()
                            FROM T_EmpPayTranDtl
                            INNER JOIN M_Employee On Mem_IDNo = Tpd_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Tpd_PayCycle = '{3}'
	                        AND (Tpd_REGOTHr < 0 OR 
		                            Tpd_RESTHr < 0 OR 
		                            Tpd_RESTOTHr < 0 OR 
		                            Tpd_LEGHOLHr < 0 OR 
		                            Tpd_LEGHOLOTHr < 0 OR 
		                            Tpd_SPLHOLHr < 0 OR 
		                            Tpd_SPLHOLOTHr < 0 OR 
		                            Tpd_PSDHr < 0 OR 
		                            Tpd_PSDOTHr < 0 OR 
		                            Tpd_COMPHOLHr < 0 OR 
		                            Tpd_COMPHOLOTHr < 0 OR 
		                            Tpd_RESTLEGHOLHr < 0 OR 
		                            Tpd_RESTLEGHOLOTHr < 0 OR 
		                            Tpd_RESTSPLHOLHr < 0 OR 
		                            Tpd_RESTSPLHOLOTHr < 0 OR 
		                            Tpd_RESTCOMPHOLHr < 0 OR 
		                            Tpd_RESTCOMPHOLOTHr < 0 OR 
		                            Tpd_RESTPSDHr < 0 OR 
		                            Tpd_RESTPSDOTHr < 0)
                                AND ('{2}' = '' OR Tpd_IDNo = '{2}')

                            UNION ALL

                            SELECT Tpd_IDNo
                                  ,'AE' 
                                  ,'{3}'
                                  , Tpd_Date
                                  , Tpd_Misc1Hr  + 
                                    Tpd_Misc1OTHr  + 
                                    Tpd_Misc2Hr  + 
                                    Tpd_Misc2OTHr  + 
                                    Tpd_Misc3Hr  + 
                                    Tpd_Misc3OTHr  + 
                                    Tpd_Misc4Hr  + 
                                    Tpd_Misc4OTHr  + 
                                    Tpd_Misc5Hr  + 
                                    Tpd_Misc5OTHr  + 
                                    Tpd_Misc6Hr  + 
                                    Tpd_Misc6OTHr
                                  ,'Negative Daily Overtime Hours' 
                                  , 1 
                                  ,'{4}'
                                  ,GETDATE()
                                FROM T_EmpPayTranDtlMisc
                                INNER JOIN M_Employee On Mem_IDNo = Tpd_IDNo
                                    @CONDITIONS
                                @USERCOSTCENTERACCESSCONDITION
                                WHERE Tpd_PayCycle = '{3}'
                                    AND (Tpd_Misc1Hr < 0 OR
                                      Tpd_Misc1OTHr < 0 OR
                                      Tpd_Misc2Hr < 0 OR
                                      Tpd_Misc2OTHr < 0 OR
                                      Tpd_Misc3Hr < 0 OR
                                      Tpd_Misc3OTHr < 0 OR
                                      Tpd_Misc4Hr < 0 OR
                                      Tpd_Misc4OTHr < 0 OR
                                      Tpd_Misc5Hr < 0 OR
                                      Tpd_Misc5OTHr < 0 OR
                                      Tpd_Misc6Hr < 0 OR
                                      Tpd_Misc6OTHr < 0 )
                                    AND ('{2}' = '' OR Tpd_IDNo = '{2}')

                            UNION ALL

                            SELECT Tpd_IDNo
		                            ,'AE' 
		                            ,'{3}'
		                            ,Tpd_Date
		                            ,Tpd_REGNDHr + 
                                        Tpd_REGNDOTHr + 
                                        Tpd_RESTNDHr + 
                                        Tpd_RESTNDOTHr +
		                                Tpd_LEGHOLNDHr + 
                                        Tpd_LEGHOLNDOTHr + 
                                        Tpd_SPLHOLNDHr + 
                                        Tpd_SPLHOLNDOTHr +
		                                Tpd_PSDNDHr + 
                                        Tpd_PSDNDOTHr + 
                                        Tpd_COMPHOLNDHr + 
                                        Tpd_COMPHOLNDOTHr +
		                                Tpd_RESTLEGHOLNDHr + 
                                        Tpd_RESTLEGHOLNDOTHr + 
                                        Tpd_RESTSPLHOLNDHr + 
                                        Tpd_RESTSPLHOLNDOTHr +
		                                Tpd_RESTCOMPHOLNDHr + 
                                        Tpd_RESTCOMPHOLNDOTHr + 
                                        Tpd_RESTPSDNDHr + 
                                        Tpd_RESTPSDNDOTHr  
		                            ,'Negative Daily ND/NDOT Hours (Standard Days)'  
                                    , 1
		                            ,'{4}'
		                            ,GETDATE()
                            FROM T_EmpPayTranDtl
                            INNER JOIN M_Employee On Mem_IDNo = Tpd_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Tpd_PayCycle = '{3}'
	                            AND (Tpd_REGNDHr < 0 OR 
                                    Tpd_REGNDOTHr < 0 OR 
                                    Tpd_RESTNDHr < 0 OR 
                                    Tpd_RESTNDOTHr < 0 OR 
                                    Tpd_LEGHOLNDHr < 0 OR 
                                    Tpd_LEGHOLNDOTHr < 0 OR 
                                    Tpd_SPLHOLNDHr < 0 OR 
                                    Tpd_SPLHOLNDOTHr < 0 OR 
                                    Tpd_PSDNDHr < 0 OR 
                                    Tpd_PSDNDOTHr < 0 OR 
                                    Tpd_COMPHOLNDHr < 0 OR 
                                    Tpd_COMPHOLNDOTHr < 0 OR 
                                    Tpd_RESTLEGHOLNDHr < 0 OR 
                                    Tpd_RESTLEGHOLNDOTHr < 0 OR 
                                    Tpd_RESTSPLHOLNDHr < 0 OR 
                                    Tpd_RESTSPLHOLNDOTHr < 0 OR 
                                    Tpd_RESTCOMPHOLNDHr < 0 OR 
                                    Tpd_RESTCOMPHOLNDOTHr < 0 OR 
                                    Tpd_RESTPSDNDHr < 0 OR 
                                    Tpd_RESTPSDNDOTHr < 0)
	                            AND ('{2}' = '' OR Tpd_IDNo = '{2}')

                            UNION ALL

                            SELECT Tpd_IDNo
                                  ,'AE' 
                                  ,'{3}'
                                  , Tpd_Date
                                  , Tpd_Misc1NDHr  + 
                                    Tpd_Misc1NDOTHr  + 
                                    Tpd_Misc2NDHr  + 
                                    Tpd_Misc2NDOTHr  + 
                                    Tpd_Misc3NDHr  + 
                                    Tpd_Misc3NDOTHr  + 
                                    Tpd_Misc4NDHr  + 
                                    Tpd_Misc4NDOTHr  + 
                                    Tpd_Misc5NDHr  + 
                                    Tpd_Misc5NDOTHr  + 
                                    Tpd_Misc6NDHr  + 
                                    Tpd_Misc6NDOTHr
                                  ,'Negative Daily ND/NDOT Hours' 
                                  , 1 
                                  ,'{4}'
                                  ,GETDATE()
                                FROM T_EmpPayTranDtlMisc
                                INNER JOIN M_Employee On Mem_IDNo = Tpd_IDNo
                                    @CONDITIONS
                                @USERCOSTCENTERACCESSCONDITION
                                WHERE Tpd_PayCycle = '{3}'
                                     AND (Tpd_Misc1NDHr < 0 OR
                                      Tpd_Misc1NDOTHr < 0 OR
                                      Tpd_Misc2NDHr < 0 OR
                                      Tpd_Misc2NDOTHr < 0 OR
                                      Tpd_Misc3NDHr < 0 OR
                                      Tpd_Misc3NDOTHr < 0 OR
                                      Tpd_Misc4NDHr < 0 OR
                                      Tpd_Misc4NDOTHr < 0 OR
                                      Tpd_Misc5NDHr < 0 OR
                                      Tpd_Misc5NDOTHr < 0 OR
                                      Tpd_Misc6NDHr < 0 OR
                                      Tpd_Misc6NDOTHr < 0 )
                                AND ('{2}' = '' OR Tpd_IDNo = '{2}')

                            UNION ALL

                            SELECT Tph_IDNo
		                            ,'AE' 
		                            ,'{3}'		
		                            , NULL 
		                            , Tph_ABSHr + 
                                        Tph_WDABSHr + 
                                        Tph_ABSLEGHOLHr + 
                                        Tph_ABSSPLHOLHr + 
                                        Tph_ABSCOMPHOLHr + 
                                        Tph_ABSPSDHr + 
		                                Tph_ABSOTHHOLHr + 
                                        Tph_LTHr + 
                                        Tph_UTHr + 
                                        Tph_UPLVHr 
		                            ,'Negative Summary Absent Hours'  
                                    , 1
		                            ,'{4}'
		                            , GETDATE()
                            FROM T_EmpPayTranHdr
                            INNER JOIN M_Employee On Mem_IDNo = Tph_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE  Tph_PayCycle = '{3}'
	                            AND (Tph_ABSHr  < 0 OR
		                            Tph_WDABSHr  < 0 OR
		                            Tph_ABSLEGHOLHr  < 0 OR
		                            Tph_ABSSPLHOLHr  < 0 OR
		                            Tph_ABSCOMPHOLHr  < 0 OR
		                            Tph_ABSPSDHr  < 0 OR
		                            Tph_ABSOTHHOLHr  < 0 OR
		                            Tph_LTHr  < 0 OR
		                            Tph_UTHr  < 0 OR
		                            Tph_UPLVHr  < 0)
                                AND ('{2}' = '' OR Tph_IDNo = '{2}')

                            UNION ALL

                            SELECT Tph_IDNo
		                            ,'AE' 
		                            , '{3}'	
		                            , NULL 
		                            , Tph_PDLVHr + 
                                        Tph_PDLEGHOLHr + 
                                        Tph_PDSPLHOLHr + 
                                        Tph_PDCOMPHOLHr + 
		                                Tph_PDOTHHOLHr + 
                                        Tph_REGHr + 
                                        Tph_PDRESTLEGHOLHr + 
                                        Tph_PDPSDHr
		                            ,'Negative Summary Regular Hours'  
                                    , 1
		                            , '{4}'
		                            , GETDATE()
                            FROM T_EmpPayTranHdr
                            INNER JOIN M_Employee On Mem_IDNo = Tph_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Tph_PayCycle = '{3}'	
	                             AND (Tph_PDLVHr < 0 OR 
		                            Tph_PDLEGHOLHr < 0 OR 
		                            Tph_PDSPLHOLHr < 0 OR 
		                            Tph_PDCOMPHOLHr < 0 OR 
		                            Tph_PDOTHHOLHr < 0 OR 
		                            Tph_REGHr < 0 OR 
		                            Tph_PDRESTLEGHOLHr < 0 OR
									Tph_PDPSDHr < 0)
                                AND ('{2}' = '' OR Tph_IDNo = '{2}')

                            UNION ALL

                            SELECT Tph_IDNo
		                            ,'AE' 
		                            ,'{3}'
		                            ,NULL 
		                            ,Tph_REGOTHr + 
                                        Tph_RESTHr + 
                                        Tph_RESTOTHr + 
                                        Tph_LEGHOLHr + 
                                        Tph_LEGHOLOTHr + 
                                        Tph_SPLHOLHr + 
                                        Tph_SPLHOLOTHr + 
		                                Tph_PSDHr + 
                                        Tph_PSDOTHr + 
                                        Tph_COMPHOLHr + 
                                        Tph_COMPHOLOTHr + 
                                        Tph_RESTLEGHOLHr + 
                                        Tph_RESTLEGHOLOTHr + 
                                        Tph_RESTSPLHOLHr + 
		                                Tph_RESTSPLHOLOTHr + 
                                        Tph_RESTCOMPHOLHr + 
                                        Tph_RESTCOMPHOLOTHr + 
                                        Tph_RESTPSDHr + 
                                        Tph_RESTPSDOTHr 
		                             ,'Negative Overtime Summary Hours (Standard Days)'  
                                     ,1
		                             ,'{4}'
		                             ,GETDATE()
                            FROM T_EmpPayTranHdr
                            INNER JOIN M_Employee On Mem_IDNo = Tph_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Tph_PayCycle = '{3}'
	                            AND (Tph_REGOTHr < 0 OR 
		                            Tph_RESTHr < 0 OR 
		                            Tph_RESTOTHr < 0 OR 
		                            Tph_LEGHOLHr < 0 OR 
		                            Tph_LEGHOLOTHr < 0 OR 
		                            Tph_SPLHOLHr < 0 OR 
		                            Tph_SPLHOLOTHr < 0 OR 
		                            Tph_PSDHr < 0 OR 
		                            Tph_PSDOTHr < 0 OR 
		                            Tph_COMPHOLHr < 0 OR 
		                            Tph_COMPHOLOTHr < 0 OR 
		                            Tph_RESTLEGHOLHr < 0 OR 
		                            Tph_RESTLEGHOLOTHr < 0 OR 
		                            Tph_RESTSPLHOLHr < 0 OR 
		                            Tph_RESTSPLHOLOTHr < 0 OR 
		                            Tph_RESTCOMPHOLHr < 0 OR 
		                            Tph_RESTCOMPHOLOTHr < 0 OR 
		                            Tph_RESTPSDHr < 0 OR 
		                            Tph_RESTPSDOTHr < 0)
                                AND ('{2}' = '' OR Tph_IDNo = '{2}')

                            UNION ALL

                            SELECT Tph_IDNo
                                  , 'AE'
                                  , '{3}'
                                  , NULL
                                  , Tph_Misc1Hr + 
                                    Tph_Misc1OTHr + 
                                    Tph_Misc2Hr + 
                                    Tph_Misc2OTHr + 
                                    Tph_Misc3Hr + 
                                    Tph_Misc3OTHr + 
                                    Tph_Misc4Hr + 
                                    Tph_Misc4OTHr + 
                                    Tph_Misc5Hr + 
                                    Tph_Misc5OTHr + 
                                    Tph_Misc6Hr + 
                                    Tph_Misc6OTHr
                                  , 'Negative Overtime Summary Hours'
                                  , 1
                                  , '{4}'
                                  , GETDATE()
                                FROM T_EmpPayTranHdrMisc
                                INNER JOIN M_Employee ON Mem_IDNo = Tph_IDNo
                                    @CONDITIONS
                                @USERCOSTCENTERACCESSCONDITION
                                WHERE Tph_PayCycle = '{3}'
                                     AND(Tph_Misc1Hr < 0 OR
                                      Tph_Misc1OTHr < 0 OR
                                      Tph_Misc2Hr < 0 OR
                                      Tph_Misc2OTHr < 0 OR
                                      Tph_Misc3Hr < 0 OR
                                      Tph_Misc3OTHr < 0 OR
                                      Tph_Misc4Hr < 0 OR
                                      Tph_Misc4OTHr < 0 OR
                                      Tph_Misc5Hr < 0 OR
                                      Tph_Misc5OTHr < 0 OR
                                      Tph_Misc6Hr < 0 OR
                                      Tph_Misc6OTHr < 0)
                                     AND ('{2}' = '' OR Tph_IDNo = '{2}')

                            UNION ALL

                            SELECT Tph_IDNo
		                            ,'AE' 
		                            ,'{3}'
		                            , NULL 
		                            , Tph_REGNDHr +  
                                        Tph_REGNDOTHr +  
                                        Tph_RESTNDHr +  
                                        Tph_RESTNDOTHr +
		                                Tph_LEGHOLNDHr +  
                                        Tph_LEGHOLNDOTHr +  
                                        Tph_SPLHOLNDHr +  
                                        Tph_SPLHOLNDOTHr +
		                                Tph_PSDNDHr +  
                                        Tph_PSDNDOTHr +  
                                        Tph_COMPHOLNDHr +  
                                        Tph_COMPHOLNDOTHr +
		                                Tph_RESTLEGHOLNDHr +  
                                        Tph_RESTLEGHOLNDOTHr +  
                                        Tph_RESTSPLHOLNDHr + 
                                        Tph_RESTSPLHOLNDOTHr +
		                                Tph_RESTCOMPHOLNDHr +  
                                        Tph_RESTCOMPHOLNDOTHr +  
                                        Tph_RESTPSDNDHr + 
                                        Tph_RESTPSDNDOTHr  
		                            ,'Negative ND/NDOT Summary Hours (Standard Days)'  
                                    , 1
		                            , '{4}'
		                            , GETDATE()
                            FROM T_EmpPayTranHdr
                            INNER JOIN M_Employee ON Mem_IDNo = Tph_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Tph_PayCycle = '{3}'
	                            AND (Tph_REGNDHr < 0 OR 
                                    Tph_REGNDOTHr < 0 OR 
                                    Tph_RESTNDHr < 0 OR 
                                    Tph_RESTNDOTHr < 0 OR 
                                    Tph_LEGHOLNDHr < 0 OR 
                                    Tph_LEGHOLNDOTHr < 0 OR 
                                    Tph_SPLHOLNDHr < 0 OR 
                                    Tph_SPLHOLNDOTHr < 0 OR 
                                    Tph_PSDNDHr < 0 OR 
                                    Tph_PSDNDOTHr < 0 OR 
                                    Tph_COMPHOLNDHr < 0 OR 
                                    Tph_COMPHOLNDOTHr < 0 OR 
                                    Tph_RESTLEGHOLNDHr < 0 OR 
                                    Tph_RESTLEGHOLNDOTHr < 0 OR 
                                    Tph_RESTSPLHOLNDHr < 0 OR 
                                    Tph_RESTSPLHOLNDOTHr < 0 OR 
                                    Tph_RESTCOMPHOLNDHr < 0 OR 
                                    Tph_RESTCOMPHOLNDOTHr < 0 OR 
                                    Tph_RESTPSDNDHr < 0 OR 
                                    Tph_RESTPSDNDOTHr < 0)
                                AND ('{2}' = '' OR Tph_IDNo = '{2}')

                            UNION ALL

                            SELECT Tph_IDNo
                                  , 'AE'
                                  , '{3}'
                                  , NULL
                                  , Tph_Misc1NDHr + 
                                        Tph_Misc1NDOTHr + 
                                        Tph_Misc2NDHr + 
                                        Tph_Misc2NDOTHr + 
                                        Tph_Misc3NDHr + 
                                        Tph_Misc3NDOTHr + 
                                        Tph_Misc4NDHr + 
                                        Tph_Misc4NDOTHr + 
                                        Tph_Misc5NDHr + 
                                        Tph_Misc5NDOTHr + 
                                        Tph_Misc6NDHr + 
                                        Tph_Misc6NDOTHr
                                   , 'Negative ND/NDOT Summary Hours'
                                   , 1
                                   , '{4}'
                                   , GETDATE()
                                FROM T_EmpPayTranHdrMisc
                                INNER JOIN M_Employee ON Mem_IDNo = Tph_IDNo
                                    @CONDITIONS
                                @USERCOSTCENTERACCESSCONDITION
                                WHERE Tph_PayCycle = '{3}'
                                     AND (Tph_Misc1NDHr < 0 OR
                                      Tph_Misc1NDOTHr < 0 OR
                                      Tph_Misc2NDHr < 0 OR
                                      Tph_Misc2NDOTHr < 0 OR
                                      Tph_Misc3NDHr < 0 OR
                                      Tph_Misc3NDOTHr < 0 OR
                                      Tph_Misc4NDHr < 0 OR
                                      Tph_Misc4NDOTHr < 0 OR
                                      Tph_Misc5NDHr < 0 OR
                                      Tph_Misc5NDOTHr < 0 OR
                                      Tph_Misc6NDHr < 0 OR
                                      Tph_Misc6NDOTHr < 0)
                                    AND ('{2}' = '' OR Tph_IDNo = '{2}')

                            UNION ALL

                            SELECT  Tph_IDNo
		                            ,'AW' 
		                            , '{3}'
		                            , NULL
                                    , NULL
		                            ,'Manual Hour Entry'  
                                    , 1  
		                            , '{4}'
		                            , GETDATE()
                            FROM T_EmpPayTranHdr
                            INNER JOIN M_Employee On Mem_IDNo = Tph_IDNo
                                @CONDITIONS
                            @USERCOSTCENTERACCESSCONDITION
                            WHERE Tph_PayCycle = '{3}'
                                AND Tph_RetainUserEntry = 1
	                            AND ('{2}' = '' OR Mem_IDNo = '{2}')
                            "
                            , CentralProfile, CompanyCode, EmployeeID, PayCycle, UserLogin);
            #endregion
            query = query.Replace("@CONDITIONS", condition);
            query = query.Replace("@USERCOSTCENTERACCESSCONDITION", (new HRCReportsBL()).UserCostCenterAccessTmpQuery(ProfileCode, "PAYROLL", UserLogin, "Mem_CostcenterCode", "Mem_PayrollGroup", "Mem_EmploymentStatusCode", "Mem_PayrollType", CompanyCode, CentralProfile, false));
            dalHelper.ExecuteNonQuery(query);
        }

        public DataTable TimeExceptionList(string ProfileCode, string CentralProfile, string PayCycle, string EmployeeID, string CostCenter, string UserLogin, string CompanyCode, string ErrorType, DALHelper dalHelper)
        {
            #region Query
            string condition = string.Empty;
            if (CostCenter != string.Empty)
            {
                condition += string.Format("And Mem_CostcenterCode IN ({0})", (new CommonBL()).EncodeFilterItems(CostCenter, true));
            }
            if (ErrorType != string.Empty)
            {
                condition += string.Format(@"
                                            And Tlc_Type LIKE '%{0}'", ErrorType);
            }

            string query = string.Format(@"
             SELECT CASE WHEN Tlc_Type IN ('AW','BW') THEN 'WARNING' 
                                        WHEN Tlc_Type IN ('AE','BE') THEN 'ERROR' 
                                   END as [Type]
                                    , Tlc_IDNo AS [ID Number] 
									, Mem_LastName + CASE WHEN LEN(ISNULL(Mem_ExtensionName,'')) > 0 
										THEN  ' ' + Mem_ExtensionName ELSE '' END as [Last Name]
									, Mem_FirstName as [First Name]
									, Mem_MiddleName as [Middle Name]
                                    , CONVERT(VARCHAR(20),Tlc_Date,101) AS [Date]
                                    , Tlc_NumValue AS [Hours]
                                    , Tlc_Remarks AS [Remarks]
                                    , CASE WHEN Mem_IsComputedPayroll = 1 THEN 'Included in Payroll'
                                            ELSE 'Excluded from Payroll' END AS [Payroll Status]
                                    FROM (SELECT * FROM T_EmpLaborCheck 
                                          UNION ALL
                                          SELECT * FROM T_EmpLaborCheckHst ) Tmp
									INNER JOIN M_Employee ON Mem_IDNo = Tlc_IDNo
                                    @USERCOSTCENTERACCESSCONDITION   
                                    WHERE Tlc_PayCycle = '{0}'
                                    AND ('{1}' = '' OR Tlc_IDNo = '{1}')
                                    @CONDITIONS"
            , PayCycle, EmployeeID);
            #endregion
            query = query.Replace("@CONDITIONS", condition);
            query = query.Replace("@USERCOSTCENTERACCESSCONDITION", (new HRCReportsBL()).UserCostCenterAccessTmpQuery(ProfileCode, "PAYROLL", UserLogin, "Mem_CostcenterCode", "Mem_PayrollGroup", "Mem_EmploymentStatusCode", "Mem_PayrollType", CompanyCode, CentralProfile, false));
            DataTable dtResult;
            dtResult = dalHelper.ExecuteDataSet(query).Tables[0];
            return dtResult;
        }

        public void UpdateEncodedOvertime(bool ProcessAll, bool ProcessCurrentPeriod, string EmployeeId)
        {
            ParameterInfo[] paramInfo = new ParameterInfo[1];
            paramInfo[0] = new ParameterInfo("@CurPayPeriod", ProcessPayrollPeriod);

            string HistExtension = "";
            if (!ProcessCurrentPeriod)
                HistExtension = "Hst";

            string EmployeeCondition = "";
            if (!ProcessAll && EmployeeId != "")
                EmployeeCondition = " AND Ttr_IDNo = '" + EmployeeId + "'";

            #region query
            string query = string.Format(@"UPDATE T_EmpTimeRegister{0}
                                        SET Ttr_WFOTAdvHr     = 0
                                             , Ttr_WFOTPostHr = 0
                                        WHERE Ttr_PayCycle = @CurPayPeriod  {1}

                                        UPDATE T_EmpTimeRegister{0}
                                        SET Ttr_WFOTAdvHr     = ISNULL(AdvOvtHr,0) 
                                             , Ttr_WFOTPostHr = ISNULL(PostOvtHr,0) + ISNULL(MidOvtHr,0)
                                        FROM T_EmpTimeRegister{0}
                                        INNER JOIN (SELECT Tot_IDNo
                                                    , Tot_OvertimeDate
                                                    , AdvOvtHr  = Sum(CASE WHEN Tot_OvertimeType = 'A' THEN Tot_OvertimeHours ELSE 0 End)
                                                    , MidOvtHr  = Sum(CASE WHEN Tot_OvertimeType = 'M' THEN Tot_OvertimeHours ELSE 0 End)
                                                    , PostOvtHr = Sum(CASE WHEN Tot_OvertimeType = 'P' THEN Tot_OvertimeHours ELSE 0 End)
                                                    FROM T_EmpOvertime
                                                    WHERE Tot_OvertimeStatus IN ('14','15')
                                                    GROUP BY Tot_IDNo
                                                    , Tot_OvertimeDate ) OvtTrn ON  Tot_IDNo = Ttr_IDNo
                                                                     AND Tot_OvertimeDate = Ttr_Date
                                        WHERE Ttr_PayCycle = @CurPayPeriod  {1}

                                        UPDATE T_EmpTimeRegister{0}
                                        SET Ttr_WFOTAdvHr     = Ttr_WFOTAdvHr + ISNULL(AdvOvtHr,0) 
                                             , Ttr_WFOTPostHr = Ttr_WFOTPostHr + ISNULL(PostOvtHr,0) + ISNULL(MidOvtHr,0)
                                        FROM T_EmpTimeRegister{0}
                                        INNER JOIN (SELECT Tot_IDNo
                                                    , Tot_OvertimeDate
                                                    , AdvOvtHr  = SUM(CASE WHEN Tot_OvertimeType = 'A' THEN Tot_OvertimeHours ELSE 0 End)
                                                    , MidOvtHr  = SUM(CASE WHEN Tot_OvertimeType = 'M' THEN Tot_OvertimeHours ELSE 0 End)
                                                    , PostOvtHr = SUM(Case WHEN Tot_OvertimeType = 'P' THEN Tot_OvertimeHours ELSE 0 End)
                                                    FROM T_EmpOvertimeHst
                                                    WHERE Tot_OvertimeStatus IN ('14','15')
                                                    GROUP BY Tot_IDNo
                                                    , Tot_OvertimeDate ) OvtTrn ON  Tot_IDNo = Ttr_IDNo
                                            AND Tot_OvertimeDate = Ttr_Date
                                        WHERE Ttr_PayCycle = @CurPayPeriod  {1}", HistExtension, EmployeeCondition);
            #endregion
            dal.ExecuteNonQuery(query, CommandType.Text, paramInfo);

            DataSet dsTemp = dal.ExecuteDataSet(string.Format(@"SELECT Ttr_IDNo, Ttr_Date, Ttr_WFOTAdvHr, Ttr_WFOTPostHr 
                                                                FROM T_EmpTimeRegister{0} 
                                                                WHERE Ttr_PayCycle = @CurPayPeriod {1}", HistExtension, EmployeeCondition), CommandType.Text, paramInfo);
        }

        public DataTable GetPayPeriodCycle(string PayPeriod)
        {
            string strQuery = string.Format(@"SELECT	Tps_PayCycle
		                                                ,Tps_StartCycle
		                                                ,Tps_EndCycle
                                                FROM	T_PaySchedule 
                                                WHERE	Tps_PayCycle = '{0}' 
                                                AND		Tps_RecordStatus = 'A'", PayPeriod);

            DataTable dtResult = dal.ExecuteDataSet(strQuery).Tables[0];
            return dtResult;
        }

        public void CheckEncodedPaidLeave(bool ProcessAll, string EmployeeId, bool ProcessCurrentPeriod, DALHelper dalHelper)
        {
            //Get all active leave applications
            ParameterInfo[] paramPayPeriod = new ParameterInfo[2];
            paramPayPeriod[0] = new ParameterInfo("@StartCycle", PayrollStart);
            paramPayPeriod[1] = new ParameterInfo("@EndCycle", PayrollEnd);

            string sqlLeaveList = @"SELECT Tlv_IDNo
                                          ,Tlv_LeaveDate
                                          ,Tlv_LeaveCode
                                          ,SUM(Tlv_LeaveHours) Tlv_LeaveHours
                                    FROM
                                    (
                                        SELECT Tlv_IDNo
                                              ,Tlv_LeaveDate
                                              ,Tlv_LeaveCode
                                              ,Sum(Tlv_LeaveHours) Tlv_LeaveHours
                                        FROM T_EmpLeave
                                        INNER JOIN M_Leave ON Mlv_LeaveCode = Tlv_LeaveCode
                                           AND Mlv_IsPaidLeave = 1
                                        WHERE Tlv_LeaveDate BETWEEN @StartCycle AND @EndCycle          
                                           AND Tlv_LeaveStatus in ('14','15')  {0}
                                        GROUP BY Tlv_IDNo
                                              ,Tlv_LeaveDate
                                              ,Tlv_LeaveCode
	                                    UNION
                                        SELECT Tlv_IDNo
                                              ,Tlv_LeaveDate
                                              ,Tlv_LeaveCode
                                              ,Sum(Tlv_LeaveHours) Tlv_LeaveHours
                                        FROM T_EmpLeaveHst
                                        INNER JOIN M_Leave ON Mlv_LeaveCode = Tlv_LeaveCode
                                           AND Mlv_IsPaidLeave = 1
                                        WHERE Tlv_LeaveDate BETWEEN @StartCycle AND @EndCycle         
                                           AND Tlv_LeaveStatus in ('14','15')  {0}
                                        GROUP BY Tlv_IDNo
                                              ,Tlv_LeaveDate
                                              ,Tlv_LeaveCode
                                    ) temp
                                    GROUP BY Tlv_IDNo
		                                    ,Tlv_LeaveDate
		                                    ,Tlv_LeaveCode
                                    ORDER BY Tlv_IDNo
		                                    ,Tlv_LeaveDate";

            if (!ProcessAll && EmployeeId != "")
                sqlLeaveList = string.Format(sqlLeaveList, " AND Tlv_IDNo = '" + EmployeeId + "'");
            else
                sqlLeaveList = string.Format(sqlLeaveList, "");
            DataTable dtLeaveList = dalHelper.ExecuteDataSet(sqlLeaveList, CommandType.Text, paramPayPeriod).Tables[0];

            //Initialize query to update leave type and hour
            ParameterInfo[] ParamLogLedger = new ParameterInfo[4];
            ParamLogLedger[0] = new ParameterInfo("@Ttr_IDNo", DBNull.Value);
            ParamLogLedger[1] = new ParameterInfo("@Ttr_Date", DBNull.Value);
            ParamLogLedger[2] = new ParameterInfo("@Ttr_WFPayLVCode", DBNull.Value);
            ParamLogLedger[3] = new ParameterInfo("@Ttr_WFPayLVHr", DBNull.Value);

            string sqlUpdateLogLedgerCombined = string.Format(@"UPDATE [T_EmpTimeRegister]
                                                                SET [Ttr_WFPayLVCode] = [Mlv_LeaveCode]
                                                                    ,[Ttr_WFPayLVHr]   = @Ttr_WFPayLVHr
                                                                FROM [T_EmpTimeRegister]
                                                                JOIN [M_Leave] ON RTRIM([Mlv_LeaveDescription]) = @Ttr_WFPayLVCode
                                                                WHERE [Ttr_IDNo] = @Ttr_IDNo
                                                                  AND [Ttr_Date] = @Ttr_Date

                                                                UPDATE [T_EmpTimeRegisterHst]
                                                                SET [Ttr_WFPayLVCode] = [Mlv_LeaveCode]
                                                                    ,[Ttr_WFPayLVHr]   = @Ttr_WFPayLVHr
                                                                FROM [T_EmpTimeRegisterHst]
                                                                JOIN [M_Leave] ON RTRIM([Mlv_LeaveDescription]) = @Ttr_WFPayLVCode
                                                                WHERE [Ttr_IDNo] = @Ttr_IDNo
                                                                  AND [Ttr_Date] = @Ttr_Date");

            string sqlUpdateLogLedger = string.Format(@"UPDATE [T_EmpTimeRegister]
                                                        SET [Ttr_WFPayLVCode] = @Ttr_WFPayLVCode
                                                            ,[Ttr_WFPayLVHr]   = @Ttr_WFPayLVHr                                                  
                                                        WHERE [Ttr_IDNo] = @Ttr_IDNo
                                                            AND [Ttr_Date] = @Ttr_Date

                                                        UPDATE [T_EmpTimeRegisterHst]
                                                        SET [Ttr_WFPayLVCode] = @Ttr_WFPayLVCode
                                                            ,[Ttr_WFPayLVHr]   = @Ttr_WFPayLVHr                                                  
                                                        WHERE [Ttr_IDNo] = @Ttr_IDNo
                                                            AND [Ttr_Date] = @Ttr_Date");

            //START PROCESSING OF LEAVE TYPE AND HOUR UPDATE
            string EmployeeID = string.Empty;
            DateTime ProcessDate = DateTime.Now;
            ArrayList ListRows = new ArrayList();

            // (Initialize Leave Type and Hour)
            string sqlInitializeLeaveType = @"UPDATE [T_EmpTimeRegister]
                                             SET [Ttr_WFPayLVCode] = ''
                                                ,[Ttr_WFPayLVHr]   = 0
                                             WHERE Ttr_PayCycle = '{0}' {1} 

                                             UPDATE [T_EmpTimeRegisterHst]
                                             SET [Ttr_WFPayLVCode] = ''
                                                ,[Ttr_WFPayLVHr]   = 0
                                             WHERE Ttr_PayCycle = '{0}' {1}";
            if (!ProcessAll && EmployeeId != "")
                sqlInitializeLeaveType = string.Format(sqlInitializeLeaveType, ProcessPayrollPeriod, " AND Ttr_IDNo = '" + EmployeeId + "'");
            else
                sqlInitializeLeaveType = string.Format(sqlInitializeLeaveType, ProcessPayrollPeriod, "");
            dalHelper.ExecuteNonQuery(sqlInitializeLeaveType);

            foreach (DataRow drLeave in dtLeaveList.Rows)
            {
                //something's wrong in this condition; investigate further
                if (EmployeeID != GetValue(drLeave["Tlv_IDNo"]) || ProcessDate != Convert.ToDateTime(drLeave["Tlv_LeaveDate"]))
                {
                    if (ListRows.Count > 1)
                    {
                        string CombinedLeave = string.Empty;
                        decimal TotalLeave = 0;

                        foreach (DataRow drCombinedLeave in ListRows)
                        {
                            ParamLogLedger[0].Value = drCombinedLeave["Tlv_IDNo"];
                            ParamLogLedger[1].Value = drCombinedLeave["Tlv_LeaveDate"];
                            CombinedLeave += " + " + GetValue(drCombinedLeave["Tlv_LeaveCode"]);
                            TotalLeave += getDecimalValue(drCombinedLeave["Tlv_LeaveHours"]);
                        }

                        ParamLogLedger[2].Value = CombinedLeave.Remove(0, 3);
                        ParamLogLedger[3].Value = TotalLeave;

                        dalHelper.ExecuteNonQuery(sqlUpdateLogLedgerCombined, CommandType.Text, ParamLogLedger);
                    }

                    ListRows = new ArrayList();
                }

                if (Convert.ToDouble(drLeave["Tlv_LeaveHours"].ToString()) > 0)
                {
                    EmployeeID = GetValue(drLeave["Tlv_IDNo"]);
                    ProcessDate = Convert.ToDateTime(drLeave["Tlv_LeaveDate"]);

                    ParamLogLedger[0].Value = drLeave["Tlv_IDNo"];
                    ParamLogLedger[1].Value = drLeave["Tlv_LeaveDate"];
                    ParamLogLedger[2].Value = drLeave["Tlv_LeaveCode"];
                    ParamLogLedger[3].Value = drLeave["Tlv_LeaveHours"];
                    dalHelper.ExecuteNonQuery(sqlUpdateLogLedger, CommandType.Text, ParamLogLedger);

                    ListRows.Add(drLeave);
                }
            }

            //Set leave type to blank for those records with zero hours
            dalHelper.ExecuteNonQuery(CommonConstants.Queries.updateEncodedPaidLeave);
            //END
        }

        public void CheckEncodedNoPayLeave(bool ProcessAll, string EmployeeId, bool ProcessCurrentPeriod, DALHelper dalHelper)
        {
            //Get all active leave applications
            ParameterInfo[] paramPayPeriod = new ParameterInfo[2];
            paramPayPeriod[0] = new ParameterInfo("@StartCycle", PayrollStart);
            paramPayPeriod[1] = new ParameterInfo("@EndCycle", PayrollEnd);

            string sqlLeaveList1 = @"SELECT Tlv_IDNo
                                          ,Tlv_LeaveDate
                                          ,Tlv_LeaveCode
                                          ,SUM(Tlv_LeaveHours) Tlv_LeaveHours
                                    FROM   (
                                        SELECT Tlv_IDNo
                                              ,Tlv_LeaveDate
                                              ,Tlv_LeaveCode
                                              ,Sum(Tlv_LeaveHours) Tlv_LeaveHours
                                        FROM T_EmpLeave
                                        INNER JOIN M_Leave ON Mlv_LeaveCode = Tlv_LeaveCode
                                            AND Mlv_IsPaidLeave = 0
                                         WHERE Tlv_LeaveDate BETWEEN @StartCycle AND @EndCycle          
                                            AND Tlv_LeaveStatus in ('14','15')  {0}
                                        GROUP BY Tlv_IDNo
                                              ,Tlv_LeaveDate
                                              ,Tlv_LeaveCode
	                                    UNION
                                        SELECT Tlv_IDNo
                                              ,Tlv_LeaveDate
                                              ,Tlv_LeaveCode
                                              ,Sum(Tlv_LeaveHours) Tlv_LeaveHours
                                        FROM T_EmpLeaveHst
                                        INNER JOIN M_Leave ON Mlv_LeaveCode = Tlv_LeaveCode
                                            AND Mlv_IsPaidLeave = 0
                                        WHERE Tlv_LeaveDate BETWEEN @StartCycle AND @EndCycle         
                                           AND Tlv_LeaveStatus in ('14','15')  {0}
                                        GROUP BY Tlv_IDNo
                                              ,Tlv_LeaveDate
                                              ,Tlv_LeaveCode
                                    ) temp
                                    GROUP BY Tlv_IDNo
		                                    ,Tlv_LeaveDate
		                                    ,Tlv_LeaveCode
                                    ORDER BY Tlv_IDNo
		                                    ,Tlv_LeaveDate";

            if (!ProcessAll && EmployeeId != "")
                sqlLeaveList1 = string.Format(sqlLeaveList1, " AND Tlv_IDNo = '" + EmployeeId + "'");
            else
                sqlLeaveList1 = string.Format(sqlLeaveList1, "");
            DataTable dtLeaveList1 = dalHelper.ExecuteDataSet(sqlLeaveList1, CommandType.Text, paramPayPeriod).Tables[0];

            //Initialize query to update leave type and hour
            ParameterInfo[] ParamLogLedger1 = new ParameterInfo[4];
            ParamLogLedger1[0] = new ParameterInfo("@Ttr_IDNo", DBNull.Value);
            ParamLogLedger1[1] = new ParameterInfo("@Ttr_Date", DBNull.Value);
            ParamLogLedger1[2] = new ParameterInfo("@Ttr_WFPayLVCode", DBNull.Value);
            ParamLogLedger1[3] = new ParameterInfo("@Ttr_WFPayLVHr", DBNull.Value);

            string sqlUpdateLogLedgerCombined1 = string.Format(@"UPDATE [T_EmpTimeRegister]
                                                                 SET [Ttr_WFNoPayLVCode] = [Mlv_LeaveCode]
                                                                    ,[Ttr_WFNoPayLVHr] = @Ttr_WFPayLVHr
                                                                 FROM [T_EmpTimeRegister]
                                                                 JOIN [M_Leave] ON RTRIM([Mlv_LeaveDescription]) = @Ttr_WFPayLVCode
                                                                 WHERE [Ttr_IDNo] = @Ttr_IDNo
                                                                    AND [Ttr_Date] = @Ttr_Date

                                                                 UPDATE [T_EmpTimeRegisterHst]
                                                                 SET [Ttr_WFNoPayLVCode] = [Mlv_LeaveCode]
                                                                    ,[Ttr_WFNoPayLVHr] = @Ttr_WFPayLVHr
                                                                 FROM [T_EmpTimeRegisterHst]
                                                                 JOIN [M_Leave] ON RTRIM([Mlv_LeaveDescription]) = @Ttr_WFPayLVCode
                                                                 WHERE [Ttr_IDNo] = @Ttr_IDNo
                                                                    AND [Ttr_Date] = @Ttr_Date");

            string sqlUpdateLogLedger1 = string.Format(@"UPDATE [T_EmpTimeRegister]
                                                         SET [Ttr_WFNoPayLVCode] = @Ttr_WFPayLVCode
                                                            ,[Ttr_WFNoPayLVHr] = @Ttr_WFPayLVHr                                                  
                                                         WHERE [Ttr_IDNo] = @Ttr_IDNo
                                                             AND [Ttr_Date] = @Ttr_Date

                                                         UPDATE [T_EmpTimeRegisterHst]
                                                         SET [Ttr_WFNoPayLVCode] = @Ttr_WFPayLVCode
                                                            ,[Ttr_WFNoPayLVHr] = @Ttr_WFPayLVHr                                                  
                                                         WHERE [Ttr_IDNo] = @Ttr_IDNo
                                                             AND [Ttr_Date] = @Ttr_Date");

            //START PROCESSING OF LEAVE TYPE AND HOUR UPDATE
            string EmployeeID1 = string.Empty;
            DateTime ProcessDate1 = DateTime.Now;
            ArrayList ListRows1 = new ArrayList();

            // (Initialize Leave Type and Hour)
            string sqlInitializeLeaveType = @"UPDATE [T_EmpTimeRegister]
                                              SET [Ttr_WFNoPayLVCode] = ''
                                                ,[Ttr_WFNoPayLVHr]   = 0
                                              WHERE Ttr_PayCycle = '{0}' {1} 

                                              UPDATE [T_EmpTimeRegisterHst]
                                              SET [Ttr_WFNoPayLVCode] = ''
                                                ,[Ttr_WFNoPayLVHr]   = 0
                                              WHERE Ttr_PayCycle = '{0}' {1}";
            if (!ProcessAll && EmployeeId != "")
                sqlInitializeLeaveType = string.Format(sqlInitializeLeaveType, ProcessPayrollPeriod, " AND Ttr_IDNo = '" + EmployeeId + "'");
            else
                sqlInitializeLeaveType = string.Format(sqlInitializeLeaveType, ProcessPayrollPeriod, "");
            dalHelper.ExecuteNonQuery(sqlInitializeLeaveType);

            foreach (DataRow drLeave in dtLeaveList1.Rows)
            {
                if (EmployeeID1 != GetValue(drLeave["Tlv_IDNo"]) || ProcessDate1 != Convert.ToDateTime(drLeave["Tlv_LeaveDate"]))
                {
                    if (ListRows1.Count > 1)
                    {
                        string CombinedLeave = string.Empty;
                        decimal TotalLeave = 0;

                        foreach (DataRow drCombinedLeave in ListRows1)
                        {
                            ParamLogLedger1[0].Value = drCombinedLeave["Tlv_IDNo"];
                            ParamLogLedger1[1].Value = drCombinedLeave["Tlv_LeaveDate"];
                            CombinedLeave += " + " + GetValue(drCombinedLeave["Tlv_LeaveCode"]);
                            TotalLeave += getDecimalValue(drCombinedLeave["Tlv_LeaveHours"]);
                        }

                        ParamLogLedger1[2].Value = CombinedLeave.Remove(0, 3);
                        ParamLogLedger1[3].Value = TotalLeave;

                        dalHelper.ExecuteNonQuery(sqlUpdateLogLedgerCombined1, CommandType.Text, ParamLogLedger1);
                    }

                    ListRows1 = new ArrayList();
                }

                if (Convert.ToDouble(drLeave["Tlv_LeaveHours"].ToString()) > 0)
                {
                    EmployeeID1 = GetValue(drLeave["Tlv_IDNo"]);
                    ProcessDate1 = Convert.ToDateTime(drLeave["Tlv_LeaveDate"]);

                    ParamLogLedger1[0].Value = drLeave["Tlv_IDNo"];
                    ParamLogLedger1[1].Value = drLeave["Tlv_LeaveDate"];
                    ParamLogLedger1[2].Value = drLeave["Tlv_LeaveCode"];
                    ParamLogLedger1[3].Value = drLeave["Tlv_LeaveHours"];
                    dalHelper.ExecuteNonQuery(sqlUpdateLogLedger1, CommandType.Text, ParamLogLedger1);

                    ListRows1.Add(drLeave);
                }
            }

            //Set leave type to blank for those records with zero hours
            dalHelper.ExecuteNonQuery(CommonConstants.Queries.updateEncodedNoPayLeave);
            //END
        }

        public DataTable GetUserGeneratedPayrollTransactionRecords(bool ProcessAll, string EmployeeId)
        {
            string query = @"SELECT Tph_IDNo 
                             FROM {1}
                             WHERE Tph_RetainUserEntry = 1
                                AND Tph_PayCycle = '{2}' {0}";
            if (!ProcessAll && EmployeeId != "")
                query = string.Format(query, " AND Tph_IDNo = '" + EmployeeId + "'"
                                            , EmpPayTranHdrTable
                                            , ProcessPayrollPeriod);
            else if (ProcessAll == true && EmployeeList != "")
                query = string.Format(query, " AND Tph_IDNo IN (" + EmployeeList + ")"
                                            , EmpPayTranHdrTable
                                            , ProcessPayrollPeriod);
            else if (ProcessAll == true)
                query = string.Format(query, "", EmpPayTranHdrTable, ProcessPayrollPeriod);
            DataTable dtResult = dal.ExecuteDataSet(query).Tables[0];
            return dtResult;
        }

        public void ClearTransactionTables(bool ProcessAll, string PayPeriod, DALHelper dalHelper)
        {
            this.dal = dalHelper;
            ClearTransactionTables(ProcessAll, "", PayPeriod, true);
        }

        public void ClearTransactionTables(bool ProcessAll, string EmployeeId, string PayPeriod, bool bClearLaborCheck)
        {
            #region Query
            string query = @"DELETE A
                            FROM {5} A
                            LEFT JOIN {3} B ON A.Tph_IDNo = B.Tph_IDNo
                                AND A.Tph_PayCycle = B.Tph_PayCycle
                            WHERE A.Tph_PayCycle = '{7}'
                                    AND (B.Tph_RetainUserEntry = 0
                                    OR B.Tph_IDNo IS NULL) {8}

                             DELETE A
                                FROM {4} A
                                LEFT JOIN {3} B ON A.Tpd_IDNo = B.Tph_IDNo
                                    AND A.Tpd_PayCycle = B.Tph_PayCycle
                                WHERE A.Tpd_PayCycle = '{7}'
                                    AND (B.Tph_RetainUserEntry = 0
                                    OR B.Tph_IDNo IS NULL) {1}

                             DELETE A
                                FROM {6} A
                                LEFT JOIN {3} B ON A.Tpd_IDNo = B.Tph_IDNo
                                    AND A.Tpd_PayCycle = B.Tph_PayCycle
                                WHERE A.Tpd_PayCycle = '{7}'
                                    AND (B.Tph_RetainUserEntry = 0
                                    OR B.Tph_IDNo IS NULL) {1}

                             DELETE FROM {3} WHERE (Tph_RetainUserEntry IS NULL OR Tph_RetainUserEntry = 0) AND Tph_PayCycle = '{7}' {0}

                             IF ('{9}' = 'TRUE')
                                DELETE FROM T_EmpLaborCheck WHERE Tlc_PayCycle = '{7}' {2}";
            #endregion
            if (!ProcessAll && EmployeeId != "")
                query = string.Format(query, " AND Tph_IDNo = '" + EmployeeId + "'"
                                            , " AND A.Tpd_IDNo = '" + EmployeeId + "'"
                                            , " AND Tlc_IDNo = '" + EmployeeId + "'"
                                            , EmpPayTranHdrTable 
                                            , EmpPayTranDtlTable 
                                            , EmpPayTranHdrMiscTable    //5
                                            , EmpPayTranDtlMiscTable    //6
                                            , PayPeriod //7
                                            , " AND A.Tph_IDNo = '" + EmployeeId + "'" //8
                                            , (bClearLaborCheck ? "TRUE" : "FALSE"));   //9 
            else if (ProcessAll == true && EmployeeList != "")
                query = string.Format(query, " AND Tph_IDNo IN (" + EmployeeList + ")"
                                            , " AND A.Tpd_IDNo IN (" + EmployeeList + ")"
                                            , " AND Tlc_IDNo IN (" + EmployeeList + ")"
                                            , EmpPayTranHdrTable
                                            , EmpPayTranDtlTable 
                                            , EmpPayTranHdrMiscTable 
                                            , EmpPayTranDtlMiscTable   
                                            , PayPeriod     //7
                                            , " AND A.Tph_IDNo IN (" + EmployeeList + ")" //8
                                            , (bClearLaborCheck ? "TRUE" : "FALSE")); //9
                                            
            else if (ProcessAll == true)
                query = string.Format(query, "", "", "", EmpPayTranHdrTable, EmpPayTranDtlTable, EmpPayTranHdrMiscTable, EmpPayTranDtlMiscTable, PayPeriod, "", (bClearLaborCheck ? "TRUE" : "FALSE"));
            dal.ExecuteNonQuery(query);
        }

        public void ClearTransactionHistTables(bool ProcessAll, string EmployeeId, string PayPeriod)
        {
            #region Query
            string query = @"DELETE A
                                FROM {5} A
                                LEFT JOIN {3} B ON A.Tph_IDNo = B.Tph_IDNo
                                    AND A.Tph_PayCycle = B.Tph_PayCycle
                                WHERE A.Tph_PayCycle = '{7}'
                                {8}

                             DELETE A
                                FROM {4} A
                                LEFT JOIN {3} B ON A.Tpd_IDno = B.Tph_IDNo
                                    AND A.Tpd_PayCycle = B.Tph_PayCycle
                                WHERE A.Tpd_PayCycle = '{7}'
                                {1}

                             DELETE A
                                FROM {6} A
                                LEFT JOIN {3} B ON A.Tpd_IDno = B.Tph_IDNo
                                    AND A.Tpd_PayCycle = B.Tph_PayCycle
                                WHERE A.Tpd_PayCycle = '{7}'
                                {1}

                             DELETE FROM {3} WHERE Tph_PayCycle = '{7}' {0}";
            #endregion
            if (!ProcessAll && EmployeeId != "")
                query = string.Format(query, " AND Tph_IDNo = '" + EmployeeId + "'"
                                            , " AND A.Tpd_IDNo = '" + EmployeeId + "'"
                                            , " AND Tlc_IDNo = '" + EmployeeId + "'"
                                            , EmpPayTranHdrTable 
                                            , EmpPayTranDtlTable //gcd new 4
                                            , EmpPayTranHdrMiscTable //gcd new 5
                                            , EmpPayTranDtlMiscTable    //gcd new 6
                                            , PayPeriod
                                            , " AND A.Tph_IDNo = '" + EmployeeId + "'"); //8
            else if (ProcessAll == true && EmployeeList != "")
                query = string.Format(query, " AND Tph_IDNo IN (" + EmployeeList + ")"
                                            , " AND A.Tpd_IDNo IN (" + EmployeeList + ")"
                                            , " AND Tlc_IDNo IN (" + EmployeeList + ")"
                                            , EmpPayTranHdrTable
                                            , EmpPayTranDtlTable //gcd new
                                            , EmpPayTranHdrMiscTable //gcd new
                                            , EmpPayTranDtlMiscTable    //gcd new
                                            , PayPeriod
                                            , " AND A.Tph_IDNo IN (" + EmployeeList + ")"); //8);
            else if (ProcessAll == true)
                query = string.Format(query, "", "", "", EmpPayTranHdrTable, EmpPayTranDtlTable, EmpPayTranHdrMiscTable, EmpPayTranDtlMiscTable, PayPeriod, "");
            dal.ExecuteNonQuery(query);
        }

        public void ClearTransactionTrailTables(bool ProcessAll, string EmployeeId, string PayPeriod)
        {
            string EmployeeConditionHdr = ""; //gcd
            string EmployeeConditionDtl = ""; //gcd
            if (!ProcessAll && EmployeeId != "")
                EmployeeConditionHdr += " AND Tph_IDNo = '" + EmployeeId + "'";
                EmployeeConditionDtl += " AND Tph_IDNo = '" + EmployeeId + "'";

            string query = string.Format(@" DELETE FROM T_EmpPayTranHdrTrl WHERE Tph_PayCycle = '{0}' AND Tph_AdjPayCycle = '{1}' {2}
                                            DELETE FROM T_EmpPayTranHdrMiscTrl WHERE Tph_PayCycle = '{0}' AND Tph_AdjPayCycle = '{1}' {2}
                                            DELETE FROM T_EmpPayTranDtlTrl WHERE Tpd_PayCycle = '{0}' AND Tpd_AdjPayCycle = '{1}' {3}
                                            DELETE FROM T_EmpPayTranDtlMiscTrl WHERE Tpd_PayCycle = '{0}' AND Tpd_AdjPayCycle = '{1}' {3}", PayPeriod, AdjustPayrollPeriod, EmployeeConditionHdr, EmployeeConditionDtl); //gcd not sure if ok
            dal.ExecuteNonQuery(query);
        }

        public string GetPrevPayPeriod(string Tps_PayCycle, DALHelper dal)
        {
            DataSet ds = new DataSet();
            string _prevpayperiod = string.Empty;

            #region query
            string qString = string.Format(@"SELECT Tps_PayCycle 
                                             FROM T_PaySchedule 
                                             WHERE Tps_EndCycle = (SELECT DATEADD(dd, -1, Tps_StartCycle)
                                                                FROM T_PaySchedule
                                                                WHERE  Tps_PayCycle = '{0}'
						                                            AND Tps_RecordStatus = 'A'
						                                            AND Right(Tps_PayCycle,1) IN ('1','2'))
                                                AND Tps_RecordStatus = 'A'
                                                AND Right(Tps_PayCycle,1) IN ('1','2')", Tps_PayCycle);
            #endregion

            ds = dal.ExecuteDataSet(qString);

            if (ds.Tables[0].Rows.Count != 0)
                _prevpayperiod = ds.Tables[0].Rows[0]["Tps_PayCycle"].ToString();

            return _prevpayperiod;
        }

        public void CleanUpBeforeGeneration(bool ProcessAll, string EmployeeId)
        {
            string qString = string.Empty;
            #region query
            qString = string.Format(@"UPDATE {0}
                                        SET  Ttr_PayLVMin               = 0
                                            , Ttr_ExcLVMin              = 0
                                            , Ttr_NoPayLVMin            = 0
                                            , Ttr_OTMin                 = 0
                                            , Ttr_CompOTMin             = 0
                                            , Ttr_OffsetOTMin           = 0
                                            , Ttr_ConvIn_1Min           = 0
                                            , Ttr_ConvOut_1Min          = 0
                                            , Ttr_ConvIn_2Min           = 0
                                            , Ttr_ConvOut_2Min          = 0
                                            , Ttr_CompIn_1Min           = 0
                                            , Ttr_CompOut_1Min          = 0
                                            , Ttr_CompIn_2Min           = 0
                                            , Ttr_CompOut_2Min          = 0
                                            , Ttr_CompAdvOTMin          = 0
                                            , Ttr_ShiftIn_1Min          = 0
                                            , Ttr_ShiftOut_1Min         = 0
                                            , Ttr_ShiftIn_2Min          = 0
                                            , Ttr_ShiftOut_2Min         = 0
                                            , Ttr_ShiftMin              = 0
                                            , Ttr_ScheduleType          = ''
                                            , Ttr_ActLT1Min             = 0
                                            , Ttr_ActLT2Min             = 0
                                            , Ttr_CompLT1Min            = 0
                                            , Ttr_CompLT2Min            = 0
                                            , Ttr_ActUT1Min             = 0
                                            , Ttr_ActUT2Min             = 0
                                            , Ttr_CompUT1Min            = 0
                                            , Ttr_CompUT2Min            = 0
                                            , Ttr_InitialABSMin         = 0
                                            , Ttr_CompABSMin            = 0
                                            , Ttr_CompREGMin            = 0
                                            , Ttr_CompWorkMin           = 0
                                            , Ttr_CompNDMin             = 0
                                            , Ttr_CompNDOTMin           = 0
                                            , Ttr_PrvDayWorkMin         = 0
                                            , Ttr_PrvDayHolRef          = null
                                            , Ttr_PDHOLHour             = 0.00
                                            , Ttr_PDRESTLEGHOLDay       = 0
                                            , Ttr_WorkDay               = 0
                                            , Ttr_EXPHour               = 0.00
                                            , Ttr_ABSHour               = 0.00
                                            , Ttr_REGHour               = 0.00
                                            , Ttr_OTHour                = 0.00
                                            , Ttr_NDHour                = 0.00
                                            , Ttr_NDOTHour              = 0.00
                                            , Ttr_LVHour                = 0.00
                                            , Ttr_PaidBreakHour         = 0.00
                                            , Ttr_OBHour                = 0.00
                                            , Ttr_RegPlusHour           = 0.00
                                            , Ttr_TBAmt01               = 0.00
                                            , Ttr_TBAmt02               = 0.00
                                            , Ttr_TBAmt03               = 0.00
                                            , Ttr_TBAmt04               = 0.00
                                            , Ttr_TBAmt05               = 0.00
                                            , Ttr_TBAmt06               = 0.00
                                            , Ttr_TBAmt07               = 0.00
                                            , Ttr_TBAmt08               = 0.00
                                            , Ttr_TBAmt09               = 0.00
                                            , Ttr_TBAmt10               = 0.00
                                            , Ttr_TBAmt11               = 0.00
                                            , Ttr_TBAmt12               = 0.00
                                    WHERE  Ttr_PayCycle = '{1}'", EmpTimeRegisterTable, ProcessPayrollPeriod);
            #endregion
            if (!ProcessAll && EmployeeId != "")
                qString += " AND Ttr_IDNo = '" + EmployeeId + "'";
            else if (ProcessAll == true && EmployeeList != "")
                qString += " AND Ttr_IDNo IN (" + EmployeeList + ")";
            dal.ExecuteNonQuery(qString);
        }

        public DataTable GetAllEmployeeForProcess(bool ProcessAll, string EmployeeId, bool IsFlexShift)
        {
            string EmployeeCondition = "";
            string PayPeriodCondition = "";
            if (!ProcessAll && EmployeeId != "")
                EmployeeCondition = " AND Ttr_IDNo = '" + EmployeeId + "' ";
            else if (ProcessAll == true && EmployeeList != "")
                EmployeeCondition = " AND Ttr_IDNo IN (" + EmployeeList + ") ";
            if (bProcessTrail)
                PayPeriodCondition = " AND Ttr_AdjPayCycle = '" + AdjustPayrollPeriod + "'";

            string query = "";
            if (IsFlexShift == false)
            {
                #region Normal Query
                query = string.Format(@"SELECT Ttr_IDNo
                                            , Ttr_Date
                                            , Ttr_PayCycle
                                            , Ttr_DayCode
                                            , Ttr_ShiftCode
                                            , Ttr_HolidayFlag
                                            , Ttr_RestDayFlag
                                            , Ttr_ActIn_1
                                            , Ttr_ActOut_1
                                            , Ttr_ActIn_2
                                            , Ttr_ActOut_2
                                            , Ttr_WFPayLVCode
                                            , Ttr_WFPayLVHr
                                            , Ttr_PayLVMin
                                            , Ttr_ExcLVMin
                                            , Ttr_WFNoPayLVCode
                                            , Ttr_WFNoPayLVHr
                                            , Ttr_NoPayLVMin
                                            , Ttr_WFOTAdvHr
                                            , Ttr_WFOTPostHr
                                            , Ttr_OTMin
                                            , Ttr_CompOTMin
                                            , Ttr_OffsetOTMin
                                            , Ttr_WFTimeMod
                                            , Ttr_WFFlexTime
                                            , Ttr_Amnesty
                                            , Ttr_SkipService
                                            , Ttr_SkipServiceBy
                                            , Ttr_SkipServiceDate
                                            , Ttr_AssumedFlag
                                            , Ttr_AssumedBy
                                            , Ttr_AssumedDate
                                            , Ttr_AssumedPost

                                            , Ttr_ConvIn_1Min
                                            , Ttr_ConvOut_1Min
                                            , Ttr_ConvIn_2Min
                                            , Ttr_ConvOut_2Min
                                            , Ttr_CompIn_1Min
                                            , Ttr_CompOut_1Min
                                            , Ttr_CompIn_2Min
                                            , Ttr_CompOut_2Min
                                            , Ttr_CompAdvOTMin
                                            , Ttr_ShiftIn_1Min
                                            , Ttr_ShiftOut_1Min
                                            , Ttr_ShiftIn_2Min
                                            , Ttr_ShiftOut_2Min
                                            , Ttr_ShiftMin
                                            , Ttr_ScheduleType
                                            , Ttr_ActLT1Min
                                            , Ttr_ActLT2Min
                                            , Ttr_CompLT1Min
                                            , Ttr_CompLT2Min
                                            , Ttr_ActUT1Min
                                            , Ttr_ActUT2Min
                                            , Ttr_CompUT1Min
                                            , Ttr_CompUT2Min

                                            , Ttr_InitialABSMin
                                            , Ttr_CompABSMin
                                            , Ttr_CompREGMin
                                            , Ttr_CompWorkMin
                                            , Ttr_CompNDMin
                                            , Ttr_CompNDOTMin
                                            , Ttr_PrvDayWorkMin
                                            , Ttr_PrvDayHolRef
                                            , Ttr_PDHOLHour
                                            , Ttr_PDRESTLEGHOLDay
                                            , Ttr_WorkDay
                                            , Ttr_EXPHour
                                            , Ttr_ABSHour
                                            , Ttr_REGHour
                                            , Ttr_OTHour
                                            , Ttr_NDHour
                                            , Ttr_NDOTHour
                                            , Ttr_LVHour
                                            , Ttr_PaidBreakHour
                                            , Ttr_OBHour
                                            , Ttr_RegPlusHour

                                            , Ttr_TBAmt01
                                            , Ttr_TBAmt02
                                            , Ttr_TBAmt03
                                            , Ttr_TBAmt04
                                            , Ttr_TBAmt05
                                            , Ttr_TBAmt06
                                            , Ttr_TBAmt07
                                            , Ttr_TBAmt08
                                            , Ttr_TBAmt09
                                            , Ttr_TBAmt10
                                            , Ttr_TBAmt11
                                            , Ttr_TBAmt12
                                            
                                            , Ttr_WorkLocationCode
                                            , Ttr_CalendarGroup
                                            , Ttr_PremiumGrpCode
                                            , Ttr_PayrollGroup
                                            , Ttr_CostcenterCode
                                            , Ttr_EmploymentStatusCode
                                            , ISNULL(ISNULL(A.Tsl_PayrollType, B.Tsl_PayrollType), Ttr_PayrollType) AS Ttr_PayrollType 
                                            , Ttr_Grade
                                            
                                            , Mem_LastName
                                            , Mem_FirstName
                                            , Mem_MiddleName
                                            , Mem_PositionCode
                                            , Mem_SeparationDate
                                            , Mem_CompanyCode
                                            , Mem_IsComputedPerDay
                                            , Mem_PayrollType
                                            , Mem_PayrollGroup
                                            , Mem_EmploymentStatusCode
                                            , Mem_PremiumGrpCode
                                            , Mem_PositionGrade

                                            , ISNULL(Msh_Schedule, '') as Msh_Schedule
                                            , ISNULL(Msh_ShiftIn1, '0000') as Msh_ShiftIn1
                                            , ISNULL(Msh_PadIn1, 0) as Msh_PadIn1 
                                            , ISNULL(Msh_ShiftOut1, '0000') as Msh_ShiftOut1
                                            , ISNULL(Msh_PadOut1, 0) as Msh_PadOut1
                                            , ISNULL(Msh_ShiftIn2, '0000') as Msh_ShiftIn2
                                            , ISNULL(Msh_PadIn2, 0) as Msh_PadIn2
                                            , ISNULL(Msh_ShiftOut2, '0000') as Msh_ShiftOut2
                                            , ISNULL(Msh_PadOut2, 0) as Msh_PadOut2
                                            , ISNULL(Msh_ShiftHours, 0) as Msh_ShiftHours
                                            , ISNULL(Msh_8HourShiftCode, '') as Msh_8HourShiftCode
                                            , ISNULL(Msh_PaidBreak, 0) as Msh_PaidBreak
                                            , ISNULL(Msh_HourFractionCutoff, '') as Msh_HourFractionCutoff
                                            , ISNULL(Msh_NDCount, 0) as Msh_NDCount
                                            , ISNULL(Msh_RequiredLogsOnBreak,0) as Msh_RequiredLogsOnBreak
                                            , ISNULL(Msh_ReducedTimeOut2, '0000') as Msh_ReducedTimeOut2
                                            , ISNULL(Msh_OTRoundBreak, 0) as Msh_OTRoundBreak  
                                        FROM {2} 
                                        INNER JOIN M_Employee ON Mem_IDNo = Ttr_IDNo
                                        LEFT JOIN {5}..M_Shift ON Ttr_ShiftCode = Msh_ShiftCode
                                            AND Msh_CompanyCode = '{4}'
                                        LEFT JOIN {5}..T_EmpSalary A ON Ttr_IDNo = A.Tsl_IDNo
											AND Ttr_Date BETWEEN A.Tsl_StartDate  AND ISNULL(A.Tsl_EndDate, CASE WHEN A.Tsl_StartDate >= '{7}' THEN A.Tsl_StartDate ELSE CASE WHEN A.Tsl_EndDate IS NULL THEN '{7}' ELSE A.Tsl_EndDate END END)
										LEFT JOIN {5}..T_EmpSalary B ON Ttr_IDNo = B.Tsl_IDNo
											AND Mem_IntakeDate BETWEEN B.Tsl_StartDate  AND ISNULL(B.Tsl_EndDate, CASE WHEN B.Tsl_StartDate >= '{7}' THEN B.Tsl_StartDate ELSE CASE WHEN B.Tsl_EndDate IS NULL THEN '{7}' ELSE  B.Tsl_EndDate END END)

                                        WHERE Ttr_PayCycle = '{0}' {1} {3}
                                        ORDER BY Mem_LastName, Mem_FirstName, Ttr_Date"
                                        , ProcessPayrollPeriod
                                        , EmployeeCondition
                                        , EmpTimeRegisterTable
                                        , PayPeriodCondition
                                        , companyCode
                                        , centralProfile
                                        , PayrollStart
                                        , PayrollEnd);
                #endregion
            }
            else
            {
                #region Flex Shift Query
                query = string.Format(@"IF OBJECT_ID('tempdb..#ShiftCodeMaster') IS NOT NULL
                                           DROP TABLE #ShiftCodeMaster

                                            SELECT ISNULL(PARSENAME(REPLACE(CUR.Msh_ShiftCode, '-', '.'),2), CUR.Msh_ShiftCode) COLLATE {6} AS FlexCode
	                                            , CUR.Msh_ShiftCode COLLATE {6} AS CurShiftCode 
	                                            , CUR.Msh_ShiftIn1 COLLATE {6} AS CurTimeIN
	                                            , PREV.Msh_ShiftCode COLLATE {6} AS PrevShiftCode
	                                            , PREV.Msh_ShiftIn1 COLLATE {6} AS PrevTimeIN
	                                            , NEX.Msh_ShiftCode COLLATE {6} AS NextShiftCode
	                                            , NEX.Msh_ShiftIn1 COLLATE {6} AS NextTimeIN
	                                            , ISNULL((SELECT TOP 1 Msh_ShiftCode
		                                            FROM {5}..M_Shift
		                                            WHERE Msh_IsDefaultShift = 1
			                                            AND Msh_RecordStatus = 'A'
                                                        AND Msh_CompanyCode = '{4}'
			                                            AND ISNULL(PARSENAME(REPLACE(Msh_ShiftCode, '-', '.'),2), Msh_ShiftCode) 
				                                            = ISNULL(PARSENAME(REPLACE(CUR.Msh_ShiftCode, '-', '.'),2), CUR.Msh_ShiftCode)), CUR.Msh_ShiftCode) COLLATE {6} AS DefaultShiftCode
                                            INTO #ShiftCodeMaster
                                            FROM {5}..M_Shift CUR
                                            LEFT JOIN {5}..M_Shift PREV ON PREV.Msh_ShiftCode = (SELECT MAX(Msh_ShiftCode) FROM {5}..M_Shift WHERE Msh_ShiftCode < CUR.Msh_ShiftCode AND Msh_CompanyCode = '{4}')
	                                            AND PARSENAME(REPLACE(CUR.Msh_ShiftCode, '-', '.'),2) = PARSENAME(REPLACE(PREV.Msh_ShiftCode, '-', '.'),2)
	                                            AND PREV.Msh_RecordStatus = 'A'
                                                AND PREV.Msh_CompanyCode = '{4}'
                                            LEFT JOIN {5}..M_Shift NEX ON NEX.Msh_ShiftCode = (SELECT MIN(Msh_ShiftCode) FROM M_Shift WHERE Msh_ShiftCode > CUR.Msh_ShiftCode AND Msh_CompanyCode = '{4}')
	                                            AND PARSENAME(REPLACE(CUR.Msh_ShiftCode, '-', '.'),2) = PARSENAME(REPLACE(NEX.Msh_ShiftCode, '-', '.'),2)
	                                            AND NEX.Msh_RecordStatus = 'A'
                                                AND NEX.Msh_CompanyCode = '{4}'
                                            WHERE CUR.Msh_RecordStatus = 'A'

                                            SELECT Ttr_IDNo
                                                , Ttr_Date
                                                , Ttr_PayCycle
                                                , Ttr_DayCode
                                                , COALESCE(Flex.Msh_ShiftCode, Ttr_ShiftCode) as Ttr_ShiftCode
                                                , Ttr_HolidayFlag
                                                , Ttr_RestDayFlag
                                                
                                                , Ttr_ActIn_1
                                                , Ttr_ActOut_1
                                                , Ttr_ActIn_2
                                                , Ttr_ActOut_2
                                                , Ttr_WFPayLVCode
                                                , Ttr_WFPayLVHr
                                                , Ttr_PayLVMin
                                                , Ttr_ExcLVMin
                                                , Ttr_WFNoPayLVCode
                                                , Ttr_WFNoPayLVHr
                                                , Ttr_NoPayLVMin
                                                , Ttr_WFOTAdvHr
                                                , Ttr_WFOTPostHr
                                                , Ttr_OTMin
                                                , Ttr_CompOTMin
                                                , Ttr_OffsetOTMin
                                                , Ttr_WFTimeMod
                                                , Ttr_WFFlexTime
                                                , Ttr_Amnesty
                                                , Ttr_SkipService
                                                , Ttr_SkipServiceBy
                                                , Ttr_SkipServiceDate
                                                , Ttr_AssumedFlag
                                                , Ttr_AssumedBy
                                                , Ttr_AssumedDate
                                                , Ttr_AssumedPost

                                                , Ttr_ConvIn_1Min
                                                , Ttr_ConvOut_1Min
                                                , Ttr_ConvIn_2Min
                                                , Ttr_ConvOut_2Min
                                                , Ttr_CompIn_1Min
                                                , Ttr_CompOut_1Min
                                                , Ttr_CompIn_2Min
                                                , Ttr_CompOut_2Min
                                                , Ttr_CompAdvOTMin
                                                , Ttr_ShiftIn_1Min
                                                , Ttr_ShiftOut_1Min
                                                , Ttr_ShiftIn_2Min
                                                , Ttr_ShiftOut_2Min
                                                , Ttr_ShiftMin
                                                , Ttr_ScheduleType
                                                , Ttr_ActLT1Min
                                                , Ttr_ActLT2Min
                                                , Ttr_CompLT1Min
                                                , Ttr_CompLT2Min
                                                , Ttr_ActUT1Min
                                                , Ttr_ActUT2Min
                                                , Ttr_CompUT1Min
                                                , Ttr_CompUT2Min

                                                , Ttr_InitialABSMin
                                                , Ttr_CompABSMin
                                                , Ttr_CompREGMin
                                                , Ttr_CompWorkMin
                                                , Ttr_CompNDMin
                                                , Ttr_CompNDOTMin
                                                , Ttr_PrvDayWorkMin
                                                , Ttr_PrvDayHolRef
                                                , Ttr_PDHOLHour
                                                , Ttr_PDRESTLEGHOLDay
                                                , Ttr_WorkDay
                                                , Ttr_EXPHour
                                                , Ttr_ABSHour
                                                , Ttr_REGHour
                                                , Ttr_OTHour
                                                , Ttr_NDHour
                                                , Ttr_NDOTHour
                                                , Ttr_LVHour
                                                , Ttr_PaidBreakHour
                                                , Ttr_OBHour
                                                , Ttr_RegPlusHour

                                                , Ttr_TBAmt01
                                                , Ttr_TBAmt02
                                                , Ttr_TBAmt03
                                                , Ttr_TBAmt04
                                                , Ttr_TBAmt05
                                                , Ttr_TBAmt06
                                                , Ttr_TBAmt07
                                                , Ttr_TBAmt08
                                                , Ttr_TBAmt09
                                                , Ttr_TBAmt10
                                                , Ttr_TBAmt11
                                                , Ttr_TBAmt12
                                            
                                                , Ttr_WorkLocationCode
                                                , Ttr_CalendarGroup
                                                , Ttr_PremiumGrpCode
                                                , Ttr_PayrollGroup
                                                , Ttr_CostcenterCode
                                                , Ttr_EmploymentStatusCode
                                                , Ttr_PayrollType
                                                , Ttr_Grade
                
                                                , Mem_LastName
                                                , Mem_FirstName
                                                , Mem_MiddleName
                                                , Mem_PositionCode
                                                , Mem_IsComputedPayroll
                                                , Mem_SeparationDate
                                                , COALESCE(Flex.Msh_Schedule, Normal.Msh_Schedule, '') as Msh_Schedule
                                                , COALESCE(Flex.Msh_ShiftIn1, Normal.Msh_ShiftIn1, '0000') as Msh_ShiftIn1
                                                , COALESCE(Flex.Msh_PadIn1, Normal.Msh_PadIn1, 0) as Msh_PadIn1 
                                                , COALESCE(Flex.Msh_ShiftOut1, Normal.Msh_ShiftOut1, '0000') as Msh_ShiftOut1
                                                , COALESCE(Flex.Msh_PadOut1, Normal.Msh_PadOut1, 0) as Msh_PadOut1
                                                , COALESCE(Flex.Msh_ShiftIn2, Normal.Msh_ShiftIn2, '0000') as Msh_ShiftIn2
                                                , COALESCE(Flex.Msh_PadIn2, Normal.Msh_PadIn2, 0) as Msh_PadIn2
                                                , COALESCE(Flex.Msh_ShiftOut2, Normal.Msh_ShiftOut2, '0000') as Msh_ShiftOut2
                                                , COALESCE(Flex.Msh_PadOut2, Normal.Msh_PadOut2, 0) as Msh_PadOut2
                                                , COALESCE(Flex.Msh_ShiftHours, Normal.Msh_ShiftHours, 0) as Msh_ShiftHours
                                                , COALESCE(Flex.Msh_8HourShiftCode, Normal.Msh_8HourShiftCode, '') as Msh_8HourShiftCode
                                                , COALESCE(Flex.Msh_PaidBreak, Normal.Msh_PaidBreak, 0) as Msh_PaidBreak
                                                , COALESCE(Flex.Msh_HourFractionCutoff, Normal.Msh_HourFractionCutoff, '') as Msh_HourFractionCutoff
                                                , COALESCE(Flex.Msh_RequiredLogsOnBreak, Normal.Msh_RequiredLogsOnBreak, 0) as Msh_RequiredLogsOnBreak
                                                , COALESCE(Flex.Msh_ReducedTimeOut2, Normal.Msh_ReducedTimeOut2, '0000') as Msh_ReducedTimeOut2
                                            FROM {2} 
                                            INNER JOIN M_Employee 
                                                on Mem_IDNo = Ttr_IDNo
                                            INNER JOIN (
                                                SELECT Mpd_SubCode 
                                                 FROM M_PolicyDtl 
                                                WHERE Mpd_PolicyCode = 'EMPSTATPAY'
                                                    AND Mpd_CompanyCode = '{4}'
                                                    AND Mpd_ParamValue = 1
                                                    AND Mpd_RecordStatus = 'A'
                                            ) EMPSTAT ON Mem_EmploymentStatusCode = Mpd_SubCode
                                            LEFT JOIN #ShiftCodeMaster Temp ON (((CASE WHEN Ttr_ActIn_1 = '0000' AND Ttr_ActOut_1 = '0000' THEN Ttr_ActIn_2 ELSE Ttr_ActIn_1 END) <= CurTimeIN 
												    AND ((CASE WHEN Ttr_ActIn_1 = '0000' AND Ttr_ActOut_1 = '0000' THEN Ttr_ActIn_2 ELSE Ttr_ActIn_1 END) > PrevTimeIN
													    OR PrevTimeIN IS NULL))
											    OR ((CASE WHEN Ttr_ActIn_1 = '0000' AND Ttr_ActOut_1 = '0000' THEN Ttr_ActIn_2 ELSE Ttr_ActIn_1 END) > CurTimeIN
												    AND NextTimeIN IS NULL))
	                                            AND ISNULL(PARSENAME(REPLACE(Ttr_ShiftCode, '-', '.'),2),Ttr_ShiftCode) = FlexCode
										    LEFT JOIN {5}..M_Shift Normal ON Normal.Msh_ShiftCode = Ttr_ShiftCode AND Normal.Msh_CompanyCode = '{4}'
										    LEFT JOIN {5}..M_Shift Flex ON Flex.Msh_ShiftCode = CASE WHEN (CASE WHEN Ttr_ActIn_1 = '0000' AND Ttr_ActOut_1 = '0000' THEN Ttr_ActIn_2 ELSE Ttr_ActIn_1 END) = '0000'
																	    THEN Ttr_ShiftCode
                                                                        WHEN Temp.NextShiftCode IS NULL AND (CASE WHEN Ttr_ActIn_1 = '0000' AND Ttr_ActOut_1 = '0000' THEN Ttr_ActIn_2 ELSE Ttr_ActIn_1 END) > CurTimeIN
																	    THEN Temp.DefaultShiftCode
																	    ELSE Temp.CurShiftCode
																	    END
                                                                        AND Flex.Msh_CompanyCode = '{4}'
                                            WHERE Ttr_PayCycle = '{0}' {1} {3}
                                            ORDER BY Ttr_IDNo, Ttr_Date"
                                                , ProcessPayrollPeriod
                                                , EmployeeCondition
                                                , EmpTimeRegisterTable
                                                , PayPeriodCondition
                                                , companyCode
                                                , centralProfile
                                                , dbCollation);
                #endregion
            }
            DataTable dtResult = dal.ExecuteDataSet(query).Tables[0];
            return dtResult;
        }

        public DataTable GetLogLedgerExtensionRecords(bool ProcessAll, string EmployeeId)
        {
            string EmployeeCondition = "";
            if (!ProcessAll && EmployeeId != "")
                EmployeeCondition = " AND Ttm_IDNo = '" + EmployeeId + "' ";
            else if (ProcessAll == true && EmployeeList != "")
                EmployeeCondition = " AND Ttm_IDNo IN (" + EmployeeList + ") ";
            #region query
            string query = string.Format(@"SELECT Ttm_IDNo
                                              ,Ttm_Date
                                              ,Ttm_PayCycle
                                              ,Ttm_ActIn_01
                                              ,Ttm_ActOut_01
                                              ,Ttm_ActIn_02
                                              ,Ttm_ActOut_02
                                              ,Ttm_ActIn_03
                                              ,Ttm_ActOut_03
                                              ,Ttm_ActIn_04
                                              ,Ttm_ActOut_04
                                              ,Ttm_ActIn_05
                                              ,Ttm_ActOut_05
                                              ,Ttm_ActIn_06
                                              ,Ttm_ActOut_06
                                              ,Ttm_ActIn_07
                                              ,Ttm_ActOut_07
                                              ,Ttm_ActIn_08
                                              ,Ttm_ActOut_08
                                              ,Ttm_ActIn_09
                                              ,Ttm_ActOut_09
                                              ,Ttm_ActIn_10
                                              ,Ttm_ActOut_10
                                              ,Ttm_ActIn_11
                                              ,Ttm_ActOut_11
                                              ,Ttm_ActIn_12
                                              ,Ttm_ActOut_12
                                              ,'' AS Ttm_Result
                                              ,A.Usr_Login
                                              ,A.Ludatetime
                                          FROM {2} A
                                            INNER JOIN M_Employee ON Mem_IDNo = Ttm_IDNo
                                            ---INNER JOIN (
                                             ---   SELECT Mpd_SubCode 
                                             ---   FROM M_PolicyDtl 
                                             ---   WHERE Mpd_PolicyCode = 'EMPSTATPAY'
                                             ---       AND Mpd_CompanyCode = '{3}'
                                             ---       AND Mpd_ParamValue = 1
                                            ---) EMPSTAT ON Mem_EmploymentStatusCode = Mpd_SubCode
                                          WHERE Ttm_PayCycle = '{0}' {1} 
                                          ORDER BY Ttm_IDNo, Ttm_Date"
                                            , ProcessPayrollPeriod
                                            , EmployeeCondition
                                            , EmpTimeRegisterMiscTable
                                            , companyCode);
            #endregion
            DataTable dtResult = dal.ExecuteDataSet(query).Tables[0];
            return dtResult;
        }

        public DataTable GetAllWorkAuthorizationRecords(bool ProcessAll, string EmployeeId, bool bIsFlex)
        {
            string EmployeeCondition = "";
            if (!ProcessAll && EmployeeId != "")
                EmployeeCondition = " AND Twa_IDNo = '" + EmployeeId + "' ";
            else if (ProcessAll == true && EmployeeList != "")
                EmployeeCondition = " AND Twa_IDNo IN (" + EmployeeList + ") ";

            #region query
            string query = string.Format(@"DECLARE @StartTime DATE = '{1}'
                                           DECLARE @EndTime DATE = '{2}'

                                        SELECT DISTINCT Availment.Twa_IDNo
                                            , CASE WHEN Availment.Twa_StartTime = '0000' THEN '2400' ELSE Availment.Twa_StartTime END AS Twa_StartTime
                                            , CASE WHEN Availment.Twa_EndTime = '0000' THEN '2400' ELSE Availment.Twa_EndTime END AS Twa_EndTime
                                            , Availment.Twa_PayCycle
	                                        , Availment.Twa_WorkDate
	                                        , Availment.Twa_WorkHours
                                        FROM (  SELECT Twa_IDNo, Twa_WorkDate, Twa_StartTime, Twa_EndTime, Twa_PayCycle, Twa_WorkHours, Twa_DocumentNo FROM T_EmpWorkAuthorization
		                                        WHERE Twa_WorkDate >= @StartTime AND Twa_WorkDate <= @EndTime
		                                            AND Twa_WorkAuthStatus ='14' {0} 
		                                        UNION ALL
		                                        SELECT Twa_IDNo, Twa_WorkDate, Twa_StartTime, Twa_EndTime, Twa_PayCycle, Twa_WorkHours, Twa_DocumentNo FROM T_EmpWorkAuthorizationHst
		                                        WHERE Twa_WorkDate >= @StartTime AND Twa_WorkDate <= @EndTime
		                                            AND Twa_WorkAuthStatus ='14' {0} ) Availment
		                                LEFT JOIN (SELECT Twa_IDNo, Twa_WorkDate, Twa_StartTime, Twa_EndTime, Twa_PayCycle, Twa_WorkHours, Twa_DocumentNo, Twa_OriginalDocumentNo FROM T_EmpWorkAuthorization
					                            WHERE Twa_WorkDate >= @StartTime AND Twa_WorkDate <= @EndTime
					                                AND Twa_WorkAuthStatus ='15' {0} 
					                            UNION ALL
					                            SELECT Twa_IDNo, Twa_WorkDate, Twa_StartTime, Twa_EndTime, Twa_PayCycle, Twa_WorkHours, Twa_DocumentNo, Twa_OriginalDocumentNo FROM T_EmpWorkAuthorizationHst
					                            WHERE Twa_WorkDate >= @StartTime AND Twa_WorkDate <= @EndTime
					                                AND Twa_WorkAuthStatus ='15' {0} 
                                            ) Cancellation on Cancellation.Twa_OriginalDocumentNo = Availment.Twa_DocumentNo
		                                 WHERE Cancellation.Twa_DocumentNo IS NULL 
                                        ", EmployeeCondition
                                        , PayrollStart
                                        , PayrollEnd);

            #endregion
            DataTable dtResult = dal.ExecuteDataSet(query).Tables[0];
            return dtResult;
        }

        public DataRow[] GetCorrectedWorkAuthorizationRecords(string EmployeeId, string ProcessDate, bool bIsRegularDay, bool bIsGraveyard, int iShiftTimeIn1Min, int iShiftTimeOut1Min, int iShiftTimeIn2Min, int iShiftTimeOut2Min, bool bIsFlex)
        {
            DataRow[] drArrWorkAuthApps = dtWorkAuthTable.Select("Twa_IDNo = '" + EmployeeId + "' AND Twa_WorkDate = '" + ProcessDate + "'"
                                                                            , "Twa_StartTime ASC, Twa_EndTime ASC");
            int iStartWorkAuth1, iEndWorkAuth1;
            int iStartWorkAuth2, iEndWorkAuth2;
            int iStartWorkAuthMin, iEndWorkAuthMax;

            if (bIsFlex == false)
            {
                #region Non-Flex
                if (drArrWorkAuthApps.Length > 1)
                {
                    for (int i = 0; i < drArrWorkAuthApps.Length; i++)
                    {
                        iStartWorkAuth1 = GetMinsFromHourStr(drArrWorkAuthApps[i]["Twa_StartTime"].ToString());
                        iEndWorkAuth1 = GetMinsFromHourStr(drArrWorkAuthApps[i]["Twa_EndTime"].ToString());
                        //iEndOT1Orig = iEndWorkAuth1;

                        if (iStartWorkAuth1 != 0 && iEndWorkAuth1 != 0 && bIsGraveyard) //Graveyard shift
                        {
                            if (iStartWorkAuth1 < (iShiftTimeIn1Min - LOGPAD))
                            {
                                iStartWorkAuth1 += GRAVEYARD24;
                            }
                            if (iEndWorkAuth1 < (iShiftTimeOut2Min - LOGPAD))
                            {
                                iEndWorkAuth1 += GRAVEYARD24;
                            }
                        }

                        for (int j = 0; j < drArrWorkAuthApps.Length; j++)
                        {
                            if (i != j)
                            {
                                iStartWorkAuth2 = GetMinsFromHourStr(drArrWorkAuthApps[j]["Twa_StartTime"].ToString());
                                iEndWorkAuth2 = GetMinsFromHourStr(drArrWorkAuthApps[j]["Twa_EndTime"].ToString());

                                if (iStartWorkAuth2 != 0 && iEndWorkAuth2 != 0 && iStartWorkAuth1 != 0 && iEndWorkAuth1 != 0
                                    && bIsGraveyard) //Graveyard shift
                                {
                                    if (iStartWorkAuth2 < (iShiftTimeIn1Min - LOGPAD))
                                    {
                                        iStartWorkAuth2 += GRAVEYARD24;
                                    }
                                    if (iEndWorkAuth2 < (iShiftTimeOut2Min - LOGPAD))
                                    {
                                        iEndWorkAuth2 += GRAVEYARD24;
                                    }
                                }

                                if (iStartWorkAuth1 != 0 && iStartWorkAuth2 != 0)
                                    iStartWorkAuthMin = Math.Min(iStartWorkAuth1, iStartWorkAuth2);
                                else
                                    iStartWorkAuthMin = iStartWorkAuth1;
                                if (iEndWorkAuth1 != 0 && iEndWorkAuth2 != 0)
                                    iEndWorkAuthMax = Math.Max(iEndWorkAuth1, iEndWorkAuth2);
                                else
                                    iEndWorkAuthMax = iEndWorkAuth1;

                                //remove duplicate
                                if (i < drArrWorkAuthApps.Length
                                        && Convert.ToDouble(drArrWorkAuthApps[i]["Twa_WorkHours"]) != 0 && Convert.ToDouble(drArrWorkAuthApps[j]["Twa_WorkHours"]) != 0
                                        && drArrWorkAuthApps[i]["Twa_StartTime"].ToString().Equals(drArrWorkAuthApps[j]["Twa_StartTime"].ToString())
                                        && drArrWorkAuthApps[i]["Twa_EndTime"].ToString().Equals(drArrWorkAuthApps[j]["Twa_EndTime"].ToString())
                                        && Convert.ToDouble(drArrWorkAuthApps[i]["Twa_WorkHours"]) == Convert.ToDouble(drArrWorkAuthApps[j]["Twa_WorkHours"]))
                                {
                                    drArrWorkAuthApps[j]["Twa_StartTime"]   = "0000";
                                    drArrWorkAuthApps[j]["Twa_EndTime"]     = "0000";
                                    drArrWorkAuthApps[j]["Twa_WorkHours"]   = 0;
                                    break;
                                }

                                //update overlapping records
                                if (iEndWorkAuth1 >= iStartWorkAuth2 && iEndWorkAuth2 >= iStartWorkAuth1) //overlap
                                {
                                    drArrWorkAuthApps[i]["Twa_StartTime"]   = GetHourStrFromMins(iStartWorkAuthMin);
                                    drArrWorkAuthApps[i]["Twa_EndTime"]     = GetHourStrFromMins(iEndWorkAuthMax);
                                    drArrWorkAuthApps[j]["Twa_StartTime"]   = "0000";
                                    drArrWorkAuthApps[j]["Twa_EndTime"]     = "0000";
                                    iStartWorkAuth1 = iStartWorkAuthMin;
                                    iEndWorkAuth1 = iEndWorkAuthMax;
                                }
                            }
                        }
                    }
                }
                #endregion
            }
            else
            {
                #region Flex
                #endregion
            }

            return drArrWorkAuthApps;
        }
        public DataTable GetAllOvertimeRecords(bool ProcessAll, string EmployeeId, bool bIsFlex)
        {
            string EmployeeCondition = "";
            if (!ProcessAll && EmployeeId != "")
                EmployeeCondition = " AND Tot_IDNo = '" + EmployeeId + "' ";
            else if (ProcessAll == true && EmployeeList != "")
                EmployeeCondition = " AND Tot_IDNo IN (" + EmployeeList + ") ";

            #region query
            string query = string.Format(@"DECLARE @StartTime DATE = '{1}'
                                           DECLARE @EndTime DATE = '{2}'

                                        SELECT DISTINCT Availment.Tot_IDNo
                                            , CASE WHEN Availment.Tot_StartTime = '0000' THEN '2400' ELSE Availment.Tot_StartTime END AS Tot_StartTime
                                            , CASE WHEN Availment.Tot_EndTime = '0000' THEN '2400' ELSE Availment.Tot_EndTime END AS Tot_EndTime
                                            , Availment.Tot_PayCycle
	                                        , Availment.Tot_OvertimeDate
	                                        , Availment.Tot_OvertimeType
	                                        , Availment.Tot_OvertimeHours
                                        FROM (  SELECT Tot_IDNo, Tot_OvertimeDate, Tot_StartTime, Tot_EndTime, Tot_PayCycle, Tot_OvertimeType,  Tot_OvertimeHours, Tot_DocumentNo FROM T_EmpOvertime
		                                        WHERE Tot_OvertimeDate >= @StartTime AND Tot_OvertimeDate <= @EndTime
		                                        AND Tot_OvertimeStatus ='14' {0} 
		                                        UNION ALL
		                                        SELECT Tot_IDNo, Tot_OvertimeDate, Tot_StartTime, Tot_EndTime, Tot_PayCycle, Tot_OvertimeType,  Tot_OvertimeHours, Tot_DocumentNo FROM T_EmpOvertimeHst
		                                        WHERE Tot_OvertimeDate >= @StartTime AND Tot_OvertimeDate <= @EndTime
		                                        AND Tot_OvertimeStatus ='14' {0} ) Availment

		                                        LEFT JOIN (SELECT Tot_IDNo, Tot_OvertimeDate, Tot_StartTime, Tot_EndTime, Tot_PayCycle, Tot_OvertimeType,  Tot_OvertimeHours,Tot_DocumentNo, Tot_OriginalDocumentNo  FROM T_EmpOvertime
					                                        WHERE Tot_OvertimeDate >= @StartTime AND Tot_OvertimeDate <= @EndTime
					                                        AND Tot_OvertimeStatus ='15' {0} 
					                                        UNION ALL
					                                        SELECT Tot_IDNo, Tot_OvertimeDate, Tot_StartTime, Tot_EndTime, Tot_PayCycle, Tot_OvertimeType,  Tot_OvertimeHours,Tot_DocumentNo, Tot_OriginalDocumentNo  FROM T_EmpOvertimeHst
					                                        WHERE Tot_OvertimeDate >= @StartTime AND Tot_OvertimeDate <= @EndTime
					                                        AND Tot_OvertimeStatus ='15' {0} 
                                            ) Cancellation on Cancellation.Tot_OriginalDocumentNo = Availment.Tot_DocumentNo
		                                 WHERE Cancellation.Tot_DocumentNo IS NULL 
                                        ", EmployeeCondition
                                        , PayrollStart
                                        , PayrollEnd);

            //if (bIsFlex == false)
            //{
            //      query
            //}
            //else //Allow same records if FLEXSHIFT is set to TRUE
            //{
            //    query = string.Format(@"DECLARE @CurPeriod AS CHAR(7)
            //                           SET @CurPeriod = (SELECT Tps_PayCycle FROM T_PaySchedule WHERE Tps_CycleIndicator = 'C')

            //                           SELECT Tot_IDNo, Tot_StartTime, Tot_EndTime, Tot_PayCycle, Tot_OvertimeDate, Tot_OvertimeType, Tot_OvertimeHours
            //                           FROM T_EmpOvertime 
            //                           WHERE Tot_OvertimeDate >= '{1}' AND Tot_OvertimeDate <= '{2}' --Tot_PayCycle <= @CurPeriod
            //                                 AND Tot_OvertimeStatus IN ('A','9','14') {0}
            //                           UNION ALL
            //                           SELECT Tot_IDNo, Tot_StartTime, Tot_EndTime, Tot_PayCycle, Tot_OvertimeDate, Tot_OvertimeType, Tot_OvertimeHours
            //                           FROM T_EmpOvertimeHst
            //                           WHERE Tot_OvertimeStatus IN ('A','9','14') {0}
            //                                 AND Tot_OvertimeDate >= '{1}' AND Tot_OvertimeDate <= '{2}'
            //                           ORDER BY Tot_IDNo, Tot_OvertimeDate, Tot_StartTime, Tot_EndTime", EmployeeCondition, PayrollStart, PayrollEnd);
            //}
            #endregion
            DataTable dtResult = dal.ExecuteDataSet(query).Tables[0];
            return dtResult;
        }

        public DataRow[] GetCorrectedOvertimeRecords(string EmployeeId, string ProcessDate, bool bIsRegularDay, bool bIsGraveyard, int iShiftTimeIn1Min, int iShiftTimeOut1Min, int iShiftTimeIn2Min, int iShiftTimeOut2Min, int iActualTimeIn1Min, bool bIsFlex, string strPayrollType)
        {
            DataRow[] drArrOvertimeApps = dtOvertimeTable.Select("Tot_IDNo = '" + EmployeeId + "' AND Tot_OvertimeDate = '" + ProcessDate + "'"
                                                                            , "Tot_StartTime ASC, Tot_EndTime ASC");
            int iStartOT1, iEndOT1, iEndOT1Orig;
            int iStartOT2, iEndOT2;
            int iStartOTMin, iEndOTMax;

            if (bIsFlex == false)
            {
                #region Non-Flex
                if (drArrOvertimeApps.Length > 1)
                {
                    for (int i = 0; i < drArrOvertimeApps.Length; i++)
                    {
                        iStartOT1 = GetMinsFromHourStr(drArrOvertimeApps[i]["Tot_StartTime"].ToString());
                        iEndOT1 = GetMinsFromHourStr(drArrOvertimeApps[i]["Tot_EndTime"].ToString());
                        iEndOT1Orig = iEndOT1;

                        if (iStartOT1 != 0 && iEndOT1 != 0 && bIsGraveyard && drArrOvertimeApps[i]["Tot_OvertimeType"].ToString().Equals("P")) //Graveyard shift and Post-overtime
                        {
                            if (iStartOT1 < (iShiftTimeIn1Min - LOGPAD))
                            {
                                iStartOT1 += GRAVEYARD24;
                            }
                            if (iEndOT1 < (iShiftTimeOut2Min - LOGPAD))
                            {
                                iEndOT1 += GRAVEYARD24;
                            }
                        }

                        for (int j = 0; j < drArrOvertimeApps.Length; j++)
                        {
                            if (i != j)
                            {
                                iStartOT2 = GetMinsFromHourStr(drArrOvertimeApps[j]["Tot_StartTime"].ToString());
                                iEndOT2 = GetMinsFromHourStr(drArrOvertimeApps[j]["Tot_EndTime"].ToString());

                                if (iStartOT2 != 0 && iEndOT2 != 0 && iStartOT1 != 0 && iEndOT1 != 0
                                    && bIsGraveyard && drArrOvertimeApps[j]["Tot_OvertimeType"].ToString().Equals("P")) //Graveyard shift and Post-overtime
                                {
                                    if (iStartOT2 < (iShiftTimeIn1Min - LOGPAD))
                                    {
                                        iStartOT2 += GRAVEYARD24;
                                    }
                                    if (iEndOT2 < (iShiftTimeOut2Min - LOGPAD))
                                    {
                                        iEndOT2 += GRAVEYARD24;
                                    }
                                }

                                if (iStartOT1 != 0 && iStartOT2 != 0)
                                    iStartOTMin = Math.Min(iStartOT1, iStartOT2);
                                else
                                    iStartOTMin = iStartOT1;
                                if (iEndOT1 != 0 && iEndOT2 != 0)
                                    iEndOTMax = Math.Max(iEndOT1, iEndOT2);
                                else
                                    iEndOTMax = iEndOT1;

                                //update overlapping records
                                if ((iEndOT1 >= iStartOT2 && iEndOT2 >= iStartOT1)
                                    && drArrOvertimeApps[i]["Tot_OvertimeType"].ToString().Equals(drArrOvertimeApps[j]["Tot_OvertimeType"].ToString())) //overlap
                                {
                                    drArrOvertimeApps[i]["Tot_StartTime"]   = GetHourStrFromMins(iStartOTMin);
                                    drArrOvertimeApps[i]["Tot_EndTime"]     = GetHourStrFromMins(iEndOTMax);
                                    drArrOvertimeApps[j]["Tot_StartTime"]   = "0000";
                                    drArrOvertimeApps[j]["Tot_EndTime"]     = "0000";
                                    iStartOT1 = iStartOTMin;
                                    iEndOT1 = iEndOTMax;
                                }
                            }
                        }
                    }
                }
                #endregion
            }
            else
            {
                #region Flex
                //If No Logs, get OB Application
                if (iActualTimeIn1Min == 0)
                {
                    DataRow[] drArrLeaveApp = dtLeaveTable.Select("EmployeeId = '" + EmployeeId + "' AND LeaveDate = '" + ProcessDate + "' AND WithCredit = 0 AND CombinedLeave = 0 AND PaidLeave = 1"
                                                                , "LeaveType ASC, LeaveHours ASC, StartTime ASC, EndTime ASC");
                    if (drArrLeaveApp.Length > 0)
                    {
                        iActualTimeIn1Min = GetMinsFromHourStr(drArrLeaveApp[0]["StartTime"].ToString());
                        //Compare OB Start vs OT Start (if Restday or Holiday)
                        if (drArrOvertimeApps.Length > 0 && bIsRegularDay == false)
                        {
                            iStartOT1 = GetMinsFromHourStr(drArrOvertimeApps[0]["Tot_StartTime"].ToString());
                            if (iStartOT1 > iActualTimeIn1Min)
                                iActualTimeIn1Min = iStartOT1;
                        }
                    }
                }

                double dAdvOT = 0, dMidOT = 0, dPostOT = 0;
                for (int j = 0; j < drArrOvertimeApps.Length; j++)
                {
                    if (drArrOvertimeApps[j]["Tot_OvertimeType"].ToString().Equals("A"))
                        dAdvOT += Convert.ToDouble(drArrOvertimeApps[j]["Tot_OvertimeHours"]);
                    else if (drArrOvertimeApps[j]["Tot_OvertimeType"].ToString().Equals("M"))
                        dMidOT += Convert.ToDouble(drArrOvertimeApps[j]["Tot_OvertimeHours"]);
                    else if (drArrOvertimeApps[j]["Tot_OvertimeType"].ToString().Equals("P"))
                        dPostOT += Convert.ToDouble(drArrOvertimeApps[j]["Tot_OvertimeHours"]);
                }

                bool bAdvOTDone = false, bMidOTDone = false, bPostOTDone = false;
                for (int j = 0; j < drArrOvertimeApps.Length; j++)
                {
                    if (drArrOvertimeApps[j]["Tot_OvertimeType"].ToString().Equals("A"))
                    {
                        if (bAdvOTDone == false)
                        {
                            bAdvOTDone = true;
                            if (iShiftTimeIn1Min - (int)(dAdvOT * 60) > 0)
                                drArrOvertimeApps[j]["Tot_StartTime"] = GetHourStrFromMins(iShiftTimeIn1Min - (int)(dAdvOT * 60));
                            else
                                drArrOvertimeApps[j]["Tot_StartTime"] = GetHourStrFromMins(ConvertToGraveyardTime(iShiftTimeIn1Min - (int)(dAdvOT * 60), true)); //graveyard
                            drArrOvertimeApps[j]["Tot_EndTime"] = GetHourStrFromMins(iShiftTimeIn1Min);
                            drArrOvertimeApps[j]["Tot_OvertimeHours"] = dAdvOT;
                        }
                        else
                        {
                            drArrOvertimeApps[j]["Tot_StartTime"] = "0000";
                            drArrOvertimeApps[j]["Tot_EndTime"] = "0000";
                            drArrOvertimeApps[j]["Tot_OvertimeHours"] = 0;
                        }
                    }
                    else if (drArrOvertimeApps[j]["Tot_OvertimeType"].ToString().Equals("M"))
                    {
                        if (bMidOTDone == false)
                        {
                            bMidOTDone = true;
                            drArrOvertimeApps[j]["Tot_StartTime"] = GetHourStrFromMins(iShiftTimeOut1Min);
                            drArrOvertimeApps[j]["Tot_EndTime"] = GetHourStrFromMins(iShiftTimeOut1Min + (int)(dMidOT * 60));
                        }
                        else
                        {
                            drArrOvertimeApps[j]["Tot_StartTime"] = "0000";
                            drArrOvertimeApps[j]["Tot_EndTime"] = "0000";
                            drArrOvertimeApps[j]["Tot_OvertimeHours"] = 0;
                        }
                    }
                    else if (drArrOvertimeApps[j]["Tot_OvertimeType"].ToString().Equals("P"))
                    {
                        if (bPostOTDone == false)
                        {
                            bPostOTDone = true;
                            if (bIsRegularDay == true)
                            {
                                drArrOvertimeApps[j]["Tot_StartTime"] = GetHourStrFromMins(iShiftTimeOut2Min);
                                drArrOvertimeApps[j]["Tot_EndTime"] = GetHourStrFromMins(iShiftTimeOut2Min + (int)(dPostOT * 60));
                            }
                            else //Restday or Holiday
                            {
                                if (strPayrollType == "M") //Hardcoded for LEAR (Monthlies = Start is IN1; Dailies = Start is Shift IN)
                                {
                                    drArrOvertimeApps[j]["Tot_StartTime"] = GetHourStrFromMins(iActualTimeIn1Min);
                                    drArrOvertimeApps[j]["Tot_EndTime"] = GetHourStrFromMins(iActualTimeIn1Min + (int)(dPostOT * 60));
                                }
                                else
                                {
                                    drArrOvertimeApps[j]["Tot_StartTime"] = GetHourStrFromMins(iShiftTimeIn1Min);
                                    drArrOvertimeApps[j]["Tot_EndTime"] = GetHourStrFromMins(iShiftTimeIn1Min + (int)(dPostOT * 60));
                                }
                            }
                            drArrOvertimeApps[j]["Tot_OvertimeHours"] = dPostOT;
                        }
                        else
                        {
                            drArrOvertimeApps[j]["Tot_StartTime"] = "0000";
                            drArrOvertimeApps[j]["Tot_EndTime"] = "0000";
                            drArrOvertimeApps[j]["Tot_OvertimeHours"] = 0;
                        }
                    }
                }
                #endregion
            }

            return drArrOvertimeApps;
        }

        public int GenerateLaborHours_GetConvertedTimeIn1(int iActualTimeIn1Min, int iMasterShiftTimeIn1Min, string strPadShiftTimeIn, int iAbsFraction, bool bIsGraveyard)
        {
            if (iActualTimeIn1Min > 0 && iActualTimeIn1Min < iMasterShiftTimeIn1Min - LOGPAD)
            {
                iActualTimeIn1Min = ConvertToGraveyardTime(iActualTimeIn1Min, bIsGraveyard);
            }
            iActualTimeIn1Min = GetMinsFromHourStr(
                                        GetTimeINBasedOnShift(
                                            GetHourStrFromMins(iActualTimeIn1Min)
                                            , GetHourStrFromMins(iMasterShiftTimeIn1Min)
                                            , Convert.ToInt32(strPadShiftTimeIn)
                                            , iAbsFraction
                                        )
                                    );
            return iActualTimeIn1Min;
        }

        public int GenerateLaborHours_GetConvertedTimeOut1(int iConvTimeIn1Min, int iActualTimeOut1Min, int iMasterShiftTimeOut1Min, string strPadShiftBreakStart, int iAbsFraction, bool bIsGraveyard)
        {
            if (iActualTimeOut1Min > 0 && iActualTimeOut1Min < iConvTimeIn1Min)
            {
                iActualTimeOut1Min = ConvertToGraveyardTime(iActualTimeOut1Min, bIsGraveyard);
            }
            iActualTimeOut1Min = GetMinsFromHourStr(
                                        GetTimeOUTBasedOnShift(
                                            GetHourStrFromMins(iActualTimeOut1Min)
                                            , GetHourStrFromMins(iMasterShiftTimeOut1Min)
                                            , Convert.ToInt32(strPadShiftBreakStart)
                                            , iAbsFraction
                                        )
                                    );
            return iActualTimeOut1Min;
        }

        public int GenerateLaborHours_GetConvertedTimeIn2(int iConvTimeIn1Min, int iActualTimeIn2Min, int iMasterShiftTimeIn2Min, string strPadShiftBreakEnd, int iAbsFraction, bool bIsGraveyard)
        {
            if ((iActualTimeIn2Min > 0 && iActualTimeIn2Min < iConvTimeIn1Min)
                || (iConvTimeIn1Min == 0 && iActualTimeIn2Min > 0 && iActualTimeIn2Min < iMasterShiftTimeIn2Min - LOGPAD))
            {
                iActualTimeIn2Min = ConvertToGraveyardTime(iActualTimeIn2Min, bIsGraveyard);
            }
            iActualTimeIn2Min = GetMinsFromHourStr(
                                        GetTimeINBasedOnShift(
                                            GetHourStrFromMins(iActualTimeIn2Min)
                                            , GetHourStrFromMins(iMasterShiftTimeIn2Min)
                                            , Convert.ToInt32(strPadShiftBreakEnd)
                                            , iAbsFraction
                                        )
                                    );
            return iActualTimeIn2Min;
        }

        public int GenerateLaborHours_GetConvertedTimeOut2(int iConvTimeIn1Min, int iConvTimeIn2Min, int iActualTimeOut2Min, int iMasterShiftTimeOut2Min, string strPadShiftTimeOut, int iAbsFraction, bool bIsGraveyard)
        {
            if ((iActualTimeOut2Min > 0 && iActualTimeOut2Min < iConvTimeIn1Min)
                || (iConvTimeIn1Min == 0 && iActualTimeOut2Min > 0 && iActualTimeOut2Min < iConvTimeIn2Min))
            {
                iActualTimeOut2Min = ConvertToGraveyardTime(iActualTimeOut2Min, bIsGraveyard);
            }
            iActualTimeOut2Min = GetMinsFromHourStr(
                                        GetTimeOUTBasedOnShift(
                                            GetHourStrFromMins(iActualTimeOut2Min)
                                            , GetHourStrFromMins(iMasterShiftTimeOut2Min)
                                            , Convert.ToInt32(strPadShiftTimeOut)
                                            , iAbsFraction
                                        )
                                    );
            return iActualTimeOut2Min;
        }

        public string GetTimeINBasedOnShift(string strActualIN, string strShiftIN, int iPadIN, int iPadValue)
        {
            if (Convert.ToInt32(AddMinutesToHourStr(strShiftIN, iPadIN)) >= Convert.ToInt32(strActualIN))
            {
                return strActualIN;
            }
            else
            {
                if (strActualIN.Equals("0000"))
                {
                    return strActualIN;
                }
                else
                {
                    int iActualIN = GetMinsFromHourStr(strActualIN);
                    int iShiftIN = GetMinsFromHourStr(strShiftIN);
                    do
                    {
                        iShiftIN += iPadValue;
                    } while (iActualIN > iShiftIN);
                    strShiftIN = GetHourStrFromMins(iShiftIN);
                    return strShiftIN;
                }
            }
        }

        public string GetTimeOUTBasedOnShift(string strActualOUT, string strShiftOUT, int iPadOUT, int iPadValue)
        {
            if (Convert.ToInt32(AddMinutesToHourStr(strShiftOUT, iPadOUT)) <= Convert.ToInt32(strActualOUT))
            {
                return strActualOUT;
            }
            else
            {
                if (strActualOUT.Equals("0000"))
                {
                    return strActualOUT;
                }
                else
                {
                    int iActualOUT = GetMinsFromHourStr(strActualOUT);
                    int iShiftOUT = GetMinsFromHourStr(strShiftOUT);
                    iPadValue *= -1;
                    do
                    {
                        iShiftOUT += iPadValue;
                    } while (iActualOUT < iShiftOUT);
                    strShiftOUT = GetHourStrFromMins(iShiftOUT);
                    return strShiftOUT;
                }
            }
        }

        public int GetBreakStartBasedOnShiftMin(int iEndTime, int iStartTimeNxt, int iShiftTimeOut1Min, int iShiftTimeIn2Min)
        {
            int iTemp = iEndTime;
            if (iEndTime < iShiftTimeOut1Min)
                iTemp = Math.Min(iEndTime, iShiftTimeOut1Min);
            else if (iEndTime >= iShiftTimeOut1Min && iEndTime < iShiftTimeIn2Min && iStartTimeNxt > iShiftTimeOut1Min)
                iTemp = Math.Max(iEndTime, iShiftTimeIn2Min);
            return iTemp;
        }

        public int GetBreakEndBasedOnShiftMin(int iStartTime, int iShiftTimeOut1Min, int iShiftTimeIn2Min)
        {
            int iTemp = iStartTime;
            if (iStartTime > iShiftTimeIn2Min)
                iTemp = Math.Max(iStartTime, iShiftTimeIn2Min);
            else if (iStartTime >= iShiftTimeOut1Min && iStartTime <= iShiftTimeIn2Min)
                iTemp = Math.Max(iStartTime, iShiftTimeIn2Min);
            return iTemp;
        }

        public DataTable GetNewHireInCurrentPayPeriod(bool ProcessAll, string EmployeeId)
        {
            string EmployeeCondition = "";
            if (!ProcessAll && EmployeeId != "")
                EmployeeCondition = " AND Ttr_IDNo = '" + EmployeeId + "' ";
            else if (ProcessAll == true && EmployeeList != "")
                EmployeeCondition = " AND Ttr_IDNo IN (" + EmployeeList + ") ";

            #region query
            string qString = string.Format(@"SELECT Ttr_IDNo, Ttr_Date, Mem_IntakeDate
                                            FROM {0} 
                                            INNER JOIN M_Employee ON Mem_IDNo = Ttr_IDNo
	                                        JOIN T_PaySchedule ON Tps_PayCycle = Ttr_PayCycle 
                                                AND Ttr_PayCycle = '{1}'
                                            WHERE Mem_IntakeDate between Tps_StartCycle and Tps_EndCycle
                                                AND Ttr_Date < Mem_IntakeDate
                                                {2}", EmpTimeRegisterTable, ProcessPayrollPeriod, EmployeeCondition);
            #endregion
            DataTable dtResult = dal.ExecuteDataSet(qString).Tables[0];
            return dtResult;
        }

        public DataTable GetLeaveTypes()
        {
            #region query
            string qString = string.Format(@"SELECT Mlv_LeaveCode, Mlv_LeaveDescription
                                            FROM {1}..M_Leave
                                            WHERE Mlv_RecordStatus = 'A'
                                                AND Mlv_CompanyCode = '{0}'", companyCode, centralProfile);
            #endregion
            DataTable dtResult = dal.ExecuteDataSet(qString).Tables[0];
            return dtResult;
        }

        public DataTable GetAllHolidaysForCurrentPeriod()
        {
            string query = string.Format(@"IF OBJECT_ID('tempdb..#T_HOLIDAY') IS NOT NULL
                                           DROP TABLE #T_HOLIDAY

                                        CREATE TABLE #T_HOLIDAY 
                                            ([Thl_CompanyCode] [varchar](10) COLLATE {4} NOT NULL,
	                                        [Thl_HolidayDate] [datetime] NOT NULL,
	                                        [Thl_HolidayCode] [varchar](4) COLLATE {4} NOT NULL,
	                                        [Thl_HolidayName] [varchar](50) COLLATE {4} NOT NULL,
	                                        [Thl_PrevDayHourRequired] [decimal](6, 2) NOT NULL,
	                                        [Thl_LocationCode] [varchar](100) COLLATE {4} NOT NULL,
	                                        [Thl_PayrollGroup] [varchar](100) COLLATE {4} NOT NULL,
	                                        [Thl_PayrollType] [varchar](100) COLLATE {4} NOT NULL,
	                                        [Thl_EmploymentStatus] [varchar](100) COLLATE {4} NOT NULL,
	                                        [Thl_CalendarGroup] [varchar](200) COLLATE {4} NOT NULL,
	                                        [Thl_Grade] [varchar](200) COLLATE {4} NOT NULL,
	                                        [Thl_IsPaidRestLegalHoliday] [bit] NULL,
	                                        [Thl_PaidRestLegalHolidayPayrollType] [varchar](100) COLLATE {4} NULL,
	                                        [Thl_ProcessFlag] [char](1) COLLATE {4} NULL,
	                                        [Thl_ProcessInfo] [varchar](45) COLLATE {4} NULL,
	                                        [Thl_CascadeTimeRegister] [bit] NULL,
	                                        [Thl_ProfileNotCascaded] [varchar](50) COLLATE {4} NULL,
	                                        [Thl_RecordStatus] [char](1) COLLATE {4} NOT NULL)

                                            INSERT INTO #T_HOLIDAY
                                            SELECT Thl_CompanyCode
                                            ,Thl_HolidayDate
                                            ,Thl_HolidayCode
                                            ,Thl_HolidayName
                                            ,Thl_PrevDayHourRequired
                                            ,Data
                                            ,Thl_PayrollGroup
                                            ,Thl_PayrollType
                                            ,Thl_EmploymentStatus
                                            ,Thl_CalendarGroup
                                            ,Thl_Grade
                                            ,Thl_IsPaidRestLegalHoliday
                                            ,Thl_PaidRestLegalHolidayPayrollType
                                            ,Thl_ProcessFlag
                                            ,Thl_ProcessInfo
                                            ,Thl_CascadeTimeRegister
                                            ,Thl_ProfileNotCascaded
                                            ,Thl_RecordStatus
                                            FROM {3}..T_Holiday
                                            CROSS APPLY {3}.dbo.Udf_Split(Thl_LocationCode,',') CS

                                            SELECT * 
                                            FROM #T_HOLIDAY
                                            INNER JOIN {3}..M_Day ON Thl_HolidayCode = Mdy_DayCode
                                            AND Thl_CompanyCode = Mdy_CompanyCode
                                            WHERE Thl_PrevDayHourRequired >= 0
                                                 AND Thl_HolidayDate >= '{0}'
                                                 AND Thl_HolidayDate <= '{1}'
                                                 AND Mdy_HolidayFlag = 1
                                                 AND Mdy_RecordStatus = 'A'
												 AND Thl_RecordStatus = 'A'
												 AND Thl_CompanyCode = '{2}'", PayrollStart, PayrollEnd, companyCode, centralProfile, dbCollation);
            DataTable dtResult = dal.ExecuteDataSet(query).Tables[0];
            return dtResult;
        }

        public DataTable GetDayCodeMasterData()
        {
            string strQueryDayCode = string.Format(@"SELECT Mdy_DayCode
                                        , Mdy_DayName
                                        , Mdy_RestdayFlag
                                        , Mdy_HolidayFlag 
                                        FROM {1}..M_Day 
                                            WHERE Mdy_RecordStatus = 'A'
                                            AND Mdy_CompanyCode = '{0}'", companyCode, centralProfile);

            DataTable dtResult;
            dtResult = dal.ExecuteDataSet(strQueryDayCode).Tables[0];
            return dtResult;
        }

        public DataSet GetPrevPayPeriodOTSumAndJobStatus(string EmployeeId, string PayPeriod, DALHelper dal)
        {
            #region query
            string query = @"SELECT Ttr_IDNo as Tph_IDNo
                                    , Tph_REGOTHrTemp = SUM(CASE WHEN   Ttr_DayCode = 'REG' and   Ttr_RestDayFlag = 0 THEN
                                                                    Ttr_OTHour  
                                                           ELSE
                                                                  0 
                                                          END)
                                    , Tph_RESTHr = SUM(CASE WHEN   Ttr_DayCode = 'REST' and   Ttr_RestDayFlag = 1 THEN
                                                                    Ttr_REGHour  
                                                          ELSE
                                                                  0 
                                                          END)
                                    , Tph_RESTOTHr = SUM(CASE WHEN   Ttr_DayCode = 'REST' and   Ttr_RestDayFlag = 1 THEN
                                                                    Ttr_OTHour  
                                                          ELSE
                                                                  0 
                                                          END)
                                    , Tph_LEGHOLHr = SUM(CASE WHEN   Ttr_DayCode = 'HOL' and   Ttr_RestDayFlag = 0 THEN
                                                                         Ttr_REGHour  
                                                               ELSE
                                                                       0 
                                                               END)
                                    , Tph_LEGHOLOTHr = SUM(CASE WHEN   Ttr_DayCode = 'HOL' and   Ttr_RestDayFlag = 0 THEN
                                                                         Ttr_OTHour  
                                                               ELSE
                                                                       0 
                                                               END)
                                    , Tph_SPLHOLHr = SUM(CASE WHEN   Ttr_DayCode = 'SPL' and   Ttr_RestDayFlag = 0 THEN
                                                                        Ttr_REGHour  
                                                             ELSE
                                                                  0 
                                                             END)
                                    , Tph_SPLHOLOTHr = SUM(CASE WHEN   Ttr_DayCode = 'SPL' and   Ttr_RestDayFlag = 0 THEN
                                                                        Ttr_OTHour  
                                                             ELSE
                                                                  0 
                                                             END)
                                    , Tph_PSDHr = SUM(CASE WHEN   Ttr_DayCode = 'PSD' and   Ttr_RestDayFlag = 0 THEN
                                                                       Ttr_REGHour   
                                                             ELSE
                                                                 0 
                                                             END) 
                                    , Tph_PSDOTHr = SUM(CASE WHEN   Ttr_DayCode = 'PSD' and   Ttr_RestDayFlag = 0 THEN
                                                                       Ttr_OTHour   
                                                             ELSE
                                                                 0 
                                                             END) 
                                    , Tph_COMPHOLHr = SUM(CASE WHEN   Ttr_DayCode = 'COMP' and   Ttr_RestDayFlag = 0 THEN
                                                                        Ttr_REGHour  
                                                             ELSE
                                                                  0 
                                                             END)
                                    , Tph_COMPHOLOTHr = SUM(CASE WHEN   Ttr_DayCode = 'COMP' and   Ttr_RestDayFlag = 0 THEN
                                                                        Ttr_OTHour  
                                                             ELSE
                                                                  0 
                                                             END)
                                    , Tph_RESTLEGHOLHr = SUM(CASE WHEN   Ttr_DayCode = 'HOL' and   Ttr_RestDayFlag = 1 THEN
                                                                   Ttr_REGHour  
                                                                ELSE
                                                                     0 
                                                                END)
                                    , Tph_RESTLEGHOLOTHr = SUM(CASE WHEN   Ttr_DayCode = 'HOL' and   Ttr_RestDayFlag = 1 THEN
                                                                       Ttr_OTHour  
                                                                    ELSE
                                                                         0 
                                                                    END)
                                    , Tph_RESTSPLHOLHr = SUM(CASE WHEN   Ttr_DayCode = 'SPL' and   Ttr_RestDayFlag = 1 THEN
                                                                       Ttr_REGHour  
                                                                    ELSE
                                                                         0 
                                                                    END)
                                    , Tph_RESTSPLHOLOTHr = SUM(CASE WHEN   Ttr_DayCode = 'SPL' and   Ttr_RestDayFlag = 1 THEN
                                                                       Ttr_OTHour  
                                                                    ELSE
                                                                         0 
                                                                    END)
                                    , Tph_RESTCOMPHOLHr = SUM(CASE WHEN   Ttr_DayCode = 'COMP' and   Ttr_RestDayFlag = 1 THEN
                                                                       Ttr_REGHour  
                                                                    ELSE
                                                                         0 
                                                                    END)
                                    , Tph_RESTCOMPHOLOTHr = SUM(CASE WHEN   Ttr_DayCode = 'COMP' and   Ttr_RestDayFlag = 1 THEN
                                                                       Ttr_OTHour  
                                                                    ELSE
                                                                         0 
                                                                    END)
                                    , Tph_RESTPSDHr = SUM(CASE WHEN  Ttr_DayCode = 'PSD' and  Ttr_RestDayFlag = 1 THEN
                                                                       Ttr_REGHour  
                                                                     ELSE
                                                                       0 
                                                                     END) 
                                    , Tph_RESTPSDOTHr = SUM(CASE WHEN  Ttr_DayCode = 'PSD' and  Ttr_RestDayFlag = 1 THEN
                                                                       Ttr_OTHour  
                                                                     ELSE
                                                                       0 
                                                                     END)    
                                FROM T_EmpTimeRegisterHst
                                WHERE Ttr_IDNo = '{0}'
                                      And Ttr_PayCycle = '{1}' and LEFT(Ttr_WorkLocationCode, 1) <> 'D'
                                GROUP BY  Ttr_IDNo

                                SELECT Mem_PayrollGroup, Mem_EmploymentStatusCode, Mem_PayrollType, Mem_PositionGrade 
                                 FROM M_EmployeeHst
                                 WHERE Mem_IDNo = '{0}'
                                    AND Mem_PayCycle = '{1}'";
            #endregion
            query = string.Format(query, EmployeeId, PayPeriod);
            DataSet dsResult;
            dsResult = dal.ExecuteDataSet(query);
            return dsResult;
        }

        public DataRow GetHolidayPrevDayHist(string EmployeeID, string ProcessDate)
        {
            #region query
            string query = string.Format(@"SELECT Ttr_Date
                                            , Ttr_REGHour
                                            , Ttr_LVHour
                                            , Ttr_OTHour
                                            , Ttr_DayCode
                                            , Ttr_RestDayFlag
                                            , Ttr_WFNoPayLVCode
                                            , ISNULL(Msh_Schedule, '') as Msh_Schedule
                                            , ISNULL(Msh_ShiftIn1, '0000') as Msh_ShiftIn1
                                            , ISNULL(Msh_PadIn1, 0) as Msh_PadIn1 
                                            , ISNULL(Msh_ShiftOut1, '0000') as Msh_ShiftOut1
                                            , ISNULL(Msh_PadOut1, 0) as Msh_PadOut1
                                            , ISNULL(Msh_ShiftIn2, '0000') as Msh_ShiftIn2
                                            , ISNULL(Msh_PadIn2, 0) as Msh_PadIn2
                                            , ISNULL(Msh_ShiftOut2, '0000') as Msh_ShiftOut2
                                            , ISNULL(Msh_PadOut2, 0) as Msh_PadOut2
                                            , ISNULL(Msh_ShiftHours, 0) as Msh_ShiftHours
                                            , ISNULL(Msh_8HourShiftCode, '') as Msh_8HourShiftCode
                                            , ISNULL(Msh_PaidBreak, 0) as Msh_PaidBreak
                                            , ISNULL(Msh_HourFractionCutoff, '') as Msh_HourFractionCutoff
                                            , ISNULL(Msh_NDCount, 0) as Msh_NDCount
                                            , ISNULL(Msh_RequiredLogsOnBreak,0) as Msh_RequiredLogsOnBreak
                                            , ISNULL(Msh_ReducedTimeOut2, '0000') as Msh_ReducedTimeOut2
                                            FROM T_EmpTimeRegisterHst
                                            LEFT JOIN {0}..M_Shift ON Msh_ShiftCode = Ttr_ShiftCode
                                                AND Msh_CompanyCode = @COMPANYCODE
                                            WHERE Ttr_IDNo = @IDNUMBER
                                                AND CONVERT(DATE,Ttr_Date) = @PROCESSDATE ", centralProfile);
            #endregion
            ParameterInfo[] paramInfo = new ParameterInfo[3];
            paramInfo[0] = new ParameterInfo("@IDNUMBER", EmployeeID);
            paramInfo[1] = new ParameterInfo("@PROCESSDATE", ProcessDate, SqlDbType.Date);
            paramInfo[2] = new ParameterInfo("@COMPANYCODE", companyCode);

            DataTable dtResult;
            dtResult = dal.ExecuteDataSet(query, CommandType.Text, paramInfo).Tables[0];
            if (dtResult.Rows.Count > 0)
                return dtResult.Rows[0];
            else
                return null;
        }

        public int CleanUpByRoundHigh(int TimeIn, int TIMEFRAC, DALHelper dal)
        {
            if (TIMEFRAC != 0 && TimeIn != 0)
            {
                int temp = Convert.ToInt32(TimeIn / TIMEFRAC) * TIMEFRAC;
                if (temp != TimeIn)
                    TimeIn = temp + TIMEFRAC;
            }
            return TimeIn;
        }

        public int CleanUpByRoundLow(int TimeOut, int TIMEFRAC, DALHelper dal)
        {
            if (TIMEFRAC != 0 && TimeOut != 0)
            {
                TimeOut = Convert.ToInt32(TimeOut / TIMEFRAC) * TIMEFRAC;
            }
            return TimeOut;
        }

        public int GetTimeWithLateChargeDaily(int iActualTimeIn, int iShiftTimeIn)
        {
            if (iActualTimeIn - iShiftTimeIn > 0 && iActualTimeIn - iShiftTimeIn <= LATEGRACEIN1)
                return iShiftTimeIn;
            else
                return iActualTimeIn;
        }

        public int GetTimeWithLateChargeDailyMultPockets(int iActualTimeIn, int iShiftTimeIn, double LATEGRACEIN1IN2)
        {
            if (iActualTimeIn - iShiftTimeIn > 0 && iActualTimeIn - iShiftTimeIn <= LATEGRACEIN1IN2)
                return iShiftTimeIn;
            else
                return iActualTimeIn;
        }

        public bool IsLateChargeQuincenaMet(string EmployeeID, string PayPeriod, DALHelper dal)
        {
            string query = string.Format(@"SELECT Ttr_Date, Ttr_ActIn_1, Msh_ShiftIn1, AdjustedTimeIn = '0000'
                                            FROM T_EmpTimeRegister
                                            INNER JOIN {2}..M_Shift ON Ttr_ShiftCode = Msh_ShiftCode
                                                AND Msh_CompanyCode = '{3}'
                                                AND Msh_RecordStatus = 'A'
                                            WHERE Ttr_IDNo = '{0}'
                                                AND Ttr_PayCycle = '{1}'"
                                            , EmployeeID
                                            , PayPeriod
                                            , centralProfile
                                            , companyCode);

            int iLateCnt = 0, iLateVal = 0;
            bool bIsLateChargeMet = true;
            DataTable dtResult = dal.ExecuteDataSet(query).Tables[0];
            if (dtResult.Rows.Count > 0)
            {
                foreach (DataRow drRow in dtResult.Rows)
                {
                    iLateVal = GetHourDiffInMinutes(drRow["Ttr_ActIn_1"].ToString(), drRow["Msh_ShiftIn1"].ToString());
                    if (iLateVal > 0)
                    {
                        iLateCnt += iLateVal;
                        if (iLateCnt <= LATEGRACEIN1)
                        {
                            drRow["AdjustedTimeIn"] = drRow["Msh_ShiftIn1"];
                        }
                        else
                        {
                            bIsLateChargeMet = false;
                            break;
                        }
                    }
                }

                return bIsLateChargeMet;
            }
            return false;
        }

        public bool IsLateChargeQuincenaMetMultPockets(string EmployeeID, string PayPeriod, bool bFirstHalf, DALHelper dal)
        {
            string query = string.Format(@"SELECT Ttm_Date, Ttm_ActIn_01
                                            , Ttm_ActIn_02
                                            , Ttm_ActIn_03
                                            , Ttm_ActIn_04
                                            , Ttm_ActIn_05
                                            , Ttm_ActIn_06
                                            , Ttm_ActIn_07
                                            , Ttm_ActIn_08
                                            , Ttm_ActIn_09
                                            , Ttm_ActIn_10
                                            , Ttm_ActIn_11
                                            , Ttm_ActIn_12
                                            , Msh_ShiftIn1
											, Msh_ShiftOut1
											, Msh_ShiftIn2
											, Msh_ShiftOut2
                                            , AdjustedTimeIn = '0000'
                                            FROM T_EmpTimeRegisterMisc
                                            INNER JOIN T_EmpTimeRegister ON Ttr_IDNo = Ttm_IDNo
                                                AND Ttr_Date = Ttm_Date
                                            INNER JOIN {2}..M_Shift ON Ttr_ShiftCode = Msh_ShiftCode
                                                AND Msh_CompanyCode = '{3}'
                                                AND Msh_RecordStatus = 'A'
                                            WHERE Ttm_IDNo = '{0}'
                                                AND Ttm_PayCycle = '{1}'"
                                            , EmployeeID
                                            , PayPeriod
                                            , centralProfile
                                            , companyCode);

            int iLateCnt            = 0;
            int iLateVal            = 0;
            bool bIsLateChargeMet   = true;
            int iShiftOut1Mins      = 0;
            int iTempIn             = 0;
            int iSecondHalfMin      = 0;
            DataTable dtResult = dal.ExecuteDataSet(query).Tables[0];
            if (dtResult.Rows.Count > 0)
            {
                foreach (DataRow drRow in dtResult.Rows)
                {
                    if (bFirstHalf)
                    {
                        iLateVal = GetHourDiffInMinutes(drRow["Ttm_ActIn_01"].ToString(), drRow["Msh_ShiftIn1"].ToString());
                        if (iLateVal > 0)
                        {
                            iLateCnt += iLateVal;
                            if (iLateCnt <= LATEGRACEIN1)
                            {
                                drRow["AdjustedTimeIn"] = drRow["Msh_ShiftIn1"];
                            }
                            else
                            {
                                bIsLateChargeMet = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        iSecondHalfMin = 0;
                        iShiftOut1Mins = GetMinsFromHourStr(drRow["Msh_ShiftOut1"].ToString());
                        for (int x = 1; x <= 12; x++)
                        {
                            iTempIn = GetMinsFromHourStr(drRow[string.Format("Ttm_ActIn_{0:00}", x)].ToString());
                            if (iTempIn >= iShiftOut1Mins)
                            {
                                if (iSecondHalfMin == 0)
                                {
                                    iLateVal = GetHourDiffInMinutes(drRow[string.Format("Ttm_ActIn_{0:00}", x)].ToString(), drRow["Msh_ShiftIn2"].ToString());
                                    if (iLateVal > 0)
                                    {
                                        iLateCnt += iLateVal;
                                        if (iLateCnt <= LATEGRACEIN2)
                                        {
                                            drRow["AdjustedTimeIn"] = drRow["Msh_ShiftIn2"];
                                        }
                                        else
                                        {
                                            bIsLateChargeMet = false;
                                            break;
                                        }
                                    }
                                    iSecondHalfMin = iTempIn;
                                }
                                else
                                {
                                    break;
                                }
                            }
                        }

                        if (bIsLateChargeMet == false)
                            break;
                    }     
                }

                return bIsLateChargeMet;
            }
            return false;
        }

        public int GetTimeInWithLateBracketFilter(int ActualTimeIn, int ShiftTimeIn)
        {
            if (ActualTimeIn > ShiftTimeIn && LATEBRCKTD != null)
            {
                for (int i = 0; i < LATEBRCKTD.Rows.Count; i++)
                {
                    //Example: (Please take note of the ranging of values)
                    //16 = 30 
                    //46 = 60 
                    //60 = 0
                    //This means, 
                    //16-45 late mins = 30 mins deduction
                    //46-59 late mins = 60 mins deduction
                    if (i + 1 != LATEBRCKTD.Rows.Count
                        && (ActualTimeIn - ShiftTimeIn) >= Convert.ToInt32(LATEBRCKTD.Rows[i]["Mpd_SubCode"])
                        && (ActualTimeIn - ShiftTimeIn) < Convert.ToInt32(LATEBRCKTD.Rows[i + 1]["Mpd_SubCode"])
                        && Convert.ToInt32(Convert.ToDouble(LATEBRCKTD.Rows[i]["Mpd_ParamValue"])) > 0)
                    {
                        ActualTimeIn = ShiftTimeIn + Convert.ToInt32(Convert.ToDouble(LATEBRCKTD.Rows[i]["Mpd_ParamValue"]));
                        break;
                    }
                }
            }
            return ActualTimeIn;
        }

        public int GetTimeInWithLatePMBracketFilter(int ActualTimeIn, int ShiftTimeIn1, int ShiftTimeOut1, int ShiftTimeIn2)
        {
            if (ActualTimeIn > ShiftTimeIn1 && LATEBRCKTD != null)
            {
                int iBreakTime = GetOTHoursInMinutes(ShiftTimeOut1, ShiftTimeIn2, ShiftTimeOut1, ActualTimeIn);
                for (int i = 0; i < LATEBRCKTD.Rows.Count; i++)
                {
                    //Example: (Please take note of the ranging of values)
                    //16 = 30 
                    //46 = 60 
                    //60 = 0
                    //This means, 
                    //16-45 late mins = 30 mins deduction
                    //46-59 late mins = 60 mins deduction
                    if (i + 1 != LATEBRCKTD.Rows.Count
                        && (ActualTimeIn - ShiftTimeIn1 - iBreakTime) >= Convert.ToInt32(LATEBRCKTD.Rows[i]["Mpd_SubCode"])
                        && (ActualTimeIn - ShiftTimeIn1 - iBreakTime) < Convert.ToInt32(LATEBRCKTD.Rows[i + 1]["Mpd_SubCode"])
                        && Convert.ToInt32(Convert.ToDouble(LATEBRCKTD.Rows[i]["Mpd_ParamValue"])) > 0)
                    {
                        ActualTimeIn = ShiftTimeIn1 + iBreakTime + Convert.ToInt32(Convert.ToDouble(LATEBRCKTD.Rows[i]["Mpd_ParamValue"]));
                        break;
                    }
                }
            }
            return ActualTimeIn;
        }

        public int GetTimeOutWithUndertimeBracketFilter(int ActualTimeOut, int ShiftTimeOut)
        {
            if (ActualTimeOut < ShiftTimeOut && UTIMEBRCKT != null)
            {
                for (int i = 0; i < UTIMEBRCKT.Rows.Count; i++)
                {
                    //Example: (Please take note of the ranging of values)
                    //16 = 30 
                    //46 = 60 
                    //60 = 0
                    //This means, 
                    //16-45 undertime mins = 30 mins deduction
                    //46-59 undertime mins = 60 mins deduction
                    if (i + 1 != UTIMEBRCKT.Rows.Count
                        && (ShiftTimeOut - ActualTimeOut) >= Convert.ToInt32(UTIMEBRCKT.Rows[i]["Mpd_SubCode"])
                        && (ShiftTimeOut - ActualTimeOut) < Convert.ToInt32(UTIMEBRCKT.Rows[i + 1]["Mpd_SubCode"])
                        && Convert.ToInt32(Convert.ToDouble(UTIMEBRCKT.Rows[i]["Mpd_ParamValue"])) > -1)//CHANGE MERGE 09222015
                    {
                        if (ShiftTimeOut - Convert.ToInt32(Convert.ToDouble(UTIMEBRCKT.Rows[i]["Mpd_ParamValue"])) >= 0)
                            ActualTimeOut = ShiftTimeOut - Convert.ToInt32(Convert.ToDouble(UTIMEBRCKT.Rows[i]["Mpd_ParamValue"]));
                        break;
                    }
                }
            }
            return ActualTimeOut;
        }

        public int GetTimeOutWithUndertimePMBracketFilter(int ActualTimeOut, int ShiftTimeOut1, int ShiftTimeIn2, int ShiftTimeOut2)
        {
            if (ActualTimeOut < ShiftTimeOut2 && UTIMEBRCKT != null)
            {
                int iBreakTime = GetOTHoursInMinutes(ShiftTimeOut1, ShiftTimeIn2, ActualTimeOut, ShiftTimeIn2);
                for (int i = 0; i < UTIMEBRCKT.Rows.Count; i++)
                {
                    //Example: (Please take note of the ranging of values)
                    //16 = 30 
                    //46 = 60 
                    //60 = 0
                    //This means, 
                    //16-45 undertime mins = 30 mins deduction
                    //46-59 undertime mins = 60 mins deduction
                    if (i + 1 != UTIMEBRCKT.Rows.Count
                        && (ShiftTimeOut2 - ActualTimeOut - iBreakTime) >= Convert.ToInt32(UTIMEBRCKT.Rows[i]["Mpd_SubCode"])
                        && (ShiftTimeOut2 - ActualTimeOut - iBreakTime) < Convert.ToInt32(UTIMEBRCKT.Rows[i + 1]["Mpd_SubCode"])
                        && Convert.ToInt32(Convert.ToDouble(UTIMEBRCKT.Rows[i]["Mpd_ParamValue"])) > -1)
                    {
                        if (ShiftTimeOut2 - iBreakTime - Convert.ToInt32(Convert.ToDouble(UTIMEBRCKT.Rows[i]["Mpd_ParamValue"])) >= 0)
                            ActualTimeOut = ShiftTimeOut2 - iBreakTime - Convert.ToInt32(Convert.ToDouble(UTIMEBRCKT.Rows[i]["Mpd_ParamValue"]));
                        break;
                    }
                }
            }
            return ActualTimeOut;
        }

        private DataTable GetBracketParameter(string ParameterID)
        {
            DataSet ds = new DataSet();

            #region query
            string qString = string.Format(@" SELECT CONVERT(INT, Mpd_SubCode) AS Mpd_SubCode, Mpd_ParamValue 
                                                FROM M_PolicyDtl
                                                WHERE Mpd_PolicyCode = '{0}'
                                                    AND Mpd_CompanyCode = '{1}'
	                                                AND Mpd_RecordStatus = 'A'
                                                ORDER BY 1", ParameterID, companyCode);
            #endregion

            using (DALHelper dal = new DALHelper())
            {
                dal.OpenDB();
                ds = dal.ExecuteDataSet(qString);
                dal.CloseDB();
            }

            if (ds.Tables[0].Rows.Count > 0)
                return ds.Tables[0];
            else
                return new DataTable();
        }
        
        public DataTable GetAllLeaveAvailmentRecords(bool ProcessAll, string EmployeeId, bool bPaid)
        {
            string EmployeeCondition = "";
            if (!ProcessAll && EmployeeId != "")
                EmployeeCondition = " AND Tlv_IDNo = '" + EmployeeId + "' ";
            else if (ProcessAll == true && EmployeeList != "")
                EmployeeCondition = " AND Tlv_IDNo IN (" + EmployeeList + ") ";
            #region query
            string query = string.Format(@"DECLARE @Leave AS table
                                                ( EmployeeId VARCHAR(15)
	                                            , LeaveDate DATE
	                                            , LeaveType CHAR(2)                    
	                                            , LeaveHours DECIMAL(5,2)
	                                            , StartTime CHAR(4)
	                                            , EndTime CHAR(4)  
                                                , CombinedLeave BIT
                                                , PaidLeave BIT
	                                            , WithCredit BIT
                                                --, ControlNo VARCHAR(12)
                                                , DayUnit CHAR(2)
                                                , FileWithinShift BIT)

                                                INSERT INTO @Leave

                                                SELECT DISTINCT Tlv_IDNo
		                                        , Tlv_LeaveDate
		                                        , Tlv_LeaveCode
		                                        , Tlv_LeaveHours
		                                        , Tlv_StartTime
		                                        , Tlv_EndTime
		                                        , Mlv_IsCombineLeave
		                                        , Mlv_IsPaidLeave
		                                        , Mlv_WithCredit
		                                        --, Availment.Tlv_DocumentNo
		                                        , Tlv_LeaveUnit
		                                        , Mlv_FileWithinShift
	                                         FROM   (
                                                        SELECT Tlv_IDNo
                                                        , Tlv_LeaveDate
                                                        , Tlv_LeaveCode
                                                        , Tlv_LeaveHours
				                                        , CASE WHEN Tlv_StartTime = '0000' THEN '2400' ELSE Tlv_StartTime END AS Tlv_StartTime
				                                        , CASE WHEN Tlv_EndTime = '0000' THEN '2400' ELSE Tlv_EndTime END AS Tlv_EndTime
				                                        , Mlv_IsCombineLeave
                                                        , Mlv_IsPaidLeave
                                                        , Mlv_WithCredit
                                                        , Tlv_DocumentNo
				                                        , CASE WHEN Tlv_LeaveUnit = 'WH' THEN
					                                        CASE WHEN Tlv_LeaveHours != Msh_ShiftHours
					                                        THEN 'OT' ELSE Tlv_LeaveUnit END
					                                        ELSE Tlv_LeaveUnit END AS Tlv_LeaveUnit
				                                        , Mlv_FileWithinShift
			                                        FROM T_EmpLeave
			                                        INNER JOIN Udv_TimeRegister ON Ttr_Date = Tlv_LeaveDate
				                                        AND Ttr_IDNo  = Tlv_IDNo
			                                        INNER JOIN {0}..M_Shift ON Ttr_ShiftCode = Msh_ShiftCode
				                                        AND Msh_CompanyCode = @CompanyCode
			                                        INNER JOIN {0}..M_Leave on Mlv_LeaveCode = Tlv_LeaveCode
				                                        AND Mlv_CompanyCode = @CompanyCode
				                                        AND Mlv_IsPaidLeave = @PaidLeave
			                                        WHERE CONVERT(DATE,Tlv_LeaveDate) >= @StartDate AND CONVERT(DATE,Tlv_LeaveDate) <= @EndDate
			                                            AND Tlv_LeaveStatus ='14' 
                                                        {1}

			                                        UNION ALL

			                                        SELECT Tlv_IDNo
                                                        , Tlv_LeaveDate
                                                        , Tlv_LeaveCode
                                                        , Tlv_LeaveHours
				                                        , CASE WHEN Tlv_StartTime = '0000' THEN '2400' ELSE Tlv_StartTime END AS Tlv_StartTime
				                                        , CASE WHEN Tlv_EndTime = '0000' THEN '2400' ELSE Tlv_EndTime END AS Tlv_EndTime
				                                        , Mlv_IsCombineLeave
                                                        , Mlv_IsPaidLeave
                                                        , Mlv_WithCredit
                                                        , Tlv_DocumentNo
				                                        , CASE WHEN Tlv_LeaveUnit = 'WH' THEN
					                                        CASE WHEN Tlv_LeaveHours != Msh_ShiftHours
					                                        THEN 'OT' ELSE Tlv_LeaveUnit END
					                                        ELSE Tlv_LeaveUnit END AS Tlv_LeaveUnit
				                                        , Mlv_FileWithinShift
			                                        FROM T_EmpLeaveHst
			                                        INNER JOIN Udv_TimeRegister ON Ttr_Date = Tlv_LeaveDate
				                                        AND Ttr_IDNo  = Tlv_IDNo
			                                        INNER JOIN {0}..M_Shift ON Ttr_ShiftCode = Msh_ShiftCode
				                                        AND Msh_CompanyCode = @CompanyCode
			                                        INNER JOIN {0}..M_Leave on Mlv_LeaveCode = Tlv_LeaveCode
				                                        AND Mlv_CompanyCode = @CompanyCode
				                                        AND Mlv_IsPaidLeave = @PaidLeave
			                                        WHERE CONVERT(DATE,Tlv_LeaveDate) >= @StartDate AND CONVERT(DATE,Tlv_LeaveDate) <= @EndDate
			                                            AND Tlv_LeaveStatus ='14'
                                                        {1} ) Availment
		                                            LEFT JOIN ( SELECT Tlv_DocumentNo
                                                                , Tlv_OriginalDocumentNo 
					                                            FROM T_EmpLeave
					                                            INNER JOIN Udv_TimeRegister ON Ttr_Date = Tlv_LeaveDate
						                                            AND Ttr_IDNo  = Tlv_IDNo
					                                            INNER JOIN {0}..M_Shift ON Ttr_ShiftCode = Msh_ShiftCode
						                                            AND Msh_CompanyCode = @CompanyCode
					                                            INNER JOIN {0}..M_Leave on Mlv_LeaveCode = Tlv_LeaveCode
						                                            AND Mlv_CompanyCode = @CompanyCode
						                                            AND Mlv_IsPaidLeave = @PaidLeave
					                                            WHERE CONVERT(DATE,Tlv_LeaveDate) >= @StartDate AND CONVERT(DATE,Tlv_LeaveDate) <= @EndDate
					                                                AND Tlv_LeaveStatus ='15' 
                                                                    {1}

					                                            UNION ALL

					                                            SELECT Tlv_DocumentNo
                                                                , Tlv_OriginalDocumentNo  
					                                            FROM T_EmpLeaveHst
					                                            INNER JOIN Udv_TimeRegister ON Ttr_Date = Tlv_LeaveDate
						                                            AND Ttr_IDNo  = Tlv_IDNo
					                                            INNER JOIN {0}..M_Shift ON Ttr_ShiftCode = Msh_ShiftCode
						                                            AND Msh_CompanyCode = @CompanyCode
					                                            INNER JOIN {0}..M_Leave on Mlv_LeaveCode = Tlv_LeaveCode
						                                            AND Mlv_CompanyCode = @CompanyCode
						                                            AND Mlv_IsPaidLeave = @PaidLeave
					                                            WHERE CONVERT(DATE,Tlv_LeaveDate) >= @StartDate AND CONVERT(DATE,Tlv_LeaveDate) <= @EndDate
					                                                AND Tlv_LeaveStatus ='15'
                                                                    {1} 
                                                        ) Cancellation on Cancellation.Tlv_OriginalDocumentNo = Availment.Tlv_DocumentNo
		                                                WHERE Cancellation.Tlv_DocumentNo IS NULL 
                                             
	                                                    DELETE FROM @Leave
	                                                    FROM @LEAVE
	                                                    WHERE EmployeeId + CONVERT(CHAR(10),LeaveDate,101) +  LeaveType IN 
	                                                    ( SELECT EmployeeId + CONVERT(CHAR(10),LeaveDate,101) +  LeaveType 
	                                                    FROM @Leave
	                                                    GROUP BY  EmployeeId 
		                                                    , LeaveDate 
		                                                    , LeaveType 
	                                                    HAVING SUM(LeaveHours) = 0)

	                                                    SELECT * FROM @Leave"
                                                        , centralProfile
                                                        , EmployeeCondition);
            #endregion

            ParameterInfo[] paramInfo = new ParameterInfo[4];
            paramInfo[0] = new ParameterInfo("@StartDate", PayrollStart, SqlDbType.Date);
            paramInfo[1] = new ParameterInfo("@EndDate", PayrollEnd, SqlDbType.Date);
            paramInfo[2] = new ParameterInfo("@PaidLeave", bPaid, SqlDbType.Bit);
            paramInfo[3] = new ParameterInfo("@CompanyCode", companyCode);

            DataTable dtResult = dal.ExecuteDataSet(query, CommandType.Text, paramInfo).Tables[0];
            return dtResult;
        }

        public void ComputeLeaveLateUndertime(DataRow[] drArrLeaveAppPaid, DataRow[] drArrLeaveAppUnpaid, string EmployeeId, string ProcessDate
                                            , int ActualIN1, int ActualOUT1, int ActualIN2, int ActualOUT2
                                            , int ShiftStart, int ShiftBreakStart, int ShiftBreakEnd, int ShiftEnd
                                            , bool IsGraveyard, int PaidBreakMins
                                            , ref int iLate1, ref int iLate2, ref int iUndertime1, ref int iUndertime2
                                            , ref int iPaidLeave, ref int iUnpaidLeave, ref int iExcessLeave, ref int iOBLeave, ref int iLeaveOnPaidBreak)
        {
            #region Variable Declaration
            int LeaveStartMin;
            int LeaveEndMin;
            int iLeaveMins              = 0;
            int iRegMins                = 0;
            int iLeaveOnLate1           = 0;
            int iExcessLeaveInAM        = 0;
            int iLeaveOnLate2           = 0;
            int iLeaveOnUndertime1      = 0;
            int iExcessLeaveInPM        = 0;
            int iLeaveOnUndertime2      = 0;
            int iDeductPaidLeaveHours   = 0;
            int iDeductUnpaidLeaveHours = 0;
            bool bPaidLeave             = false;
            bool bLeaveWithCredit       = false;
            bool bCancelledLeave        = false;
            int iOrigPaidLeaveMins      = 0;
            int iOrigUnpaidLeaveMins    = 0;
            #endregion

            #region Initialization
            //assume leaves don't overlap
            //leave applications are unique
            DataRow[] drArrLeaveApp = new DataRow[drArrLeaveAppPaid.Length + drArrLeaveAppUnpaid.Length];
            Array.Copy(drArrLeaveAppPaid, drArrLeaveApp, drArrLeaveAppPaid.Length);
            Array.Copy(drArrLeaveAppUnpaid, 0, drArrLeaveApp, drArrLeaveAppPaid.Length, drArrLeaveAppUnpaid.Length);

            if (ActualIN1 == ActualOUT1)
            {
                ActualIN1  = 0;
                ActualOUT1 = 0;
            }
            if (ActualIN2 == ActualOUT2)
            {
                ActualIN2  = 0;
                ActualOUT2 = 0;
            }
            if (ActualIN1 == ActualOUT2)
            {
                ActualIN1  = 0;
                ActualOUT2 = 0;
            }

            //initial late and undertime
            iLate1 = GetOTHoursInMinutes(ShiftStart, ShiftBreakStart, ShiftStart, ActualIN1);
            iUndertime1 = GetOTHoursInMinutes(ShiftStart, ShiftBreakStart, ActualOUT1, ShiftBreakStart);
            iLate2 = GetOTHoursInMinutes(ShiftBreakEnd, ShiftEnd, ShiftBreakEnd, ActualIN2);
            iUndertime2 = GetOTHoursInMinutes(ShiftBreakEnd, ShiftEnd, ActualOUT2, ShiftEnd);
            #endregion

            foreach (DataRow drLeaveApp in drArrLeaveApp)
            {
                #region Loop Initialization
                LeaveStartMin   = GetMinsFromHourStr(drLeaveApp["StartTime"].ToString());
                LeaveEndMin     = GetMinsFromHourStr(drLeaveApp["EndTime"].ToString());
                if (LeaveStartMin == 0 && LeaveEndMin == 0)
                    continue;

                bPaidLeave       = Convert.ToBoolean(drLeaveApp["PaidLeave"]);
                bLeaveWithCredit = Convert.ToBoolean(drLeaveApp["WithCredit"]);

                if (Convert.ToDouble(drLeaveApp["LeaveHours"]) < 0)
                    bCancelledLeave = true;
                else
                    bCancelledLeave = false;

                if (IsGraveyard) //Graveyard shift 
                {
                    if (LeaveStartMin < (ShiftStart - LOGPAD))
                    {
                        LeaveStartMin += GRAVEYARD24;
                    }
                    if (LeaveEndMin < (ShiftEnd - LOGPAD))
                    {
                        LeaveEndMin += GRAVEYARD24;
                    }
                }

                if (Convert.ToBoolean(FLEXSHIFT) == true)
                {
                    if (bPaidLeave == true)
                        iOrigPaidLeaveMins += Convert.ToInt32(Convert.ToDouble(drLeaveApp["LeaveHours"]) * 60);
                    else
                        iOrigUnpaidLeaveMins += Convert.ToInt32(Convert.ToDouble(drLeaveApp["LeaveHours"]) * 60);
                }
                #endregion

                if (Convert.ToBoolean(FLEXSHIFT) == false)
                {
                    #region AM
                    //Late
                    iLeaveOnLate1 = 0;
                    if (ActualIN1 != 0 && ActualIN1 > ShiftStart && ActualIN1 < ShiftBreakStart)
                    {
                        iLeaveOnLate1 = GetOTHoursInMinutes(LeaveStartMin, LeaveEndMin, ShiftStart, ActualIN1);
                        if (bPaidLeave == true)
                        {
                            iLate1 -= iLeaveOnLate1;
                            if (bLeaveWithCredit == true)
                                iPaidLeave += iLeaveOnLate1;
                        }
                        else
                        {
                            iLate1 -= iLeaveOnLate1;
                            iUnpaidLeave += iLeaveOnLate1;
                        }
                    }

                    //Undertime
                    iLeaveOnUndertime1 = 0;
                    if (ActualOUT1 != 0 && ActualOUT1 > ShiftStart && ActualOUT1 < ShiftBreakStart)
                    {
                        iLeaveOnUndertime1 = GetOTHoursInMinutes(LeaveStartMin, LeaveEndMin, ActualOUT1, ShiftBreakStart);
                        if (bPaidLeave == true)
                        {
                            iUndertime1 -= iLeaveOnUndertime1;
                            if (bLeaveWithCredit == true)
                                iPaidLeave += iLeaveOnUndertime1;
                        }
                        else
                        {
                            if (drLeaveApp["LeaveType"].ToString() != "UT")
                            {
                                iUndertime1 -= iLeaveOnUndertime1;
                                iUnpaidLeave += iLeaveOnUndertime1;
                            }
                        }
                    }

                    //Leave
                    if (ActualIN1 > 0 && ActualOUT1 > 0)
                    {
                        if (ActualIN1 != ActualOUT1 && Math.Min(Math.Min(ShiftBreakStart, ActualOUT1), LeaveEndMin) - Math.Max(Math.Max(ShiftStart, ActualIN1), LeaveStartMin) >= 0)
                            iRegMins = Math.Min(Math.Min(ShiftBreakStart, ActualOUT1), LeaveEndMin) - Math.Max(Math.Max(ShiftStart, ActualIN1), LeaveStartMin);
                        else
                            iRegMins = -1;
                    }
                    else
                        iRegMins = 0;
                    iLeaveMins = Math.Min(ShiftBreakStart, LeaveEndMin) - Math.Max(ShiftStart, LeaveStartMin);
                    if (bPaidLeave == true && bLeaveWithCredit == false)
                        iExcessLeaveInAM = GetOTHoursInMinutes(ActualIN1, ActualOUT1, Math.Max(ShiftStart, LeaveStartMin), Math.Min(ShiftBreakStart, LeaveEndMin));
                    else
                        iExcessLeaveInAM = GetOTHoursInMinutes(ActualIN1, ActualOUT1, LeaveStartMin, LeaveEndMin);

                    //Checking of excess leave
                    if (bLeaveWithCredit == true)
                        iExcessLeave += iExcessLeaveInAM;

                    if (bPaidLeave == true) //Paid leave and OB
                    {
                        if (iExcessLeaveInAM > 0) //with regular hours
                        {
                            if (bLeaveWithCredit == true)
                            {
                                if (iRegMins - iExcessLeaveInAM > 0)
                                {
                                    iPaidLeave += (iRegMins - iExcessLeaveInAM);
                                    if (bCancelledLeave)
                                        iDeductPaidLeaveHours += (iRegMins - iExcessLeaveInAM); //for cancelled leave hour accumulation
                                }
                            }
                            else
                                iOBLeave += iLeaveMins; ///OB
                        }
                        else if (iLeaveMins > 0
                                    && ((bLeaveWithCredit == true && iLeaveOnLate1 + iLeaveOnUndertime1 == 0 && (iRegMins == 0 || iRegMins == -1))
                                        || (bLeaveWithCredit == false && iRegMins <= 0))) //no logs or OB
                        {
                            if (bLeaveWithCredit == true)
                            {
                                iPaidLeave += iLeaveMins;
                                if (bCancelledLeave)
                                    iDeductPaidLeaveHours += iLeaveMins; //for cancelled leave hour accumulation
                            }
                            else
                                iOBLeave += iLeaveMins; ///OB

                            if (iRegMins == 0 || iRegMins == -1)
                            {
                                if (iLate1 > iLeaveMins)
                                    iLate1 -= iLeaveMins;
                                else
                                    iLate1 = 0;
                                if (iUndertime1 > iLeaveMins)
                                    iUndertime1 -= iLeaveMins;
                                else
                                    iUndertime1 = 0;
                            }
                        }
                    }
                    else if (bPaidLeave == false) //Unpaid Leave
                    {
                        if (iRegMins == 0 && iLeaveOnLate1 + iLeaveOnUndertime1 == 0 && iLeaveMins > 0 && drLeaveApp["LeaveType"].ToString() != "UT") //no logs
                        {
                            iUnpaidLeave += iLeaveMins;
                            if (bCancelledLeave)
                                iDeductUnpaidLeaveHours += iLeaveMins; //for cancelled leave hour accumulation

                            if (iLate1 > iLeaveMins)
                                iLate1 -= iLeaveMins;
                            else
                                iLate1 = 0;
                            if (iUndertime1 > iLeaveMins)
                                iUndertime1 -= iLeaveMins;
                            else
                                iUndertime1 = 0;
                        }
                    }
                    #endregion

                    #region PM
                    //Late
                    iLeaveOnLate2 = 0;
                    if (ActualIN2 != 0 && ActualIN2 > ShiftBreakEnd && ActualIN2 < ShiftEnd)
                    {
                        iLeaveOnLate2 = GetOTHoursInMinutes(LeaveStartMin, LeaveEndMin, ShiftBreakEnd, ActualIN2);
                        if (bPaidLeave == true)
                        {
                            iLate2 -= iLeaveOnLate2;
                            if (bLeaveWithCredit == true)
                                iPaidLeave += iLeaveOnLate2;
                        }
                        else
                        {
                            iLate2 -= iLeaveOnLate2;
                            iUnpaidLeave += iLeaveOnLate2;
                        }
                    }

                    //Undertime
                    iLeaveOnUndertime2 = 0;
                    if (ActualOUT2 != 0 && ActualOUT2 > ShiftBreakEnd && ActualOUT2 < ShiftEnd)
                    {
                        iLeaveOnUndertime2 = GetOTHoursInMinutes(LeaveStartMin, LeaveEndMin, ActualOUT2, ShiftEnd);
                        if (bPaidLeave == true)
                        {
                            iUndertime2 -= iLeaveOnUndertime2;
                            if (bLeaveWithCredit == true)
                                iPaidLeave += iLeaveOnUndertime2;
                        }
                        else
                        {
                            if (drLeaveApp["LeaveType"].ToString() != "UT")
                            {
                                iUndertime2 -= iLeaveOnUndertime2;
                                iUnpaidLeave += iLeaveOnUndertime2;
                            }
                        }
                    }

                    //Leave
                    if (ActualIN2 > 0 && ActualOUT2 > 0)
                    {
                        if (ActualIN2 != ActualOUT2 && Math.Min(Math.Min(ShiftEnd, ActualOUT2), LeaveEndMin) - Math.Max(Math.Max(ShiftBreakEnd, ActualIN2), LeaveStartMin) >= 0)
                            iRegMins = Math.Min(Math.Min(ShiftEnd, ActualOUT2), LeaveEndMin) - Math.Max(Math.Max(ShiftBreakEnd, ActualIN2), LeaveStartMin);
                        else
                            iRegMins = -1;
                    }
                    else
                        iRegMins = 0;
                    iLeaveMins = Math.Min(ShiftEnd, LeaveEndMin) - Math.Max(ShiftBreakEnd, LeaveStartMin);
                    if (bPaidLeave == true && bLeaveWithCredit == false)
                        iExcessLeaveInPM = GetOTHoursInMinutes(ActualIN2, ActualOUT2, Math.Max(ShiftBreakEnd, LeaveStartMin), Math.Min(ShiftEnd, LeaveEndMin));
                    else
                        iExcessLeaveInPM = GetOTHoursInMinutes(ActualIN2, ActualOUT2, LeaveStartMin, LeaveEndMin);

                    //Checking of excess leave
                    if (bLeaveWithCredit == true)
                        iExcessLeave += iExcessLeaveInPM;

                    //Checking of Paid Break
                    if (PaidBreakMins > 0
                        && (//(ActualIN1 > 0 && ActualOUT1 <= ShiftBreakStart && ActualIN2 >= ShiftBreakEnd && ActualOUT2 > 0) ||
                            (ActualIN1 > 0 && ActualOUT1 <= ShiftBreakStart && ActualIN2 == 0 && ActualOUT2 == 0)
                            || (ActualIN1 == 0 && ActualOUT1 == 0 && ActualIN2 >= ShiftBreakEnd && ActualOUT2 > 0)
                            || (ActualIN1 == 0 && ActualOUT1 == 0 && ActualIN2 == 0 && ActualOUT2 == 0))
                        ) //include paid break in leave only WHEN undertime in the morning or afternoon, or whole day absent
                    {
                        iLeaveOnPaidBreak = GetOTHoursInMinutes(ShiftBreakStart, ShiftBreakEnd, LeaveStartMin, LeaveEndMin);
                        if (bPaidLeave == true)
                        {
                            if (bLeaveWithCredit == true)
                                iPaidLeave += iLeaveOnPaidBreak;
                            else
                                iOBLeave += iLeaveOnPaidBreak;
                        }
                        else
                        {
                            if (drLeaveApp["LeaveType"].ToString() != "UT")
                                iUnpaidLeave += iLeaveOnPaidBreak;
                            else
                                iLeaveOnPaidBreak = 0;
                        }
                    }

                    if (bPaidLeave == true) //Paid leave and OB
                    {
                        if (iExcessLeaveInPM > 0) //with regular hours
                        {
                            if (bLeaveWithCredit == true)
                            {
                                if (iRegMins - iExcessLeaveInPM > 0)
                                {
                                    iPaidLeave += (iRegMins - iExcessLeaveInPM);
                                    if (bCancelledLeave)
                                        iDeductPaidLeaveHours += (iRegMins - iExcessLeaveInPM); //for cancelled leave hour accumulation
                                }
                            }
                            else
                                iOBLeave += iLeaveMins; ///OB
                        }
                        else if (iLeaveMins > 0
                                    && ((bLeaveWithCredit == true && iLeaveOnLate2 + iLeaveOnUndertime2 == 0 && (iRegMins == 0 || iRegMins == -1))
                                        || (bLeaveWithCredit == false && iRegMins <= 0))) //no logs or OB
                        {
                            if (bLeaveWithCredit == true)
                            {
                                iPaidLeave += iLeaveMins;
                                if (bCancelledLeave)
                                    iDeductPaidLeaveHours += iLeaveMins; //for cancelled leave hour accumulation
                            }
                            else
                                iOBLeave += iLeaveMins; ///OB

                            if (iRegMins == 0 || iRegMins == -1)
                            {
                                if (iLate2 > iLeaveMins)
                                    iLate2 -= iLeaveMins;
                                else
                                    iLate2 = 0;
                                if (iUndertime2 > iLeaveMins)
                                    iUndertime2 -= iLeaveMins;
                                else
                                    iUndertime2 = 0;
                            }
                        }
                    }
                    else if (bPaidLeave == false) //Unpaid Leave
                    {
                        if (iRegMins == 0 && iLeaveOnLate2 + iLeaveOnUndertime2 == 0 && iLeaveMins > 0 && drLeaveApp["LeaveType"].ToString() != "UT") //no logs
                        {
                            iUnpaidLeave += iLeaveMins;
                            if (bCancelledLeave)
                                iDeductUnpaidLeaveHours += iLeaveMins; //for cancelled leave hour accumulation

                            if (iLate2 > iLeaveMins)
                                iLate2 -= iLeaveMins;
                            else
                                iLate2 = 0;
                            if (iUndertime2 > iLeaveMins)
                                iUndertime2 -= iLeaveMins;
                            else
                                iUndertime2 = 0;
                        }
                    }
                    #endregion
                }
            }

            iPaidLeave = iPaidLeave - (iDeductPaidLeaveHours * 2);
            iUnpaidLeave = iUnpaidLeave - (iDeductUnpaidLeaveHours * 2);

            if (Convert.ToBoolean(FLEXSHIFT) == true
                && (iOrigPaidLeaveMins > 0 || iOrigUnpaidLeaveMins > 0))
            {
                iPaidLeave = iOrigPaidLeaveMins - (iDeductPaidLeaveHours * 2);
                iUnpaidLeave = iOrigUnpaidLeaveMins - (iDeductUnpaidLeaveHours * 2);

                iUndertime2 = iLate1 + iLate2 + iUndertime1 + iUndertime2;
                iLate1 = 0;
                iLate2 = 0;
                iUndertime1 = 0;

                if (iPaidLeave > 0)
                {
                    if (iUndertime2 - iPaidLeave > 0)
                        iUndertime2 = iUndertime2 - iPaidLeave;
                    else
                        iUndertime2 = 0;
                }
                if (iUnpaidLeave > 0)
                {
                    if (iUndertime2 - iUnpaidLeave > 0)
                        iUndertime2 = iUndertime2 - iUnpaidLeave;
                    else
                        iUndertime2 = 0;
                }
            }
        }

        public void ComputeOvertimeForOBEx(string EmployeeId, string ProcessDate
                                            , int iShiftTimeIn1Min, int iShiftTimeOut1Min, int iShiftTimeIn2Min, int iShiftTimeOut2Min
                                            , ref int iComputedOvertimeMin, ref int iCompRegNightPremMin, ref int iCompOvertimeNightPremMin
                                            , string strDayCode, bool bRestDay, bool bIsGraveyard
                                            , bool bCountOTFraction, int iOTFraction, int iNDFraction, int iMasterPaidBreak, bool CheckOT
                                            , DataRow[] drArrOTApproved, bool bNDCount)
        {
            int LeaveStartMin, LeaveEndMin;
            int iOTStartMin, iOTEndMin;
            int iConvTimeInExtMin, iConvTimeOutExtMin;
            int i, iAdvOTMin, iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2, iTempMultPockVar, iNDSum, iPaidBreak = 0;
            string strOTType;
            DataRow[] drArrLeaveApp = dtLeaveTable.Select("EmployeeId = '" + EmployeeId + "' AND LeaveDate = '" + ProcessDate + "' AND WithCredit = 0 AND CombinedLeave = 0 AND PaidLeave = 1"
                                                            , "LeaveType ASC, LeaveHours ASC, StartTime ASC, EndTime ASC");

            foreach (DataRow drLeave in drArrLeaveApp)
            {
                if (Convert.ToDouble(drLeave["LeaveHours"]) != 0)
                {
                    #region Leave Initialization
                    LeaveStartMin = GetMinsFromHourStr(drLeave["StartTime"].ToString());
                    LeaveEndMin   = GetMinsFromHourStr(drLeave["EndTime"].ToString());
                    if (bIsGraveyard == true)
                    {
                        if (LeaveStartMin < (iShiftTimeIn1Min - LOGPAD))
                        {
                            LeaveStartMin += GRAVEYARD24;
                        }
                        if (LeaveEndMin < (iShiftTimeOut2Min - LOGPAD))
                        {
                            LeaveEndMin += GRAVEYARD24;
                        }
                    }
                    #endregion

                    i = -1; //initial value
                    do
                    {
                        #region OT Initialization
                        i++;
                        iConvTimeInExtMin  = 0;
                        iConvTimeOutExtMin = 0;
                        iOTStartMin        = 0;
                        iOTEndMin          = 0;
                        strOTType          = "";

                        if (CheckOT == true && i < drArrOTApproved.Length)
                        {
                            iOTStartMin = GetMinsFromHourStr(drArrOTApproved[i]["Tot_StartTime"].ToString());
                            iOTEndMin = GetMinsFromHourStr(drArrOTApproved[i]["Tot_EndTime"].ToString());
                            strOTType = drArrOTApproved[i]["Tot_OvertimeType"].ToString();

                            #region OT Application Validation
                            if (strOTType.Equals("A") && iOTEndMin > iShiftTimeIn1Min)
                            {
                                AddErrorToLaborHourReport(EmployeeId, dtEmpTimeRegister.Rows[i]["Mem_LastName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_FirstName"].ToString(), dtEmpTimeRegister.Rows[i]["Mem_MiddleName"].ToString(), ProcessDate, "Wrong advance overtime application", "AE");
                                continue; //skip erroneous OT application
                            }

                            if (bIsGraveyard && strOTType.Equals("P")) //Graveyard shift and Post-overtime
                            {
                                if (iOTStartMin < (iShiftTimeIn1Min - LOGPAD))
                                {
                                    iOTStartMin += GRAVEYARD24;
                                }
                                if (iOTEndMin < (iShiftTimeOut2Min - LOGPAD))
                                {
                                    iOTEndMin += GRAVEYARD24;
                                }
                            }
                            #endregion

                            iConvTimeInExtMin = (LeaveStartMin > iOTStartMin) ? LeaveStartMin : iOTStartMin;
                            iConvTimeOutExtMin = (LeaveEndMin < iOTEndMin) ? LeaveEndMin : iOTEndMin;
                        }
                        else if (CheckOT == false)
                        {
                            iConvTimeInExtMin  = LeaveStartMin;
                            iConvTimeOutExtMin = LeaveEndMin;
                        }
                        #endregion

                        if (CheckOT == false || drArrOTApproved.Length > 0)
                        {
                            if (bRestDay) //Rest day or holiday
                            {
                                #region Computed Overtime Minutes
                                //[AM OT = Get OT between iConvTimeInExtMin and Break Start]
                                iOTTemp   = iConvTimeInExtMin;
                                //iOTTemp = (iShiftTimeIn1Min > iConvTimeInExtMin) ? iShiftTimeIn1Min : iConvTimeInExtMin;
                                iOTTemp2  = (iShiftTimeOut1Min < iConvTimeOutExtMin) ? iShiftTimeOut1Min : iConvTimeOutExtMin;
                                iAdvOTMin = GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iOTTemp, iOTTemp2);
                                if (bCountOTFraction == true)
                                {
                                    iAdvOTMin = Convert.ToInt32(iAdvOTMin / iOTFraction) * iOTFraction;
                                }
                                iComputedOvertimeMin += iAdvOTMin;

                                #region Insert Overtime to Hour Fraction Table
                                InsertOTToHourFractionTable(iOTStartMin, iOTEndMin, iOTTemp, iOTTemp2, iOTFraction, bCountOTFraction);
                                #endregion

                                //[PM OT = Get OT between Break End and iConvTimeOutExtMin]
                                iOTTemp = (iShiftTimeIn2Min > iConvTimeInExtMin) ? iShiftTimeIn2Min : iConvTimeInExtMin;
                                //iOTTemp2 = (iShiftTimeOut2Min < iConvTimeOutExtMin) ? iShiftTimeOut2Min : iConvTimeOutExtMin;
                                iOTTemp2 = iConvTimeOutExtMin;
                                iAdvOTMin = GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iOTTemp, iOTTemp2);
                                if (bCountOTFraction == true)
                                {
                                    iAdvOTMin = Convert.ToInt32(iAdvOTMin / iOTFraction) * iOTFraction;
                                }
                                iComputedOvertimeMin += iAdvOTMin;

                                #region Insert Overtime to Hour Fraction Table
                                InsertOTToHourFractionTable(iOTStartMin, iOTEndMin, iOTTemp, iOTTemp2, iOTFraction, bCountOTFraction);
                                #endregion

                                if (bCountOTFraction == false)
                                {
                                    iComputedOvertimeMin = Convert.ToInt32(iComputedOvertimeMin / iOTFraction) * iOTFraction;
                                    CorrectOTHourFraction(iComputedOvertimeMin);
                                }

                                //Paid Break for Rest day
                                if (iConvTimeInExtMin > 0 && iConvTimeOutExtMin > 0)
                                {
                                    iOTTemp = (iShiftTimeOut1Min > iOTStartMin) ? iShiftTimeOut1Min : iOTStartMin;
                                    iOTTemp2 = (iShiftTimeIn2Min < iOTEndMin) ? iShiftTimeIn2Min : iOTEndMin;
                                    iPaidBreak += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iConvTimeInExtMin, iConvTimeOutExtMin);

                                    if (iPaidBreak > iMasterPaidBreak) //Must not exceed the set paid break
                                    {
                                        iPaidBreak = iMasterPaidBreak;
                                    }
                                    else
                                    {
                                        if (MIDOT == false)
                                        {
                                            #region Insert Paid Break to Hour Fraction Table
                                            InsertOTToHourFractionTable(iOTTemp, iOTTemp2, iConvTimeInExtMin, iConvTimeOutExtMin, iOTFraction, bCountOTFraction);
                                            #endregion
                                        }
                                    }
                                }

                                if (MIDOT == true && strOTType.Equals("M"))
                                {
                                    iPaidBreak = 0;
                                }
                                #endregion

                                if (NDBRCKTCNT == 2)
                                {
                                    #region Computed Overtime Night Premium (Sharp)
                                    iTimeMinTemp  = (iConvTimeInExtMin > iOTStartMin) ? iConvTimeInExtMin : iOTStartMin;
                                    iTimeMinTemp2 = (iConvTimeOutExtMin < iOTEndMin) ? iConvTimeOutExtMin : iOTEndMin;

                                    #region ND Bracket 1
                                    //[NDOTHr = Get NDOT between NP1_BEGTIME/OT Start to NP1_ENDTIME/OT End]
                                    iOTTemp = (NP1_BEGTIME > iOTStartMin) ? NP1_BEGTIME : iOTStartMin;
                                    iOTTemp2 = (NP1_ENDTIME < iOTEndMin) ? NP1_ENDTIME : iOTEndMin;
                                    iCompRegNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2);
                                    #region Insert ND Hour to Hour Fraction Table
                                    InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                    #endregion

                                    #endregion

                                    #region ND Bracket 2
                                    //[NDOTHr = Get NDOT between NP2_BEGTIME/OT Start to NP2_ENDTIME/OT End]
                                    iOTTemp = (NP2_BEGTIME > iOTStartMin) ? NP2_BEGTIME : iOTStartMin;
                                    iOTTemp2 = (NP2_ENDTIME < iOTEndMin) ? NP2_ENDTIME : iOTEndMin;
                                    iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2);
                                    #region Insert ND Hour to Hour Fraction Table
                                    InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                    #endregion
                                    #endregion
                                    #endregion
                                }
                                else
                                {
                                    #region Computed Overtime Night Premium (Normal)
                                    iTimeMinTemp = (iConvTimeInExtMin > iOTStartMin) ? iConvTimeInExtMin : iOTStartMin;
                                    iTimeMinTemp2 = (iConvTimeOutExtMin < iOTEndMin) ? iConvTimeOutExtMin : iOTEndMin;

                                    ///OVERTIME NIGHT PREMIUM FOR DAY SHIFTS
                                    if (bNDCount && !bIsGraveyard) //HOYA
                                    {
                                        //[NDOTHr = Get NDOT between 00:00/OT Start to 06:00/OT End]
                                        iOTTemp = (NIGHTDIFFAMSTART > iOTStartMin) ? NIGHTDIFFAMSTART : iOTStartMin;
                                        iOTTemp2 = (NIGHTDIFFAMEND < iOTEndMin) ? NIGHTDIFFAMEND : iOTEndMin;
                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2);
                                        #region Insert ND Hour to Hour Fraction Table
                                        InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                        #endregion
                                    }

                                    ///OVERTIME NIGHT PREMIUM FOR GRAVEYARD SHIFTS
                                    //[NDOTHr = Get NDOT between 22:00/OT Start to 30:00/OT End]
                                    iOTTemp = (NIGHTDIFFGRAVEYARDSTART > iOTStartMin) ? NIGHTDIFFGRAVEYARDSTART : iOTStartMin;
                                    iOTTemp2 = (NIGHTDIFFGRAVEYARDEND < iOTEndMin) ? NIGHTDIFFGRAVEYARDEND : iOTEndMin;
                                    iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2);
                                    #region Insert ND Hour to Hour Fraction Table
                                    InsertNDToHourFractionTable(iOTTemp, iOTTemp2, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                    #endregion
                                    #endregion
                                }
                            }
                            else //Regular day
                            {
                                #region Computed Overtime Minutes
                                //[Get OT between iConvTimeInExtMin and iConvTimeOutExtMin]
                                iAdvOTMin = GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iConvTimeInExtMin, iConvTimeOutExtMin);
                                if (bCountOTFraction == true)
                                {
                                    iAdvOTMin = Convert.ToInt32(iAdvOTMin / iOTFraction) * iOTFraction;
                                }
                                iComputedOvertimeMin += iAdvOTMin;

                                #region Insert Overtime to Hour Fraction Table
                                InsertOTToHourFractionTable(iOTStartMin, iOTEndMin, iConvTimeInExtMin, iConvTimeOutExtMin, iOTFraction, bCountOTFraction);
                                #endregion

                                if (bCountOTFraction == false)
                                {
                                    iComputedOvertimeMin = Convert.ToInt32(iComputedOvertimeMin / iOTFraction) * iOTFraction;
                                    CorrectOTHourFraction(iComputedOvertimeMin);
                                }
                                #endregion

                                if (NDBRCKTCNT == 2)
                                {
                                    #region Computed Overtime Night Premium (Sharp)
                                    iTimeMinTemp = iConvTimeInExtMin;
                                    iTimeMinTemp2 = iConvTimeOutExtMin;

                                    if (bIsGraveyard) //Graveyard shift
                                    {
                                        #region ND Bracket 1
                                        //[NDOTHr = Get NDOT between NP1_BEGTIME to iConvTimeInExtMin]
                                        iTimeMinTemp = (NP1_BEGTIME > iTimeMinTemp) ? NP1_BEGTIME : iTimeMinTemp;
                                        iTempMultPockVar = (iConvTimeInExtMin > iShiftTimeIn1Min) ? iConvTimeInExtMin : iShiftTimeIn1Min;
                                        iCompRegNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTimeMinTemp, iTempMultPockVar);
                                        #region Insert ND Hour to Hour Fraction Table
                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTimeMinTemp, iTempMultPockVar, NDFRACTION, HourType.NDHour);
                                        #endregion

                                        //[NDOTHr = Get NDOT between iConvTimeOutExtMin to NP1_ENDTIME]
                                        iTimeMinTemp2 = (iTimeMinTemp2 < NP1_ENDTIME) ? iTimeMinTemp2 : NP1_ENDTIME;
                                        iTempMultPockVar = (iConvTimeOutExtMin < iShiftTimeOut2Min) ? iConvTimeOutExtMin : iShiftTimeOut2Min;
                                        iCompRegNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTempMultPockVar, iTimeMinTemp2);
                                        #region Insert ND Hour to Hour Fraction Table
                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTempMultPockVar, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                        #endregion
                                        #endregion

                                        #region ND Bracket 2
                                        //[NDOTHr = Get NDOT between NP2_BEGTIME to iConvTimeInExtMin]
                                        iTimeMinTemp = (NP2_BEGTIME > iTimeMinTemp) ? NP2_BEGTIME : iTimeMinTemp;
                                        iTempMultPockVar = (iConvTimeInExtMin > iShiftTimeIn1Min) ? iConvTimeInExtMin : iShiftTimeIn1Min;
                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTimeMinTemp, iTempMultPockVar);
                                        #region Insert ND Hour to Hour Fraction Table
                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTimeMinTemp, iTempMultPockVar, NDFRACTION, HourType.NDOTHour);
                                        #endregion

                                        //[NDOTHr = Get NDOT between iConvTimeOutExtMin to NP2_ENDTIME]
                                        iTimeMinTemp2 = (iTimeMinTemp2 < NP2_ENDTIME) ? iTimeMinTemp2 : NP2_ENDTIME;
                                        iTempMultPockVar = (iConvTimeOutExtMin < iShiftTimeOut2Min) ? iConvTimeOutExtMin : iShiftTimeOut2Min;
                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTempMultPockVar, iTimeMinTemp2);
                                        #region Insert ND Hour to Hour Fraction Table
                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTempMultPockVar, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                        #endregion
                                        #endregion
                                    }
                                    else
                                    {
                                        #region ND Bracket 1
                                        //[NDOTHr = Get NDOT between NP1_BEGTIME/ComputedOut2 to iConvTimeOutExtMin]
                                        iTimeMinTemp = (iTimeMinTemp > NP1_BEGTIME) ? iTimeMinTemp : NP1_BEGTIME;
                                        iOTEndMin = (iOTEndMin > NP1_ENDTIME) ? NP1_ENDTIME : iOTEndMin;
                                        iCompRegNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTimeMinTemp, iConvTimeOutExtMin);
                                        #region Insert ND Hour to Hour Fraction Table
                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTimeMinTemp, iConvTimeOutExtMin, NDFRACTION, HourType.NDHour);
                                        #endregion
                                        #endregion

                                        #region ND Bracket 2
                                        //[NDOTHr = Get NDOT between NP2_BEGTIME/ComputedOut2 to iConvTimeOutExtMin]
                                        iTimeMinTemp = (iTimeMinTemp > NP2_BEGTIME) ? iTimeMinTemp : NP2_BEGTIME;
                                        iOTEndMin = (iOTEndMin > NP2_ENDTIME) ? NP2_ENDTIME : iOTEndMin;
                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTimeMinTemp, iConvTimeOutExtMin);
                                        #region Insert ND Hour to Hour Fraction Table
                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTimeMinTemp, iConvTimeOutExtMin, NDFRACTION, HourType.NDOTHour);
                                        #endregion
                                        #endregion
                                    }
                                    #endregion
                                }
                                else
                                {
                                    #region Computed Overtime Night Premium (Normal)
                                    iTimeMinTemp  = iConvTimeInExtMin;
                                    iTimeMinTemp2 = iConvTimeOutExtMin;

                                    if (bIsGraveyard) //Graveyard shift
                                    {
                                        //[NDOTHr = Get NDOT between 22:00 to iConvTimeInExtMin]
                                        iTimeMinTemp = (NIGHTDIFFGRAVEYARDSTART > iTimeMinTemp) ? NIGHTDIFFGRAVEYARDSTART : iTimeMinTemp;
                                        iTempMultPockVar = (iConvTimeInExtMin > iShiftTimeIn1Min) ? iConvTimeInExtMin : iShiftTimeIn1Min;
                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTimeMinTemp, iTempMultPockVar);
                                        #region Insert ND Hour to Hour Fraction Table
                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTimeMinTemp, iTempMultPockVar, NDFRACTION, HourType.NDOTHour);
                                        #endregion

                                        //[NDOTHr = Get NDOT between iConvTimeOutExtMin to 30:00]
                                        iTimeMinTemp2 = (iTimeMinTemp2 < NIGHTDIFFGRAVEYARDEND) ? iTimeMinTemp2 : NIGHTDIFFGRAVEYARDEND;
                                        iTempMultPockVar = (iConvTimeOutExtMin < iShiftTimeOut2Min) ? iConvTimeOutExtMin : iShiftTimeOut2Min;
                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTempMultPockVar, iTimeMinTemp2);
                                        #region Insert ND Hour to Hour Fraction Table
                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTempMultPockVar, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                        #endregion
                                    }
                                    else
                                    {
                                        if (bNDCount && !bIsGraveyard) //HOYA
                                        {
                                            //[NDOTHr = Get NDOT between iConvTimeInExtMin to 06:00]
                                            iTimeMinTemp2 = (NIGHTDIFFAMEND < iTimeMinTemp2) ? NIGHTDIFFAMEND : iTimeMinTemp2;
                                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iConvTimeInExtMin, iTimeMinTemp2);
                                            #region Insert ND Hour to Hour Fraction Table
                                            InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iConvTimeInExtMin, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                                            #endregion
                                        }
                                        //[NDOTHr = Get NDOT between 22:00/ComputedOut2 to iConvTimeOutExtMin]
                                        iTimeMinTemp = (iTimeMinTemp > NIGHTDIFFGRAVEYARDSTART) ? iTimeMinTemp : NIGHTDIFFGRAVEYARDSTART;
                                        iOTEndMin = (iOTEndMin > NIGHTDIFFGRAVEYARDEND) ? NIGHTDIFFGRAVEYARDEND : iOTEndMin;
                                        iCompOvertimeNightPremMin += GetOTHoursInMinutes(iOTStartMin, iOTEndMin, iTimeMinTemp, iConvTimeOutExtMin);
                                        #region Insert ND Hour to Hour Fraction Table
                                        InsertNDToHourFractionTable(iOTStartMin, iOTEndMin, iTimeMinTemp, iConvTimeOutExtMin, NDFRACTION, HourType.NDOTHour);
                                        #endregion
                                    }
                                    #endregion
                                }
                            }
                        }
                    }
                    while (i < drArrOTApproved.Length - 1);

                    if (NDBRCKTCNT == 2)
                    {
                        #region Computed Regular Night Premium for Regular Day (Sharp)
                        if (!bRestDay) //Regular day
                        {
                            #region ND Bracket 1
                            //[NDHr = Get ND between iShiftTimeIn1Min to iShiftTimeOut1Min]
                            iTimeMinTemp = (LeaveStartMin > iShiftTimeIn1Min) ? LeaveStartMin : iShiftTimeIn1Min;
                            iTimeMinTemp2 = (LeaveEndMin < iShiftTimeOut1Min) ? LeaveEndMin : iShiftTimeOut1Min;
                            iCompRegNightPremMin += GetOTHoursInMinutes(NP1_BEGTIME, NP1_ENDTIME, iTimeMinTemp, iTimeMinTemp2);
                            #region Insert ND Hour to Hour Fraction Table
                            InsertNDToHourFractionTable(NP1_BEGTIME, NP1_ENDTIME, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                            #endregion

                            //[NDHr = Get ND between iShiftTimeIn2Min to iShiftTimeOut2Min]
                            iTimeMinTemp = (LeaveStartMin > iShiftTimeIn2Min) ? LeaveStartMin : iShiftTimeIn2Min;
                            iTimeMinTemp2 = (LeaveEndMin < iShiftTimeOut2Min) ? LeaveEndMin : iShiftTimeOut2Min;
                            iCompRegNightPremMin += GetOTHoursInMinutes(NP1_BEGTIME, NP1_ENDTIME, iTimeMinTemp, iTimeMinTemp2);
                            #region Insert ND Hour to Hour Fraction Table
                            InsertNDToHourFractionTable(NP1_BEGTIME, NP1_ENDTIME, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                            #endregion

                            //Break between shifts
                            iTimeMinTemp = (LeaveStartMin > iShiftTimeOut1Min) ? LeaveStartMin : iShiftTimeOut1Min;
                            iTimeMinTemp2 = (LeaveEndMin < iShiftTimeIn2Min) ? LeaveEndMin : iShiftTimeIn2Min;
                            iCompRegNightPremMin += GetOTHoursInMinutes(NP1_BEGTIME, NP1_ENDTIME, iTimeMinTemp, iTimeMinTemp2);
                            #region Insert ND Hour to Hour Fraction Table
                            InsertNDToHourFractionTable(NP1_BEGTIME, NP1_ENDTIME, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                            #endregion
                            #endregion

                            #region ND Bracket 2
                            //[NDHr = Get ND between iShiftTimeIn1Min to iShiftTimeOut1Min]
                            iTimeMinTemp = (LeaveStartMin > iShiftTimeIn1Min) ? LeaveStartMin : iShiftTimeIn1Min;
                            iTimeMinTemp2 = (LeaveEndMin < iShiftTimeOut1Min) ? LeaveEndMin : iShiftTimeOut1Min;
                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(NP2_BEGTIME, NP2_ENDTIME, iTimeMinTemp, iTimeMinTemp2);
                            #region Insert ND Hour to Hour Fraction Table
                            InsertNDToHourFractionTable(NP2_BEGTIME, NP2_ENDTIME, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                            #endregion

                            //[NDHr = Get ND between iShiftTimeIn2Min to iShiftTimeOut2Min]
                            iTimeMinTemp = (LeaveStartMin > iShiftTimeIn2Min) ? LeaveStartMin : iShiftTimeIn2Min;
                            iTimeMinTemp2 = (LeaveEndMin < iShiftTimeOut2Min) ? LeaveEndMin : iShiftTimeOut2Min;
                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(NP2_BEGTIME, NP2_ENDTIME, iTimeMinTemp, iTimeMinTemp2);
                            #region Insert ND Hour to Hour Fraction Table
                            InsertNDToHourFractionTable(NP2_BEGTIME, NP2_ENDTIME, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                            #endregion

                            //Break between shifts
                            iTimeMinTemp = (LeaveStartMin > iShiftTimeOut1Min) ? LeaveStartMin : iShiftTimeOut1Min;
                            iTimeMinTemp2 = (LeaveEndMin < iShiftTimeIn2Min) ? LeaveEndMin : iShiftTimeIn2Min;
                            iCompOvertimeNightPremMin += GetOTHoursInMinutes(NP2_BEGTIME, NP2_ENDTIME, iTimeMinTemp, iTimeMinTemp2);
                            #region Insert ND Hour to Hour Fraction Table
                            InsertNDToHourFractionTable(NP2_BEGTIME, NP2_ENDTIME, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDOTHour);
                            #endregion
                            #endregion
                        }
                        #endregion

                        #region NDFraction Filter (Sharp)
                        iCompRegNightPremMin = Convert.ToInt32((iCompRegNightPremMin / iNDFraction)) * iNDFraction;
                        iCompOvertimeNightPremMin = Convert.ToInt32((iCompOvertimeNightPremMin / iNDFraction)) * iNDFraction;
                        #endregion
                    }
                    else
                    {
                        #region Computed Regular Night Premium for Regular Day
                        if (!bRestDay) //Regular day
                        {
                            //COMPUTED REGULAR NIGHT PREMIUM MIN
                            if (bNDCount && !bIsGraveyard) //HOYA
                            {
                                //[NDHr = Get ND between iShiftTimeIn1Min to iShiftTimeOut1Min]
                                iTimeMinTemp = (LeaveStartMin > iShiftTimeIn1Min) ? LeaveStartMin : iShiftTimeIn1Min;
                                iTimeMinTemp2 = (LeaveEndMin < iShiftTimeOut1Min) ? LeaveEndMin : iShiftTimeOut1Min;
                                iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iTimeMinTemp, iTimeMinTemp2);
                                #region Insert ND Hour to Hour Fraction Table
                                InsertNDToHourFractionTable(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                #endregion

                                //[NDHr = Get ND between iShiftTimeIn2Min to iShiftTimeOut2Min]
                                iTimeMinTemp = (LeaveStartMin > iShiftTimeIn2Min) ? LeaveStartMin : iShiftTimeIn2Min;
                                iTimeMinTemp2 = (LeaveEndMin < iShiftTimeOut2Min) ? LeaveEndMin : iShiftTimeOut2Min;
                                iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iTimeMinTemp, iTimeMinTemp2);
                                #region Insert ND Hour to Hour Fraction Table
                                InsertNDToHourFractionTable(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                #endregion
                            }

                            //[NDHr = Get ND between iShiftTimeIn1Min to iShiftTimeOut1Min]
                            iTimeMinTemp = (LeaveStartMin > iShiftTimeIn1Min) ? LeaveStartMin : iShiftTimeIn1Min;
                            iTimeMinTemp2 = (LeaveEndMin < iShiftTimeOut1Min) ? LeaveEndMin : iShiftTimeOut1Min;
                            iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iTimeMinTemp, iTimeMinTemp2);
                            #region Insert ND Hour to Hour Fraction Table
                            InsertNDToHourFractionTable(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                            #endregion

                            //[NDHr = Get ND between iShiftTimeIn2Min to iShiftTimeOut2Min]
                            iTimeMinTemp = (LeaveStartMin > iShiftTimeIn2Min) ? LeaveStartMin : iShiftTimeIn2Min;
                            iTimeMinTemp2 = (LeaveEndMin < iShiftTimeOut2Min) ? LeaveEndMin : iShiftTimeOut2Min;
                            iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iTimeMinTemp, iTimeMinTemp2);
                            #region Insert ND Hour to Hour Fraction Table
                            InsertNDToHourFractionTable(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                            #endregion

                            //Break between shifts
                            iTimeMinTemp = (LeaveStartMin > iShiftTimeOut1Min) ? LeaveStartMin : iShiftTimeOut1Min;
                            iTimeMinTemp2 = (LeaveEndMin < iShiftTimeIn2Min) ? LeaveEndMin : iShiftTimeIn2Min;
                            if (bNDCount && !bIsGraveyard) //HOYA
                            {
                                iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iTimeMinTemp, iTimeMinTemp2);
                                #region Insert ND Hour to Hour Fraction Table
                                InsertNDToHourFractionTable(NIGHTDIFFAMSTART, NIGHTDIFFAMEND, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                                #endregion
                            }
                            iCompRegNightPremMin += GetOTHoursInMinutes(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iTimeMinTemp, iTimeMinTemp2);
                            #region Insert ND Hour to Hour Fraction Table
                            InsertNDToHourFractionTable(NIGHTDIFFGRAVEYARDSTART, NIGHTDIFFGRAVEYARDEND, iTimeMinTemp, iTimeMinTemp2, NDFRACTION, HourType.NDHour);
                            #endregion
                        }
                        #endregion

                        #region NDFraction Filter
                        iCompRegNightPremMin = Convert.ToInt32((iCompRegNightPremMin / iNDFraction)) * iNDFraction;
                        iCompOvertimeNightPremMin = Convert.ToInt32((iCompOvertimeNightPremMin / iNDFraction)) * iNDFraction;
                        ////HOYA
                        if (strDayCode.Equals("REG5") || (Convert.ToBoolean(NDALL))) //&& bRestDay)) //Commented (10/6/2015)
                        {
                            iNDSum = iCompRegNightPremMin + iCompOvertimeNightPremMin;
                            if (iNDSum > 8 * 60)
                            {
                                iCompRegNightPremMin = 8 * 60; //ND hours is set to 8 hours
                                iCompOvertimeNightPremMin = iNDSum - iCompRegNightPremMin; //excess 8 hours is set to NDOT hours
                            }
                            else
                            {
                                iCompRegNightPremMin = iNDSum; //all ND and NDOT hours to ND premium
                                iCompOvertimeNightPremMin = 0; //no NDOT hours
                            }
                        }
                        #endregion
                    }
                }
            }
        }

        public DataRow[] GetCorrectedLeaveRecords(string EmployeeId, string ProcessDate, bool PaidLeave, bool bIsGraveyard, int iShiftTimeIn1Min, int iShiftTimeOut2Min)
        {
            DataRow[] drArrLeaveApp;
            int iStartLeave1, iEndLeave1;
            int iStartLeave2, iEndLeave2;
            int iStartLeaveMin, iEndLeaveMax;

            if (PaidLeave == true)
                drArrLeaveApp = dtLeaveTable.Select("EmployeeId = '" + EmployeeId + "' AND LeaveDate = '" + ProcessDate + "'"
                                                                , "LeaveType ASC, LeaveHours ASC, StartTime ASC, EndTime ASC");
            else
                drArrLeaveApp = dtUnpaidLeaveTable.Select("EmployeeId = '" + EmployeeId + "' AND LeaveDate = '" + ProcessDate + "'"
                                                            , "LeaveType ASC, LeaveHours ASC, StartTime ASC, EndTime ASC");

            if (drArrLeaveApp.Length > 1)
            {
                for (int i = 0; i < drArrLeaveApp.Length; i++)
                {
                    iStartLeave1 = GetMinsFromHourStr(drArrLeaveApp[i]["StartTime"].ToString());
                    iEndLeave1 = GetMinsFromHourStr(drArrLeaveApp[i]["EndTime"].ToString());

                    if (iStartLeave1 != 0 && iEndLeave1 != 0 && bIsGraveyard) //Graveyard shift 
                    {
                        if (iStartLeave1 < (iShiftTimeIn1Min - LOGPAD))
                        {
                            iStartLeave1 += GRAVEYARD24;
                        }
                        if (iEndLeave1 < (iShiftTimeOut2Min - LOGPAD))
                        {
                            iEndLeave1 += GRAVEYARD24;
                        }
                    }

                    for (int j = 0; j < drArrLeaveApp.Length; j++)
                    {
                        if (i != j)
                        {
                            iStartLeave2 = GetMinsFromHourStr(drArrLeaveApp[j]["StartTime"].ToString());
                            iEndLeave2 = GetMinsFromHourStr(drArrLeaveApp[j]["EndTime"].ToString());

                            if (iStartLeave2 != 0 && iEndLeave2 != 0 && iStartLeave1 != 0 && iEndLeave1 != 0
                                && bIsGraveyard) //Graveyard shift
                            {
                                if (iStartLeave2 < (iShiftTimeIn1Min - LOGPAD))
                                {
                                    iStartLeave2 += GRAVEYARD24;
                                }
                                if (iEndLeave2 < (iShiftTimeOut2Min - LOGPAD))
                                {
                                    iEndLeave2 += GRAVEYARD24;
                                }
                            }

                            if (iStartLeave1 != 0 && iStartLeave2 != 0)
                                iStartLeaveMin = Math.Min(iStartLeave1, iStartLeave2);
                            else
                                iStartLeaveMin = iStartLeave1;
                            if (iEndLeave1 != 0 && iEndLeave2 != 0)
                                iEndLeaveMax = Math.Max(iEndLeave1, iEndLeave2);
                            else
                                iEndLeaveMax = iEndLeave1;

                            //remove cancelled leave
                            if (i < drArrLeaveApp.Length
                                    && Convert.ToDouble(drArrLeaveApp[i]["LeaveHours"]) != 0 && Convert.ToDouble(drArrLeaveApp[j]["LeaveHours"]) != 0
                                    && drArrLeaveApp[i]["LeaveType"].ToString().Equals(drArrLeaveApp[j]["LeaveType"].ToString())
                                    && drArrLeaveApp[i]["StartTime"].ToString().Equals(drArrLeaveApp[j]["StartTime"].ToString())
                                    && drArrLeaveApp[i]["EndTime"].ToString().Equals(drArrLeaveApp[j]["EndTime"].ToString())
                                    && Convert.ToDouble(drArrLeaveApp[i]["LeaveHours"]) + Convert.ToDouble(drArrLeaveApp[j]["LeaveHours"]) == 0)
                            {
                                drArrLeaveApp[i]["StartTime"]   = "0000";
                                drArrLeaveApp[i]["EndTime"]     = "0000";
                                drArrLeaveApp[i]["LeaveHours"]  = 0;
                                drArrLeaveApp[j]["StartTime"]   = "0000";
                                drArrLeaveApp[j]["EndTime"]     = "0000";
                                drArrLeaveApp[j]["LeaveHours"]  = 0;
                                break;
                            }
                            //remove duplicate
                            if (i < drArrLeaveApp.Length
                                    && Convert.ToDouble(drArrLeaveApp[i]["LeaveHours"]) != 0 && Convert.ToDouble(drArrLeaveApp[j]["LeaveHours"]) != 0
                                    && drArrLeaveApp[i]["LeaveType"].ToString().Equals(drArrLeaveApp[j]["LeaveType"].ToString())
                                    && drArrLeaveApp[i]["StartTime"].ToString().Equals(drArrLeaveApp[j]["StartTime"].ToString())
                                    && drArrLeaveApp[i]["EndTime"].ToString().Equals(drArrLeaveApp[j]["EndTime"].ToString())
                                    && Convert.ToDouble(drArrLeaveApp[i]["LeaveHours"]) == Convert.ToDouble(drArrLeaveApp[j]["LeaveHours"]))
                            {
                                drArrLeaveApp[j]["StartTime"]   = "0000";
                                drArrLeaveApp[j]["EndTime"]     = "0000";
                                drArrLeaveApp[j]["LeaveHours"]  = 0;
                                break;
                            }
                            //update overlapping records
                            if (i < drArrLeaveApp.Length
                                    && Convert.ToDouble(drArrLeaveApp[i]["LeaveHours"]) > 0 && Convert.ToDouble(drArrLeaveApp[j]["LeaveHours"]) > 0 //not cancelled
                                    && (iEndLeave1 >= iStartLeave2 && iEndLeave2 >= iStartLeave1)
                                    && drArrLeaveApp[i]["LeaveType"].ToString().Equals(drArrLeaveApp[j]["LeaveType"].ToString())) //overlap
                            {
                                drArrLeaveApp[i]["StartTime"]   = GetHourStrFromMins(iStartLeaveMin);
                                drArrLeaveApp[i]["EndTime"]     = GetHourStrFromMins(iEndLeaveMax);
                                drArrLeaveApp[i]["LeaveHours"]  = Convert.ToDouble(drArrLeaveApp[i]["LeaveHours"]) + Convert.ToDouble(drArrLeaveApp[j]["LeaveHours"]);
                                drArrLeaveApp[j]["StartTime"]   = "0000";
                                drArrLeaveApp[j]["EndTime"]     = "0000";
                                drArrLeaveApp[j]["LeaveHours"]  = 0;
                                iStartLeave1 = iStartLeaveMin;
                                iEndLeave1 = iEndLeaveMax;
                            }
                        }
                    }
                }
            }

            return drArrLeaveApp;
        }

        public DataRow[] GetCorrectedLeaveRecordsMultPockets(string EmployeeId, string ProcessDate, bool PaidLeave, bool bIsGraveyard, int iShiftTimeIn1Min, int iShiftTimeOut2Min)
        {
            DataRow[] drArrLeaveApp;
            int iStartLeave1, iEndLeave1;
            int iStartLeave2, iEndLeave2;
            int iStartLeaveMin, iEndLeaveMax;

            if (PaidLeave == true)
            {
                if (bIsGraveyard)
                    drArrLeaveApp = dtLeaveTable.Select("EmployeeId = '" + EmployeeId + "' AND LeaveDate = '" + ProcessDate + "'"
                                                            , "LeaveType ASC, LeaveHours ASC, StartTime DESC, EndTime DESC");
                else
                    drArrLeaveApp = dtLeaveTable.Select("EmployeeId = '" + EmployeeId + "' AND LeaveDate = '" + ProcessDate + "'"
                                                            , "LeaveType ASC, LeaveHours ASC, StartTime ASC, EndTime ASC");
            }

            else
                drArrLeaveApp = dtUnpaidLeaveTable.Select("EmployeeId = '" + EmployeeId + "' AND LeaveDate = '" + ProcessDate + "'"
                                                            , "LeaveType ASC, LeaveHours ASC, StartTime ASC, EndTime ASC");

            if (drArrLeaveApp.Length > 1)
            {
                for (int i = 0; i < drArrLeaveApp.Length; i++)
                {
                    iStartLeave1 = GetMinsFromHourStr(drArrLeaveApp[i]["StartTime"].ToString());
                    iEndLeave1 = GetMinsFromHourStr(drArrLeaveApp[i]["EndTime"].ToString());

                    if (iStartLeave1 != 0 && iEndLeave1 != 0 && bIsGraveyard) //Graveyard shift 
                    {
                        if (iStartLeave1 < (iShiftTimeIn1Min - LOGPAD))
                        {
                            iStartLeave1 += GRAVEYARD24;
                        }
                        if (iEndLeave1 < (iShiftTimeOut2Min - LOGPAD))
                        {
                            iEndLeave1 += GRAVEYARD24;
                        }
                    }

                    for (int j = 0; j < drArrLeaveApp.Length; j++)
                    {
                        if (i != j)
                        {
                            iStartLeave2 = GetMinsFromHourStr(drArrLeaveApp[j]["StartTime"].ToString());
                            iEndLeave2 = GetMinsFromHourStr(drArrLeaveApp[j]["EndTime"].ToString());

                            if (iStartLeave2 != 0 && iEndLeave2 != 0 && iStartLeave1 != 0 && iEndLeave1 != 0
                                && bIsGraveyard) //Graveyard shift
                            {
                                if (iStartLeave2 < (iShiftTimeIn1Min - LOGPAD))
                                {
                                    iStartLeave2 += GRAVEYARD24;
                                }
                                if (iEndLeave2 < (iShiftTimeOut2Min - LOGPAD))
                                {
                                    iEndLeave2 += GRAVEYARD24;
                                }
                            }

                            if (iStartLeave1 != 0 && iStartLeave2 != 0)
                                iStartLeaveMin = Math.Min(iStartLeave1, iStartLeave2);
                            else
                                iStartLeaveMin = iStartLeave1;
                            if (iEndLeave1 != 0 && iEndLeave2 != 0)
                                iEndLeaveMax = Math.Max(iEndLeave1, iEndLeave2);
                            else
                                iEndLeaveMax = iEndLeave1;

                            //remove cancelled leave
                            if (i < drArrLeaveApp.Length
                                    && Convert.ToDouble(drArrLeaveApp[i]["LeaveHours"]) != 0 && Convert.ToDouble(drArrLeaveApp[j]["LeaveHours"]) != 0
                                    && drArrLeaveApp[i]["LeaveType"].ToString().Equals(drArrLeaveApp[j]["LeaveType"].ToString())
                                    && drArrLeaveApp[i]["StartTime"].ToString().Equals(drArrLeaveApp[j]["StartTime"].ToString())
                                    && drArrLeaveApp[i]["EndTime"].ToString().Equals(drArrLeaveApp[j]["EndTime"].ToString())
                                    && Convert.ToDouble(drArrLeaveApp[i]["LeaveHours"]) + Convert.ToDouble(drArrLeaveApp[j]["LeaveHours"]) == 0)
                            {
                                drArrLeaveApp[i]["StartTime"]       = "0000";
                                drArrLeaveApp[i]["EndTime"]         = "0000";
                                drArrLeaveApp[i]["LeaveHours"]      = 0;
                                drArrLeaveApp[j]["StartTime"]       = "0000";
                                drArrLeaveApp[j]["EndTime"]         = "0000";
                                drArrLeaveApp[j]["LeaveHours"]      = 0;
                                break;
                            }
                            //remove duplicate
                            if (i < drArrLeaveApp.Length
                                    && Convert.ToDouble(drArrLeaveApp[i]["LeaveHours"]) != 0 && Convert.ToDouble(drArrLeaveApp[j]["LeaveHours"]) != 0
                                    && drArrLeaveApp[i]["LeaveType"].ToString().Equals(drArrLeaveApp[j]["LeaveType"].ToString())
                                    && drArrLeaveApp[i]["StartTime"].ToString().Equals(drArrLeaveApp[j]["StartTime"].ToString())
                                    && drArrLeaveApp[i]["EndTime"].ToString().Equals(drArrLeaveApp[j]["EndTime"].ToString())
                                    && Convert.ToDouble(drArrLeaveApp[i]["LeaveHours"]) == Convert.ToDouble(drArrLeaveApp[j]["LeaveHours"]))
                            {
                                drArrLeaveApp[j]["StartTime"]       = "0000";
                                drArrLeaveApp[j]["EndTime"]         = "0000";
                                drArrLeaveApp[j]["LeaveHours"]      = 0;
                                break;
                            }
                            //update overlapping records
                            if (i < drArrLeaveApp.Length
                                    && Convert.ToDouble(drArrLeaveApp[i]["LeaveHours"]) > 0 && Convert.ToDouble(drArrLeaveApp[j]["LeaveHours"]) > 0 //not cancelled
                                    && (iEndLeave1 >= iStartLeave2 && iEndLeave2 >= iStartLeave1)
                                    && drArrLeaveApp[i]["LeaveType"].ToString().Equals(drArrLeaveApp[j]["LeaveType"].ToString())) //overlap
                            {
                                drArrLeaveApp[i]["StartTime"]       = GetHourStrFromMins(iStartLeaveMin);
                                drArrLeaveApp[i]["EndTime"]         = GetHourStrFromMins(iEndLeaveMax);
                                drArrLeaveApp[i]["LeaveHours"]      = Convert.ToDouble(drArrLeaveApp[i]["LeaveHours"]) + Convert.ToDouble(drArrLeaveApp[j]["LeaveHours"]);
                                drArrLeaveApp[j]["StartTime"]       = "0000";
                                drArrLeaveApp[j]["EndTime"]         = "0000";
                                drArrLeaveApp[j]["LeaveHours"]      = 0;
                                iStartLeave1                        = iStartLeaveMin;
                                iEndLeave1                          = iEndLeaveMax;
                            }
                        }
                    }
                }
            }

            return drArrLeaveApp;
        }

        public void AdjustLeaveBasedOnShift(DataRow[] drArrLeaveApp, string EmployeeId, string ProcessDate, int iShiftTimeIn1Min, int iShiftTimeOut1Min, int iShiftTimeIn2Min, int iShiftTimeOut2Min)
        {
            int iLeaveStartMin;
            int iLeaveEndMin;
            for (int iLve = 0; iLve < drArrLeaveApp.Length; iLve++)
            {
                iLeaveStartMin = GetMinsFromHourStr(drArrLeaveApp[iLve]["StartTime"].ToString());
                iLeaveEndMin = GetMinsFromHourStr(drArrLeaveApp[iLve]["EndTime"].ToString());
                if (iLeaveStartMin != 0 && iLeaveEndMin != 0)
                {
                    if (drArrLeaveApp[iLve]["DayUnit"].ToString().Equals("WH") && !drArrLeaveApp[iLve]["LeaveType"].ToString().Equals("OB"))
                    {
                        drArrLeaveApp[iLve]["StartTime"] = GetHourStrFromMins(iShiftTimeIn1Min);
                        drArrLeaveApp[iLve]["EndTime"]   = GetHourStrFromMins(iShiftTimeOut2Min);
                    }
                }
            }
        }

        public void CorrectConvertedTimeWithExtRegLveFlag(DataRow[] drArrLeaveApp
                                                            , ref int iConvTimeIn1Min, ref int iConvTimeOut1Min, ref int iConvTimeIn2Min, ref int iConvTimeOut2Min
                                                            , int iShiftTimeIn1Min, int iShiftTimeOut1Min, int iShiftTimeIn2Min, int iShiftTimeOut2Min
                                                            , int iShiftMin, DataRow[] drArrOTApproved, bool bIsGraveyard)
        {
            int iLeaveStartMin;
            int iLeaveEndMin;
            int iTimeTemp;
            for (int iLve = 0; iLve < drArrLeaveApp.Length; iLve++)
            {
                #region Leave Initialization
                iLeaveStartMin = GetMinsFromHourStr(drArrLeaveApp[iLve]["StartTime"].ToString());
                iLeaveEndMin = GetMinsFromHourStr(drArrLeaveApp[iLve]["EndTime"].ToString());
                if (bIsGraveyard == true)
                {
                    if (iLeaveStartMin < (iShiftTimeIn1Min - LOGPAD))
                    {
                        iLeaveStartMin += GRAVEYARD24;
                    }
                    if (iLeaveEndMin < (iShiftTimeOut2Min - LOGPAD))
                    {
                        iLeaveEndMin += GRAVEYARD24;
                    }
                }
                #endregion

                if (iLeaveStartMin != 0 && iLeaveEndMin != 0 && drArrLeaveApp[iLve]["LeaveType"].ToString() != "OB")
                {
                    if (drArrLeaveApp[iLve]["DayUnit"].ToString().Equals("WH")
                        || Convert.ToDouble(drArrLeaveApp[iLve]["LeaveHours"]) == (double)(iShiftMin / 60.0))
                    {
                        #region Whole Day
                        //Allow OT during leave
                        if (iConvTimeIn1Min > 0 && iConvTimeIn1Min < iShiftTimeIn1Min && drArrOTApproved.Length > 0
                            && drArrOTApproved[0]["Tot_OvertimeType"].ToString() == "A") //early OT
                        {
                            //iConvTimeOut1Min = iShiftTimeIn1Min;
                        }
                        else
                        {
                            if (iConvTimeOut2Min > 0 && iConvTimeOut2Min > iShiftTimeOut2Min && drArrOTApproved.Length > 0
                                && drArrOTApproved[drArrOTApproved.Length - 1]["Tot_OvertimeType"].ToString() == "P") //post OT
                            {
                                //iConvTimeIn2Min = iShiftTimeOut2Min;
                            }
                            else
                            {
                                iConvTimeIn1Min = 0;
                                iConvTimeOut1Min = 0;
                                iConvTimeIn2Min = 0;
                                iConvTimeOut2Min = 0;
                            }
                        }
                        #endregion
                    }
                    else if (drArrLeaveApp[iLve]["DayUnit"].ToString().Equals("H1"))
                    {
                        #region Half Day AM
                        //Allow OT during leave
                        if (iConvTimeIn1Min > 0 && iConvTimeIn1Min < iShiftTimeIn1Min && drArrOTApproved.Length > 0
                            && drArrOTApproved[0]["Tot_OvertimeType"].ToString() == "A") //early OT
                        {
                            //iConvTimeOut1Min = iShiftTimeIn1Min;
                            //if (iConvTimeOut2Min > 0 && iConvTimeIn2Min == 0)
                            //    iConvTimeIn2Min = iShiftTimeIn2Min;
                        }
                        else
                        {
                            if (Math.Max(iConvTimeIn1Min, iConvTimeIn2Min) < iShiftTimeIn2Min)
                            {
                                iConvTimeIn1Min = Math.Max(Math.Max(iConvTimeIn1Min, iConvTimeIn2Min), iShiftTimeOut1Min); //unpaid break is included for MIDOT purposes
                                iConvTimeOut1Min = 0;
                                iConvTimeIn2Min = 0;
                            }
                            else
                            {
                                iConvTimeIn2Min = Math.Max(iConvTimeIn1Min, iConvTimeIn2Min);
                                iConvTimeIn1Min = 0;
                                iConvTimeOut1Min = 0;
                            }
                        }
                        #endregion
                    }
                    else if (drArrLeaveApp[iLve]["DayUnit"].ToString().Equals("H2"))
                    {
                        #region Half Day PM
                        //Allow OT during leave
                        if (iConvTimeOut2Min > 0 && iConvTimeOut2Min > iShiftTimeOut2Min && drArrOTApproved.Length > 0
                            && drArrOTApproved[drArrOTApproved.Length - 1]["Tot_OvertimeType"].ToString() == "P") //post OT
                        {
                            //iConvTimeIn2Min = iShiftTimeOut2Min;
                            //if (iConvTimeIn1Min > 0 && iConvTimeOut1Min == 0)
                            //    iConvTimeOut1Min = iShiftTimeOut1Min;
                        }
                        else
                        {
                            iConvTimeOut2Min = Math.Min(Math.Max(iConvTimeOut1Min, iConvTimeOut2Min), iShiftTimeIn2Min); //unpaid break is included for MIDOT purposes
                            iConvTimeOut1Min = 0;
                            iConvTimeIn2Min = 0;
                        }
                        #endregion
                    }
                    else if (Convert.ToBoolean(FLEXSHIFT) == false) //Logic is only applicable if Not Flex Shift
                    {
                        #region Hourly
                        //Leave starts at beginning of shift and ends before/after breaktime
                        if (iLeaveStartMin == iShiftTimeIn1Min)
                        {
                            if (((iConvTimeIn1Min > 0) ? iConvTimeIn1Min : iConvTimeIn2Min) > 0)
                            {
                                iTimeTemp = Math.Max(iLeaveEndMin, ((iConvTimeIn1Min > 0) ? iConvTimeIn1Min : iConvTimeIn2Min));
                                if (iTimeTemp < iShiftTimeOut1Min)
                                {
                                    iConvTimeIn1Min = iTimeTemp;
                                    //iConvTimeIn2Min = 0;
                                }
                                else
                                {
                                    iConvTimeIn1Min = 0;
                                    iConvTimeIn2Min = iTimeTemp;
                                }
                            }
                        }
                        //Leave starts before/after breaktime towards end of shift
                        else if (iLeaveEndMin == iShiftTimeOut2Min)
                        {
                            if (((iConvTimeOut2Min > 0) ? iConvTimeOut2Min : iConvTimeOut1Min) > 0)
                            {
                                iTimeTemp = Math.Min(iLeaveStartMin, ((iConvTimeOut2Min > 0) ? iConvTimeOut2Min : iConvTimeOut1Min));
                                if (iTimeTemp <= iShiftTimeOut1Min)
                                {
                                    iConvTimeOut1Min = iTimeTemp;
                                    iConvTimeOut2Min = 0;
                                }
                                else
                                {
                                    iConvTimeOut1Min = 0;
                                    iConvTimeOut2Min = iTimeTemp;
                                    if (iConvTimeIn1Min > 0 && iConvTimeIn2Min > 0)
                                        iConvTimeIn2Min = 0;
                                }
                            }
                        }
                        //Leave starts at middle of the shift and ends before/after breaktime
                        else if (iLeaveStartMin > iShiftTimeIn1Min && iLeaveEndMin < iShiftTimeOut2Min)
                        {
                            //IN
                            if (((iConvTimeIn1Min > 0) ? iConvTimeIn1Min : iConvTimeIn2Min) > 0)
                            {
                                iTimeTemp = Math.Max(iLeaveEndMin, ((iConvTimeIn2Min > 0) ? iConvTimeIn2Min : iConvTimeIn1Min));
                                if (iTimeTemp < iShiftTimeOut1Min)
                                    iConvTimeIn1Min = iTimeTemp;
                                else
                                    iConvTimeIn2Min = iTimeTemp;
                            }
                            //OUT
                            if (((iConvTimeOut2Min > 0) ? iConvTimeOut2Min : iConvTimeOut1Min) > 0)
                            {
                                iTimeTemp = Math.Min(iLeaveStartMin, ((iConvTimeOut1Min > 0) ? iConvTimeOut1Min : iConvTimeOut2Min));
                                if (iTimeTemp <= iShiftTimeOut1Min && iTimeTemp > iConvTimeIn1Min)
                                {
                                    iConvTimeOut1Min = iTimeTemp;
                                }
                                else if (iTimeTemp > iShiftTimeOut1Min && iTimeTemp > ((iConvTimeIn2Min > 0) ? iConvTimeIn2Min : iConvTimeIn1Min))
                                {
                                    iConvTimeOut2Min = iTimeTemp;
                                    if (iConvTimeIn1Min > 0 && iConvTimeIn2Min > 0 && iConvTimeIn2Min > iShiftTimeIn2Min)
                                        iConvTimeOut1Min = iShiftTimeOut1Min;
                                }
                            }
                        }
                        #endregion
                    }
                }
            }
        }


        public void CorrectConvertedTimeWithExtRegLveFlagMultPockets(DataRow[] drArrLeaveApp
                                                            , ref int iConvTimeInExtMin, ref int iConvTimeOutExtMin
                                                            , int iShiftTimeIn1Min, int iShiftTimeOut1Min, int iShiftTimeIn2Min, int iShiftTimeOut2Min
                                                            , int iShiftMin, DataRow[] drArrOTApproved, bool bIsGraveyard)
        {
            int iLeaveStartMin;
            int iLeaveEndMin;
            int iTimeTemp;
            for (int iLve = 0; iLve < drArrLeaveApp.Length; iLve++)
            {
                #region Leave Initialization
                iLeaveStartMin = GetMinsFromHourStr(drArrLeaveApp[iLve]["StartTime"].ToString());
                iLeaveEndMin = GetMinsFromHourStr(drArrLeaveApp[iLve]["EndTime"].ToString());

                if (bIsGraveyard == true)
                {
                    if (iLeaveStartMin < (iShiftTimeIn1Min - LOGPAD))
                    {
                        iLeaveStartMin += GRAVEYARD24;
                    }
                    if (iLeaveEndMin < (iShiftTimeOut2Min - LOGPAD))
                    {
                        iLeaveEndMin += GRAVEYARD24;
                    }
                }
                #endregion

                if (iLeaveStartMin != 0 && iLeaveEndMin != 0 && Convert.ToBoolean(drArrLeaveApp[iLve]["FileWithinShift"]))
                {
                    if (drArrLeaveApp[iLve]["DayUnit"].ToString().Equals("WH")
                        || Convert.ToDouble(drArrLeaveApp[iLve]["LeaveHours"]) == (double)(iShiftMin / 60.0))
                    {
                        #region Whole Day
                        ////Allow OT during leave
                        //if (iConvTimeIn1Min > 0 && iConvTimeIn1Min < iShiftTimeIn1Min && drArrOTApproved.Length > 0
                        //    && drArrOTApproved[0]["Tot_OvertimeType"].ToString() == "A") //early OT
                        //{
                        //    //iConvTimeOut1Min = iShiftTimeIn1Min;
                        //}
                        //else
                        //{
                        //    if (iConvTimeOut2Min > 0 && iConvTimeOut2Min > iShiftTimeOut2Min && drArrOTApproved.Length > 0
                        //        && drArrOTApproved[drArrOTApproved.Length - 1]["Tot_OvertimeType"].ToString() == "P") //post OT
                        //    {
                        //        //iConvTimeIn2Min = iShiftTimeOut2Min;
                        //    }
                        //    else
                        //    {
                                    iConvTimeInExtMin = 0;
                                    iConvTimeOutExtMin = 0;
                            //}
                        //}
                        #endregion
                    }
                    else if (drArrLeaveApp[iLve]["DayUnit"].ToString().Equals("H1"))
                    {
                        #region Half Day AM
                        //Allow OT during leave
                        if (iConvTimeInExtMin > 0 && iConvTimeInExtMin < iShiftTimeIn1Min && drArrOTApproved.Length > 0
                            && drArrOTApproved[0]["Tot_OvertimeType"].ToString() == "A") //early OT
                        {
                            //iConvTimeOut1Min = iShiftTimeIn1Min;
                            //if (iConvTimeOut2Min > 0 && iConvTimeIn2Min == 0)
                            //    iConvTimeIn2Min = iShiftTimeIn2Min;
                        }
                        else
                        {
                            if (iConvTimeInExtMin < iShiftTimeIn2Min)
                            {
                                iConvTimeInExtMin = Math.Max(iConvTimeInExtMin, iShiftTimeOut1Min); //unpaid break is included for MIDOT purposes
                                //iConvTimeOut1Min = 0;
                                //iConvTimeIn2Min = 0;
                            }
                            //else
                            //{
                            //    iConvTimeIn2Min = Math.Max(iConvTimeIn1Min, iConvTimeIn2Min);
                            //    iConvTimeIn1Min = 0;
                            //    iConvTimeOut1Min = 0;
                            //}
                        }
                        #endregion
                    }
                    else if (drArrLeaveApp[iLve]["DayUnit"].ToString().Equals("H2"))
                    {
                        #region Half Day PM
                        //Allow OT during leave
                        if (iConvTimeOutExtMin > 0 && iConvTimeOutExtMin > iShiftTimeOut2Min && drArrOTApproved.Length > 0
                            && drArrOTApproved[drArrOTApproved.Length - 1]["Tot_OvertimeType"].ToString() == "P") //post OT
                        {
                            //iConvTimeIn2Min = iShiftTimeOut2Min;
                            //if (iConvTimeIn1Min > 0 && iConvTimeOut1Min == 0)
                            //    iConvTimeOut1Min = iShiftTimeOut1Min;
                        }
                        else
                        {
                            iConvTimeOutExtMin = Math.Min(iConvTimeOutExtMin, iShiftTimeIn2Min); //unpaid break is included for MIDOT purposes
                            //iConvTimeOut1Min = 0;
                            //iConvTimeIn2Min = 0;
                        }
                        #endregion
                    }
                    else if (Convert.ToBoolean(FLEXSHIFT) == false) //Logic is only applicable if Not Flex Shift
                    {
                        #region Hourly
                        ////Leave starts at beginning of shift and ends before/after breaktime
                        if (iLeaveStartMin == iShiftTimeIn1Min || iLeaveStartMin == iShiftTimeIn2Min)
                        {
                            //if (iConvTimeInExtMin > iLeaveStartMin)
                            //iConvTimeInExtMin = iLeaveStartMin;

                            if (iConvTimeInExtMin > 0)
                            {
                                iTimeTemp = Math.Max(iLeaveEndMin, iConvTimeInExtMin);
                                iConvTimeInExtMin = iTimeTemp;
                            }
                        }

                        //Leave starts before/after breaktime towards end of shift
                        if (iLeaveEndMin == iShiftTimeOut1Min || iLeaveEndMin == iShiftTimeOut2Min)
                        {
                            //if (iConvTimeOutExtMin > iLeaveEndMin)
                            //iConvTimeOutExtMin = iLeaveEndMin;
                            if (iConvTimeOutExtMin > 0)
                            {
                                iTimeTemp = Math.Min(iLeaveStartMin, iConvTimeOutExtMin);
                                iConvTimeOutExtMin = iTimeTemp;
                            }
                        }

                        //Leave starts at middle of the shift and ends before/after breaktime
                        if (iLeaveStartMin > iShiftTimeIn1Min && iLeaveEndMin < iShiftTimeOut2Min)
                        {

                            if (GetOTHoursInMinutes(iConvTimeInExtMin, iConvTimeOutExtMin, iLeaveStartMin, iLeaveEndMin) > 0)
                            {
                                //IN
                                if (iConvTimeInExtMin > 0 && (iConvTimeInExtMin > iLeaveStartMin))
                                {
                                    iTimeTemp = Math.Max(iLeaveEndMin, iConvTimeInExtMin);
                                    iConvTimeInExtMin = iTimeTemp;
                                }

                                //OUT
                                if (iConvTimeOutExtMin > 0 && iConvTimeOutExtMin < iShiftTimeOut2Min
                                    && iConvTimeInExtMin < iLeaveStartMin)
                                {
                                    iTimeTemp = Math.Min(iLeaveStartMin, iConvTimeOutExtMin);
                                    iConvTimeOutExtMin = iTimeTemp;
                                }
                            }
                            
                        }
                        #endregion
                    }
                }
            }
        }

        public int GetLeaveMinsInReg(DataRow[] drArrLeaveApp
                                    , int iConvTimeInExtMin, int iConvTimeOutExtMin
                                    , int iShiftTimeIn1Min, int iShiftTimeOut1Min, int iShiftTimeIn2Min, int iShiftTimeOut2Min
                                    , bool bIsGraveyard)
        {
            int LeaveMins = 0;
            int iLeaveStartMin;
            int iLeaveEndMin;
            for (int iLve = 0; iLve < drArrLeaveApp.Length; iLve++)
            {
                #region Leave Initialization
                iLeaveStartMin = GetMinsFromHourStr(drArrLeaveApp[iLve]["StartTime"].ToString());
                iLeaveEndMin = GetMinsFromHourStr(drArrLeaveApp[iLve]["EndTime"].ToString());
                if (bIsGraveyard == true)
                {
                    if (iLeaveStartMin < (iShiftTimeIn1Min - LOGPAD))
                    {
                        iLeaveStartMin += GRAVEYARD24;
                    }
                    if (iLeaveEndMin < (iShiftTimeOut2Min - LOGPAD))
                    {
                        iLeaveEndMin += GRAVEYARD24;
                    }
                }
                #endregion

                if (iLeaveStartMin != 0 && iLeaveEndMin != 0 && Convert.ToBoolean(drArrLeaveApp[iLve]["FileWithinShift"]))
                {
                    if (iLeaveStartMin == iConvTimeInExtMin && iLeaveEndMin == iConvTimeOutExtMin)
                    {
                        LeaveMins += iLeaveEndMin - iLeaveStartMin;
                    }
                }
            }

            return LeaveMins;
        }

        public bool HasMetRegularHourRequirement(string PayrollGroup, double RegularHours, double LeaveHours, string DayCode)
        {
            bool bHasMet = false;
            if (REGHRSREQD != null)
            {
                foreach (DataRow drRow in REGHRSREQD.Rows)
                {
                    if ((DayCode == "REG" || DayCode == "REGN")
                        && drRow["Mpd_SubCode"].ToString() == PayrollGroup
                        && drRow["Mpd_ParamValue"].ToString() != "-1"
                        && RegularHours + LeaveHours >= Convert.ToDouble(drRow["Mpd_ParamValue"]))
                        bHasMet = true;
                }
            }
            return bHasMet;
        }

        public int iConvertLateToUndertimeAccordingToLeaveType(DataRow[] drArrLeaveAppUnpaid
                                                            , int iTimeInExtMin, int iTimeOutExtMin
                                                            , int iShiftTimeIn1Min, int iShiftTimeOut1Min, int iShiftTimeIn2Min, int iShiftTimeOut2Min
                                                            , bool bIsGraveyard)
        {
            int iLeaveMins = 0;
            foreach (DataRow drRow in LT2UT2LEAVETYPE.Rows)
            {
                foreach (DataRow drRowUPLV in drArrLeaveAppUnpaid)
                {
                    if (Convert.ToDouble(drRowUPLV["LeaveHours"]) != 0)
                    {
                        #region Leave Initialization 
                        int iLeaveStartMin = GetMinsFromHourStr(drRowUPLV["StartTime"].ToString());
                        int iLeaveEndMin = GetMinsFromHourStr(drRowUPLV["EndTime"].ToString());

                        if (bIsGraveyard == true)
                        {
                            if (iLeaveStartMin < (iShiftTimeIn1Min - LOGPAD))
                            {
                                iLeaveStartMin += GRAVEYARD24;
                            }
                            if (iLeaveEndMin < (iShiftTimeOut2Min - LOGPAD))
                            {
                                iLeaveEndMin += GRAVEYARD24;
                            }
                        }
                        #endregion

                        if (drRow["Mpd_SubCode"].ToString() == drRowUPLV["LeaveType"].ToString()
                            && GetOTHoursInMinutes(iLeaveStartMin, iLeaveEndMin, iTimeInExtMin, iTimeOutExtMin) > 0
                            && drRow["Mpd_ParamValue"].ToString() != "-1")
                            iLeaveMins = GetOTHoursInMinutes(iLeaveStartMin, iLeaveEndMin, iTimeInExtMin, iTimeOutExtMin);
                    }
                }
            }
            return iLeaveMins;
        }

        public bool GetApplicableHrsFromCommaDelimitedTable(DataTable dtTable, string PayrollGroup, string EmploymentStatus, string PayrollType, string Grade, double dMinOT, ref double dValue)
        {
            string ParamPayrollGroup, ParamEmploymentStatus, ParamPayrollType, ParamGrade, temp;
            string[] strQualifiers;
            bool bFound = false;
            int iIndex;

            dValue = dMinOT; //initialize
            if (dtTable != null)
            {
                foreach (DataRow drRow in dtTable.Rows)
                {
                    iIndex = 0;
                    ParamPayrollGroup     = "";
                    ParamEmploymentStatus = "";
                    ParamPayrollType      = "";
                    ParamGrade = "";

                    strQualifiers = drRow["Mpd_SubCode"].ToString().Split(new char[] { ',' });
                    foreach (string col in strQualifiers)
                    {
                        temp = col.Trim();
                        switch (iIndex)
                        {
                            case 0: ParamPayrollGroup = temp;
                                break;
                            case 1: ParamEmploymentStatus = temp;
                                break;
                            case 2: ParamPayrollType = temp;
                                break;
                            case 3:
                                ParamGrade = temp;
                                break;
                        }
                        iIndex++;
                    }

                    if ((ParamPayrollGroup == "" || ParamPayrollGroup == PayrollGroup)
                        && (ParamEmploymentStatus == "" || ParamEmploymentStatus == EmploymentStatus)
                        && (ParamPayrollType == "" || ParamPayrollType == PayrollType)
                        && (ParamGrade == "" || ParamGrade == Grade))
                    {
                        dValue = Convert.ToDouble(drRow["Mpd_ParamValue"]);
                        bFound = true;
                        break;
                    }
                }
            }
            return bFound;
        }

        public bool CheckIfExistsInCommaDelString(string lookupString, string sourceString, char delimiter)
        {
            bool bFound = false;
            string[] strArray = sourceString.Split(new char[] { delimiter });
            foreach (string value in strArray)
            {
                if (value.Trim() == lookupString)
                    bFound = true;
                else if (value.Trim() == "ALL")
                    bFound = true;
            }
            return bFound;
        }
        #endregion

        #region Labor Hour Report functions
        public void AddErrorToLaborHourReport(string strEmployeeId, string strLastName, string strFirstName, string strMiddleName, string strProcessDate, string strRemarks, string strType)
        {
            listLbrHrRept.Add(new structLaborHourErrorReport(strEmployeeId, strLastName, strFirstName, strMiddleName, strProcessDate, strRemarks, strType));
        }

        public void InitializeLaborHourReport()
        {
            listLbrHrRept.Clear();
        }

        private DataTable SaveLaborHourErrorReportList(DataTable dtErrList)
        {
            if (dtErrList.Columns.Count == 0)
            {
                dtErrList.Columns.Add("IDNumber");
                dtErrList.Columns.Add("Last Name");
                dtErrList.Columns.Add("First Name");
                dtErrList.Columns.Add("Middle Name");
                dtErrList.Columns.Add("Date");
                dtErrList.Columns.Add("Remarks");
                dtErrList.Columns.Add("Type");
            }
            for (int i = 0; i < listLbrHrRept.Count; i++)
            {
                dtErrList.Rows.Add();
                dtErrList.Rows[dtErrList.Rows.Count - 1]["IDNumber"]    = listLbrHrRept[i].strEmployeeId;
                dtErrList.Rows[dtErrList.Rows.Count - 1]["Last Name"]   = listLbrHrRept[i].strLastName;
                dtErrList.Rows[dtErrList.Rows.Count - 1]["First Name"]  = listLbrHrRept[i].strFirstName;
                dtErrList.Rows[dtErrList.Rows.Count - 1]["Middle Name"] = listLbrHrRept[i].strMiddleName;
                dtErrList.Rows[dtErrList.Rows.Count - 1]["Date"]        = Convert.ToDateTime(listLbrHrRept[i].strProcessDate).ToShortDateString();
                dtErrList.Rows[dtErrList.Rows.Count - 1]["Remarks"]     = listLbrHrRept[i].strRemarks;
                dtErrList.Rows[dtErrList.Rows.Count - 1]["Type"]        = listLbrHrRept[i].strType;
            }

            return dtErrList;
        }

        public DataSet GetLaborHoursNegative(bool ProcessAll, string EmployeeId)
        {
            #region query
            string qString = @"	SELECT  Ttr_IDNo
                                        ,Mem_LastName
                                        ,Mem_FirstName
                                        ,Mem_MiddleName
                                        ,Mem_CompanyCode
	                                    ,Ttr_Date
                                        ,Ttr_ABSHour
                                        ,Ttr_REGHour
                                        ,Ttr_OTHour
                                        ,Ttr_NDHour
                                        ,Ttr_NDOTHour
                                        ,Ttr_LVHour
	                            FROM {0} 
                                INNER JOIN M_Employee ON Mem_IDNo = Ttr_IDNo
                                WHERE (Ttr_ABSHour < 0 or
		                                Ttr_REGHour  < 0 or
		                                Ttr_OTHour  < 0 or
		                                Ttr_NDHour < 0 or
		                                Ttr_NDOTHour  < 0 or
		                                Ttr_LVHour < 0 )
                                    AND Ttr_PayCycle = '{1}'";
            #endregion
            qString = string.Format(qString, EmpTimeRegisterTable, ProcessPayrollPeriod);
            if (!ProcessAll && EmployeeId != "")
                qString += " AND Ttr_IDNo = '" + EmployeeId + "'";
            else if (ProcessAll == true && EmployeeList != "")
                qString += " AND Ttr_IDNo IN (" + EmployeeList + ")";
            DataSet dsResult = dal.ExecuteDataSet(qString);
            return dsResult;
        }

        private DataTable CreateErrorListForPayTrans(DataTable dtErrList, DataSet tempds)
        {
            if (dtErrList.Columns.Count == 0)
            {
                dtErrList.Columns.Add("IDNumber");
                dtErrList.Columns.Add("Last Name");
                dtErrList.Columns.Add("First Name");
                dtErrList.Columns.Add("Middle Name");
                dtErrList.Columns.Add("Date");
                dtErrList.Columns.Add("Remarks");
                dtErrList.Columns.Add("Type");
            }
            for (int i = 0; i < tempds.Tables[0].Rows.Count; i++)
            {
                #region <Add Error List>
                if (Convert.ToDecimal(tempds.Tables[0].Rows[i]["Ttr_ABSHour"].ToString().Trim()) < 0)
                {
                    getIntValue("1.0");
                    dtErrList.Rows.Add();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["IDNumber"]        = tempds.Tables[0].Rows[i]["Ttr_IDNo"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Last Name"]       = tempds.Tables[0].Rows[i]["Mem_LastName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["First Name"]      = tempds.Tables[0].Rows[i]["Mem_FirstName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Middle Name"]     = tempds.Tables[0].Rows[i]["Mem_MiddleName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Date"]            = Convert.ToDateTime(tempds.Tables[0].Rows[i]["Ttr_Date"].ToString()).ToShortDateString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Remarks"]         = "Negative Absent Hour";
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Type"]            = "AE";
                }
                if (Convert.ToDecimal(tempds.Tables[0].Rows[i]["Ttr_REGHour"].ToString().Trim()) < 0)
                {
                    dtErrList.Rows.Add();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["IDNumber"]    = tempds.Tables[0].Rows[i]["Ttr_IDNo"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Last Name"]   = tempds.Tables[0].Rows[i]["Mem_LastName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["First Name"]  = tempds.Tables[0].Rows[i]["Mem_FirstName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Middle Name"] = tempds.Tables[0].Rows[i]["Mem_MiddleName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Date"]        = Convert.ToDateTime(tempds.Tables[0].Rows[i]["Ttr_Date"].ToString()).ToShortDateString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Remarks"]     = "Negative Regular Hour";
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Type"]        = "AE";
                }
                if (Convert.ToDecimal(tempds.Tables[0].Rows[i]["Ttr_OTHour"].ToString().Trim()) < 0)
                {
                    dtErrList.Rows.Add();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["IDNumber"]    = tempds.Tables[0].Rows[i]["Ttr_IDNo"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Last Name"]   = tempds.Tables[0].Rows[i]["Mem_LastName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["First Name"]  = tempds.Tables[0].Rows[i]["Mem_FirstName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Middle Name"] = tempds.Tables[0].Rows[i]["Mem_MiddleName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Date"]        = Convert.ToDateTime(tempds.Tables[0].Rows[i]["Ttr_Date"].ToString()).ToShortDateString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Remarks"]     = "Negative Overtime Hour";
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Type"]        = "AE";
                }
                if (Convert.ToDecimal(tempds.Tables[0].Rows[i]["Ttr_NDHour"].ToString().Trim()) < 0)
                {
                    dtErrList.Rows.Add();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["IDNumber"]    = tempds.Tables[0].Rows[i]["Ttr_IDNo"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Last Name"]   = tempds.Tables[0].Rows[i]["Mem_LastName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["First Name"]  = tempds.Tables[0].Rows[i]["Mem_FirstName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Middle Name"] = tempds.Tables[0].Rows[i]["Mem_MiddleName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Date"]        = Convert.ToDateTime(tempds.Tables[0].Rows[i]["Ttr_Date"].ToString()).ToShortDateString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Remarks"]     = "Negative Regular Night Premium Hour";
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Type"]        = "AE";
                }
                if (Convert.ToDecimal(tempds.Tables[0].Rows[i]["Ttr_NDOTHour"].ToString().Trim()) < 0)
                {
                    dtErrList.Rows.Add();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["IDNumber"]    = tempds.Tables[0].Rows[i]["Ttr_IDNo"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Last Name"]   = tempds.Tables[0].Rows[i]["Mem_LastName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["First Name"]  = tempds.Tables[0].Rows[i]["Mem_FirstName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Middle Name"] = tempds.Tables[0].Rows[i]["Mem_MiddleName"].ToString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Date"]        = Convert.ToDateTime(tempds.Tables[0].Rows[i]["Ttr_Date"].ToString()).ToShortDateString();
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Remarks"]     = "Negative Overtime Night Premium Hour";
                    dtErrList.Rows[dtErrList.Rows.Count - 1]["Type"]        = "AE";
                }
                #endregion
            }

            return dtErrList;
        }

        public int InsertToLaborHrErr(DataTable dt)
        {
            int retVal = 0;
            string qString = "";

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                qString = string.Format(@"INSERT INTO T_EmpLaborCheck 
                                                   (Tlc_IDNo
                                                   ,Tlc_Type
                                                   ,Tlc_PayCycle
                                                   ,Tlc_Date
                                                   ,Tlc_Remarks
                                                   ,Tlc_SystemDefined
                                                   ,Usr_Login
                                                   ,Ludatetime)
                                             VALUES
                                                   ('{0}'
                                                   ,'{1}'
                                                   ,'{2}'
                                                   ,'{3}'
                                                   ,'{4}'
                                                   , 1
                                                   ,'{5}'
                                                   ,GETDATE())", dt.Rows[i]["IDNumber"].ToString()
                                                               , dt.Rows[i]["Type"].ToString()
                                                               , ProcessPayrollPeriod
                                                               , dt.Rows[i]["Date"].ToString()
                                                               , dt.Rows[i]["Remarks"].ToString().Replace("'", "")
                                                               , LoginUser);
                try
                {
                    retVal = dal.ExecuteNonQuery(qString);
                }
                catch
                {
                    retVal = 0;
                }
            }
            return retVal;
        }
        #endregion

        #region Hour Fraction functions
        public void AddToHourFractionTable(int StartMin, int EndMin, int CurrentDayMin, int NextDayMin, HourType HourType)
        {
            listHourFract.Add(new structHourFract(StartMin, EndMin, CurrentDayMin, NextDayMin, HourType));
        }

        public void InitializeHourFractionTable()
        {
            listHourFract.Clear();
        }

        public void InsertRegularTimeToHourFractionTable(int StartTime, int EndTime)
        {
            if (Convert.ToBoolean(HRFRCLBRHR))
            {
                //Cutoff = 1440;

                CurrentDayMin = Math.Max(Math.Min(EndTime, Cutoff), 0) - Math.Max(Math.Min(StartTime, Cutoff), 0);
                NextDayMin = Math.Max(Math.Max(EndTime, Cutoff), 0) - Math.Max(Math.Max(StartTime, Cutoff), 0);

                if (CurrentDayMin > 0 || NextDayMin > 0)
                {
                    AddToHourFractionTable(StartTime, EndTime, Math.Max(CurrentDayMin, 0), Math.Max(NextDayMin, 0), HourType.RegHour);
                }
            }
        }

        public void InsertRegularTimeToHourFractionTable(int StartTime, int EndTime, int BaseTimeIn, int BaseTimeOut)
        {
            if (Convert.ToBoolean(HRFRCLBRHR))
            {
                //Cutoff = 1440;
                ActualStart = 0;
                ActualEnd = 0;

                OTMins = GetOTHoursInTime(StartTime, EndTime, BaseTimeIn, BaseTimeOut, ref ActualStart, ref ActualEnd);

                if (OTMins > 0)
                {
                    ActualStart = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(ActualStart)));
                    ActualEnd = Convert.ToInt32(Math.Floor(Convert.ToDouble(ActualEnd)));

                    CurrentDayMin = Math.Max(Math.Min(ActualEnd, Cutoff), 0) - Math.Max(Math.Min(ActualStart, Cutoff), 0);
                    NextDayMin = Math.Max(Math.Max(ActualEnd, Cutoff), 0) - Math.Max(Math.Max(ActualStart, Cutoff), 0);

                    if (CurrentDayMin > 0 || NextDayMin > 0)
                    {
                        AddToHourFractionTable(StartTime, EndTime, Math.Max(CurrentDayMin, 0), Math.Max(NextDayMin, 0), HourType.RegHour);
                    }
                }
            }
        }

        public void InsertLeaveTimeToHourFractionTable(int StartTime, int EndTime, int BaseTimeIn, int BaseTimeOut)
        {
            if (Convert.ToBoolean(HRFRCLBRHR))
            {
                //Cutoff = 1440;
                ActualStart = 0;
                ActualEnd = 0;
                ActualStart2 = 0;
                ActualEnd2 = 0;

                GetOTHoursExcludedTime(StartTime, EndTime, BaseTimeIn, BaseTimeOut, ref ActualStart, ref ActualEnd, ref ActualStart2, ref ActualEnd2);

                ActualStart = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(ActualStart)));
                ActualEnd = Convert.ToInt32(Math.Floor(Convert.ToDouble(ActualEnd)));

                ActualStart2 = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(ActualStart2)));
                ActualEnd2 = Convert.ToInt32(Math.Floor(Convert.ToDouble(ActualEnd2)));

                CurrentDayMin = Math.Max(Math.Min(ActualEnd, Cutoff), 0) - Math.Max(Math.Min(ActualStart, Cutoff), 0);
                NextDayMin = Math.Max(Math.Max(ActualEnd, Cutoff), 0) - Math.Max(Math.Max(ActualStart, Cutoff), 0);

                if (CurrentDayMin > 0 || NextDayMin > 0)
                {
                    AddToHourFractionTable(StartTime, EndTime, Math.Max(CurrentDayMin, 0), Math.Max(NextDayMin, 0), HourType.RegHour);
                }

                CurrentDayMin = Math.Max(Math.Min(ActualEnd2, Cutoff), 0) - Math.Max(Math.Min(ActualStart2, Cutoff), 0);
                NextDayMin = Math.Max(Math.Max(ActualEnd2, Cutoff), 0) - Math.Max(Math.Max(ActualStart2, Cutoff), 0);

                if (CurrentDayMin > 0 || NextDayMin > 0)
                {
                    AddToHourFractionTable(StartTime, EndTime, Math.Max(CurrentDayMin, 0), Math.Max(NextDayMin, 0), HourType.RegHour);
                }
            }
        }

        public void InsertOTToHourFractionTable(int StartTime, int EndTime, int BaseTimeIn, int BaseTimeOut, int OTFraction, bool CountOTFraction)
        {
            if (Convert.ToBoolean(HRFRCLBRHR))
            {
                //Cutoff = 1440;
                ActualStart = 0;
                ActualEnd = 0;

                OTMins = GetOTHoursInTime(StartTime, EndTime, BaseTimeIn, BaseTimeOut, ref ActualStart, ref ActualEnd);

                if (OTMins > 0)
                {
                    if (CountOTFraction)
                    {
                        ActualStart = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(ActualStart) / OTFraction)) * OTFraction;
                        ActualEnd = Convert.ToInt32(Math.Floor(Convert.ToDouble(ActualEnd) / OTFraction)) * OTFraction;
                    }
                    CurrentDayMin = Math.Max(Math.Min(ActualEnd, Cutoff), 0) - Math.Max(Math.Min(ActualStart, Cutoff), 0);
                    NextDayMin = Math.Max(Math.Max(ActualEnd, Cutoff), 0) - Math.Max(Math.Max(ActualStart, Cutoff), 0);

                    if (CurrentDayMin > 0 || NextDayMin > 0)
                    {
                        AddToHourFractionTable(StartTime, EndTime, Math.Max(CurrentDayMin, 0), Math.Max(NextDayMin, 0), HourType.OTHour);
                    }
                }
            }
        }

        public void CorrectOTHourFraction(int ActualComputedOT)
        {
            int iTotalCurrentDayMin = 0, iTotalNextDayMin = 0;
            int iLastIdx = -1;
            for (int i = 0; i < listHourFract.Count; i++)
            {
                if (listHourFract[i].strHourType == HourType.OTHour)
                {
                    if (listHourFract[i].iCurrentDayMin > 0)
                        iTotalCurrentDayMin += listHourFract[i].iCurrentDayMin;
                    if (listHourFract[i].iNextDayMin > 0)
                        iTotalNextDayMin += listHourFract[i].iNextDayMin;
                    iLastIdx = i;
                }
            }
            //Adjust OT minutes according to the computed OT minutes in Log Ledger
            if (iLastIdx != -1 && iTotalCurrentDayMin + iTotalNextDayMin != ActualComputedOT)
            {
                int iOffsetCurrentDayMin = 0, iOffsetNextDayMin = 0;
                if (iTotalNextDayMin > 0)
                    iOffsetNextDayMin = ActualComputedOT - (iTotalCurrentDayMin + iTotalNextDayMin);
                else
                    iOffsetCurrentDayMin = ActualComputedOT - (iTotalCurrentDayMin + iTotalNextDayMin);

                AddToHourFractionTable(0, 0, iOffsetCurrentDayMin, iOffsetNextDayMin, HourType.OTHour);
            }
        }

        public void InsertNDToHourFractionTable(int StartTime, int EndTime, int BaseTimeIn, int BaseTimeOut, double NDFraction, HourType hrType)
        {
            if (Convert.ToBoolean(HRFRCLBRHR))
            {
                //Cutoff = 1440;
                ActualStart = 0;
                ActualEnd = 0;

                OTMins = GetOTHoursInTime(StartTime, EndTime, BaseTimeIn, BaseTimeOut, ref ActualStart, ref ActualEnd);

                if (OTMins > 0)
                {
                    ActualStart = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(ActualStart) / NDFraction) * NDFraction);
                    ActualEnd = Convert.ToInt32(Math.Floor(Convert.ToDouble(ActualEnd) / NDFraction) * NDFraction);

                    CurrentDayMin = Math.Max(Math.Min(ActualEnd, Cutoff), 0) - Math.Max(Math.Min(ActualStart, Cutoff), 0);
                    NextDayMin = Math.Max(Math.Max(ActualEnd, Cutoff), 0) - Math.Max(Math.Max(ActualStart, Cutoff), 0);

                    if (CurrentDayMin > 0 || NextDayMin > 0)
                    {
                        AddToHourFractionTable(StartTime, EndTime, Math.Max(CurrentDayMin, 0), Math.Max(NextDayMin, 0), hrType);
                    }
                }
            }
        }

        public void SavePayrollTransactionAmounts(string EmployeeId, DateTime ProcessDate, string DayCode, bool Restday)
        {
            string NextDayCode = "";
            bool NextRestday = false;
            for (int i = 0; i < listHourFract.Count; i++)
            {
                if (listHourFract[i].iCurrentDayMin != 0)
                    SavePayrollTransactionAmount(DayCode, Restday, listHourFract[i].iCurrentDayMin / 60.0, listHourFract[i].strHourType, "");
                if (listHourFract[i].iNextDayMin != 0)
                {
                    GetNextDayDetails(EmployeeId, ProcessDate, ref NextDayCode, ref NextRestday);
                    SavePayrollTransactionAmount(NextDayCode, NextRestday, listHourFract[i].iNextDayMin / 60.0, listHourFract[i].strHourType, DayCode);
                }
            }
        }

        public void GetNextDayDetails(string EmployeeId, DateTime ProcessDate, ref string DayCode, ref bool Restday)
        {
            DataRow[] drArrNextDay = dtEmpTimeRegister.Select(string.Format(" Ttr_IDNo = '{0}' AND Ttr_Date = '{1}'", EmployeeId, ProcessDate.AddDays(1)));

            if (drArrNextDay.Length > 0)
            {
                DayCode = drArrNextDay[0]["Ttr_DayCode"].ToString();
                Restday = Convert.ToBoolean(drArrNextDay[0]["Ttr_RestDayFlag"]);
            }
            else
            {
                drArrNextDay = dtNextDayCodeLastDay.Select(string.Format(" Ttr_IDNo = '{0}' ", EmployeeId));

                if (drArrNextDay.Length > 0)
                {
                    DayCode = drArrNextDay[0]["Ttr_DayCode"].ToString();
                    Restday = Convert.ToBoolean(drArrNextDay[0]["Ttr_RestDayFlag"]);
                }
            }
        }

        public DataTable GetNextDayCodeForLastDay(DateTime dtLastDay, bool ProcessAll, string EmployeeId)
        {
            string EmployeeCondition = "";
            if (!ProcessAll && EmployeeId != "")
                EmployeeCondition = " AND Ttr_IDNo = '" + EmployeeId + "' ";
            if (ProcessAll == true && EmployeeList != "")
                EmployeeCondition = " AND Ttr_IDNo IN (" + EmployeeList + ") ";

            string query = string.Format(@"SELECT Ttr_IDNo, Ttr_DayCode, Ttr_RestDayFlag 
                                            FROM T_EmpTimeRegister
                                            WHERE Ttr_Date = '{0}' {1}", dtLastDay.AddDays(1), EmployeeCondition);
            DataTable dtResult = dal.ExecuteDataSet(query).Tables[0];
            return dtResult;
        }

        public void SavePayrollTransactionAmount(string DayCode, bool Restday, double Amount, HourType hrType, string PrevDayCode)
        {
            double dHr = 0, dOTHr = 0, dNDHr = 0, dNDOTHr = 0;
            #region Regular Day
            if ((DayCode.Equals("REG") || DayCode.Equals("REGN")) && !Restday)
            {
                if (hrType == HourType.RegHour)
                {
                    drEmpPayTranDtl["Tpd_REGHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_REGHr"]) + Amount;
                }
                else if (hrType == HourType.OTHour)
                {
                    drEmpPayTranDtl["Tpd_REGOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_REGOTHr"]) + Amount;
                }
                else if (hrType == HourType.NDHour)
                {
                    drEmpPayTranDtl["Tpd_REGNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_REGNDHr"]) + Amount;
                }
                else if (hrType == HourType.NDOTHour)
                {
                    drEmpPayTranDtl["Tpd_REGNDOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_REGNDOTHr"]) + Amount;
                }

                //Night Diff
                if (Convert.ToBoolean(NDALL) == true)
                {
                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_REGNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_REGNDOTHr"]) <= 8)
                    {
                        drEmpPayTranDtl["Tpd_REGNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_REGNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_REGNDOTHr"]);
                        drEmpPayTranDtl["Tpd_REGNDOTHr"] = 0;
                    }
                    else
                    {
                        drEmpPayTranDtl["Tpd_REGNDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_REGNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_REGNDOTHr"])) - 8;
                        drEmpPayTranDtl["Tpd_REGNDHr"] = 8;
                    }
                }
            }
            #endregion
            #region Rest Day
            else if (DayCode.Equals("REST") && Restday)
            {
                dHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTHr"]);
                dOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTOTHr"]);
                dNDHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTNDHr"]);
                dNDOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTNDOTHr"]);

                if (hrType == HourType.RegHour)
                {
                    drEmpPayTranDtl["Tpd_RESTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTHr"]) + Amount;
                }
                else if (hrType == HourType.OTHour)
                {
                    drEmpPayTranDtl["Tpd_RESTOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTOTHr"]) + Amount;
                }
                else if (hrType == HourType.NDHour)
                {
                    drEmpPayTranDtl["Tpd_RESTNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTNDHr"]) + Amount;
                }
                else if (hrType == HourType.NDOTHour)
                {
                    drEmpPayTranDtl["Tpd_RESTNDOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTNDOTHr"]) + Amount;
                }

                if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTOTHr"]) <= 8)
                {
                    drEmpPayTranDtl["Tpd_RESTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTOTHr"]);
                    drEmpPayTranDtl["Tpd_RESTOTHr"] = 0;
                }
                else
                {
                    drEmpPayTranDtl["Tpd_RESTOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTOTHr"])) - 8;
                    drEmpPayTranDtl["Tpd_RESTHr"] = 8;
                }

                //Night Diff
                if (Convert.ToBoolean(NDALL) == true && PrevDayCode != "" && PrevDayCode != DayCode)
                {
                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTNDOTHr"]) <= 8)
                    {
                        drEmpPayTranDtl["Tpd_RESTNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTNDOTHr"]);
                        drEmpPayTranDtl["Tpd_RESTNDOTHr"] = 0;
                    }
                    else
                    {
                        drEmpPayTranDtl["Tpd_RESTNDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTNDOTHr"])) - 8;
                        drEmpPayTranDtl["Tpd_RESTNDHr"] = 8;
                    }
                }

                if (drEmpPayTranDtlPrev != null && Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTOTHr"]) > 0)
                {
                    if (LBRHRFORMULA == "FORMULA1")
                    {
                        //Restore values of the payroll transaction column
                        if (dHr
                            + dOTHr
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTOTHr"]) <= 8)
                        {
                            RestdayHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTOTHr"]));
                        }
                        else
                        {
                            RestdayOTHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTOTHr"])) - 8;
                            RestdayHr -= 8;
                        }
                        bHasAddedCurrentHrs = true; //Added (6/10/2013) For proper distribution of hours if HRFRCLBRHR is enabled

                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTOTHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTOTHr"]) <= 8)
                        {
                            RestdayHr += Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTOTHr"]);
                        }
                        else
                        {
                            RestdayOTHr += (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTOTHr"]))
                                                - 8;
                            RestdayHr += 8;

                            drEmpPayTranDtl["Tpd_RESTOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTOTHr"])
                                                                                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTOTHr"]))
                                                                                        - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTHr"] = 8 - (Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTHr"])
                                                                                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTOTHr"]));
                        }
                    }
                    else if (LBRHRFORMULA == "FORMULA2")
                    {
                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTOTHr"])
                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTOTHr"]) <= 8)
                        {
                            drEmpPayTranDtl["Tpd_RESTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTOTHr"])
                                                                                    + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTOTHr"] = 0;
                        }
                        else
                        {
                            drEmpPayTranDtl["Tpd_RESTOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTOTHr"])
                                                                                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTOTHr"]))
                                                                                        - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTHr"] = 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTHr"]);
                        }
                    }
                }
            }
            #endregion
            #region Legal Holiday
            else if (DayCode.Equals("HOL") && !Restday)
            {
                dHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLHr"]);
                dOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLOTHr"]);
                dNDHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLNDHr"]);
                dNDOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLNDOTHr"]);

                if (hrType == HourType.RegHour)
                {
                    drEmpPayTranDtl["Tpd_LEGHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLHr"]) + Amount;
                }
                else if (hrType == HourType.OTHour)
                {
                    drEmpPayTranDtl["Tpd_LEGHOLOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLOTHr"]) + Amount;
                }
                else if (hrType == HourType.NDHour)
                {
                    drEmpPayTranDtl["Tpd_LEGHOLNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLNDHr"]) + Amount;
                }
                else if (hrType == HourType.NDOTHour)
                {
                    drEmpPayTranDtl["Tpd_LEGHOLNDOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLNDOTHr"]) + Amount;
                }

                if (Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLOTHr"]) <= 8)
                {
                    drEmpPayTranDtl["Tpd_LEGHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLOTHr"]);
                    drEmpPayTranDtl["Tpd_LEGHOLOTHr"] = 0;
                }
                else
                {
                    drEmpPayTranDtl["Tpd_LEGHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLOTHr"])) - 8;
                    drEmpPayTranDtl["Tpd_LEGHOLHr"] = 8;
                }

                //Night Diff
                if (Convert.ToBoolean(NDALL) == true && PrevDayCode != "" && PrevDayCode != DayCode)
                {
                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLNDOTHr"]) <= 8)
                    {
                        drEmpPayTranDtl["Tpd_LEGHOLNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLNDOTHr"]);
                        drEmpPayTranDtl["Tpd_LEGHOLNDOTHr"] = 0;
                    }
                    else
                    {
                        drEmpPayTranDtl["Tpd_LEGHOLNDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLNDOTHr"])) - 8;
                        drEmpPayTranDtl["Tpd_LEGHOLNDHr"] = 8;
                    }
                }

                if (drEmpPayTranDtlPrev != null && Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLOTHr"]) > 0)
                {
                    if (LBRHRFORMULA == "FORMULA1")
                    {
                        //Restore values of the payroll transaction column
                        if (dHr
                            + dOTHr
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLOTHr"]) <= 8)
                        {
                            LegalHolidayHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLOTHr"]));
                        }
                        else
                        {
                            LegalHolidayOTHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLOTHr"])) - 8;
                            LegalHolidayHr -= 8;
                        }
                        bHasAddedCurrentHrs = true; //Added (6/10/2013) For proper distribution of hours if HRFRCLBRHR is enabled

                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLOTHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLOTHr"]) <= 8)
                        {
                            LegalHolidayHr += Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLOTHr"]);
                        }
                        else
                        {
                            LegalHolidayOTHr += (Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLOTHr"]))
                                                - 8;
                            LegalHolidayHr += 8;

                            drEmpPayTranDtl["Tpd_LEGHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLOTHr"])
                                                                                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLOTHr"]))
                                                                                        - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_LEGHOLHr"] = 8 - (Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLHr"])
                                                                                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLOTHr"]));
                        }
                    }
                    else if (LBRHRFORMULA == "FORMULA2")
                    {
                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLOTHr"])
                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLOTHr"]) <= 8)
                        {
                            drEmpPayTranDtl["Tpd_LEGHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLOTHr"])
                                                                                    + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_LEGHOLOTHr"] = 0;
                        }
                        else
                        {
                            drEmpPayTranDtl["Tpd_LEGHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_LEGHOLOTHr"])
                                                                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLOTHr"]))
                                                                                            - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_LEGHOLHr"] = 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_LEGHOLHr"]);
                        }
                    }
                }
            }
            #endregion
            #region Special Holiday
            else if (DayCode.Equals("SPL") && !Restday)
            {
                dHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLHr"]);
                dOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLOTHr"]);
                dNDHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLNDHr"]);
                dNDOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLNDOTHr"]);

                if (hrType == HourType.RegHour)
                {
                    drEmpPayTranDtl["Tpd_SPLHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLHr"]) + Amount;
                }
                else if (hrType == HourType.OTHour)
                {
                    drEmpPayTranDtl["Tpd_SPLHOLOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLOTHr"]) + Amount;
                }
                else if (hrType == HourType.NDHour)
                {
                    drEmpPayTranDtl["Tpd_SPLHOLNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLNDHr"]) + Amount;
                }
                else if (hrType == HourType.NDOTHour)
                {
                    drEmpPayTranDtl["Tpd_SPLHOLNDOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLNDOTHr"]) + Amount;
                }

                if (Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLOTHr"]) <= 8)
                {
                    drEmpPayTranDtl["Tpd_SPLHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLOTHr"]);
                    drEmpPayTranDtl["Tpd_SPLHOLOTHr"] = 0;
                }
                else
                {
                    drEmpPayTranDtl["Tpd_SPLHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLOTHr"])) - 8;
                    drEmpPayTranDtl["Tpd_SPLHOLHr"] = 8;
                }

                //Night Diff
                if (Convert.ToBoolean(NDALL) == true && PrevDayCode != "" && PrevDayCode != DayCode)
                {
                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLNDOTHr"]) <= 8)
                    {
                        drEmpPayTranDtl["Tpd_SPLHOLNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLNDOTHr"]);
                        drEmpPayTranDtl["Tpd_SPLHOLNDOTHr"] = 0;
                    }
                    else
                    {
                        drEmpPayTranDtl["Tpd_SPLHOLNDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLNDOTHr"])) - 8;
                        drEmpPayTranDtl["Tpd_SPLHOLNDHr"] = 8;
                    }
                }

                if (drEmpPayTranDtlPrev != null && Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLOTHr"]) > 0)
                {
                    if (LBRHRFORMULA == "FORMULA1")
                    {
                        //Restore values of the payroll transaction column
                        if (dHr
                            + dOTHr
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLOTHr"]) <= 8)
                        {
                            SpecialHolidayHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLOTHr"]));
                        }
                        else
                        {
                            SpecialHolidayOTHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLOTHr"])) - 8;
                            SpecialHolidayHr -= 8;
                        }
                        bHasAddedCurrentHrs = true; //Added (6/10/2013) For proper distribution of hours if HRFRCLBRHR is enabled

                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLOTHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLOTHr"]) <= 8)
                        {
                            SpecialHolidayHr += Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLOTHr"]);
                        }
                        else
                        {
                            SpecialHolidayOTHr += (Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLOTHr"]))
                                                - 8;
                            SpecialHolidayHr += 8;

                            drEmpPayTranDtl["Tpd_SPLHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLOTHr"])
                                                                                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLOTHr"]))
                                                                                        - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_SPLHOLHr"] = 8 - (Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLHr"])
                                                                                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLOTHr"]));
                        }
                    }
                    else if (LBRHRFORMULA == "FORMULA2")
                    {
                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLOTHr"])
                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLOTHr"]) <= 8)
                        {
                            drEmpPayTranDtl["Tpd_SPLHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLOTHr"])
                                                                                    + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_SPLHOLOTHr"] = 0;
                        }
                        else
                        {
                            drEmpPayTranDtl["Tpd_SPLHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_SPLHOLOTHr"])
                                                                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLOTHr"]))
                                                                                            - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_SPLHOLHr"] = 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_SPLHOLHr"]);
                        }
                    }
                }
            }
            #endregion
            #region Plant Shutdown
            else if (DayCode.Equals("PSD") && !Restday)
            {
                dHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDHr"]);
                dOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDOTHr"]);
                dNDHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDNDHr"]);
                dNDOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDNDOTHr"]);

                if (hrType == HourType.RegHour)
                {
                    drEmpPayTranDtl["Tpd_PSDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDHr"]) + Amount;
                }
                else if (hrType == HourType.OTHour)
                {
                    drEmpPayTranDtl["Tpd_PSDOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDOTHr"]) + Amount;
                }
                else if (hrType == HourType.NDHour)
                {
                    drEmpPayTranDtl["Tpd_PSDNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDNDHr"]) + Amount;
                }
                else if (hrType == HourType.NDOTHour)
                {
                    drEmpPayTranDtl["Tpd_PSDNDOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDNDOTHr"]) + Amount;
                }

                if (Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDOTHr"]) <= 8)
                {
                    drEmpPayTranDtl["Tpd_PSDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDOTHr"]);
                    drEmpPayTranDtl["Tpd_PSDOTHr"] = 0;
                }
                else
                {
                    drEmpPayTranDtl["Tpd_PSDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDOTHr"])) - 8;
                    drEmpPayTranDtl["Tpd_PSDHr"] = 8;
                }

                //Night Diff
                if (Convert.ToBoolean(NDALL) == true && PrevDayCode != "" && PrevDayCode != DayCode)
                {
                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDNDOTHr"]) <= 8)
                    {
                        drEmpPayTranDtl["Tpd_PSDNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDNDOTHr"]);
                        drEmpPayTranDtl["Tpd_PSDNDOTHr"] = 0;
                    }
                    else
                    {
                        drEmpPayTranDtl["Tpd_PSDNDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDNDOTHr"])) - 8;
                        drEmpPayTranDtl["Tpd_PSDNDHr"] = 8;
                    }
                }

                if (drEmpPayTranDtlPrev != null && Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDOTHr"]) > 0)
                {
                    if (LBRHRFORMULA == "FORMULA1")
                    {
                        //Restore values of the payroll transaction column
                        if (dHr
                            + dOTHr
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDOTHr"]) <= 8)
                        {
                            PlantShutdownHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDOTHr"]));
                        }
                        else
                        {
                            PlantShutdownOTHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDOTHr"])) - 8;
                            PlantShutdownHr -= 8;
                        }
                        bHasAddedCurrentHrs = true; //Added (6/10/2013) For proper distribution of hours if HRFRCLBRHR is enabled

                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDOTHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDOTHr"]) <= 8)
                        {
                            PlantShutdownHr += Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDOTHr"]);
                        }
                        else
                        {
                            PlantShutdownOTHr += (Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDOTHr"]))
                                                - 8;
                            PlantShutdownHr += 8;

                            drEmpPayTranDtl["Tpd_PSDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDOTHr"])
                                                                                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDOTHr"]))
                                                                                        - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDOTHr"]);
                            drEmpPayTranDtl["Tpd_PSDHr"] = 8 - (Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDHr"])
                                                                                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDOTHr"]));
                        }
                    }
                    else if (LBRHRFORMULA == "FORMULA2")
                    {
                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDOTHr"])
                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDOTHr"]) <= 8)
                        {
                            drEmpPayTranDtl["Tpd_PSDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDOTHr"])
                                                                                    + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDOTHr"]);
                            drEmpPayTranDtl["Tpd_PSDOTHr"] = 0;
                        }
                        else
                        {
                            drEmpPayTranDtl["Tpd_PSDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_PSDOTHr"])
                                                                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDOTHr"]))
                                                                                            - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDOTHr"]);
                            drEmpPayTranDtl["Tpd_PSDHr"] = 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_PSDHr"]);
                        }
                    }
                }
            }
            #endregion
            #region Company Holiday
            else if (DayCode.Equals("COMP") && !Restday)
            {
                dHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLHr"]);
                dOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLOTHr"]);
                dNDHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLNDHr"]);
                dNDOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLNDOTHr"]);

                if (hrType == HourType.RegHour)
                {
                    drEmpPayTranDtl["Tpd_COMPHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLHr"]) + Amount;
                }
                else if (hrType == HourType.OTHour)
                {
                    drEmpPayTranDtl["Tpd_COMPHOLOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLOTHr"]) + Amount;
                }
                else if (hrType == HourType.NDHour)
                {
                    drEmpPayTranDtl["Tpd_COMPHOLNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLNDHr"]) + Amount;
                }
                else if (hrType == HourType.NDOTHour)
                {
                    drEmpPayTranDtl["Tpd_COMPHOLNDOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLNDOTHr"]) + Amount;
                }

                if (Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLOTHr"]) <= 8)
                {
                    drEmpPayTranDtl["Tpd_COMPHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLOTHr"]);
                    drEmpPayTranDtl["Tpd_COMPHOLOTHr"] = 0;
                }
                else
                {
                    drEmpPayTranDtl["Tpd_COMPHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLOTHr"])) - 8;
                    drEmpPayTranDtl["Tpd_COMPHOLHr"] = 8;
                }

                //Night Diff
                if (Convert.ToBoolean(NDALL) == true && PrevDayCode != "" && PrevDayCode != DayCode)
                {
                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLNDOTHr"]) <= 8)
                    {
                        drEmpPayTranDtl["Tpd_COMPHOLNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLNDOTHr"]);
                        drEmpPayTranDtl["Tpd_COMPHOLNDOTHr"] = 0;
                    }
                    else
                    {
                        drEmpPayTranDtl["Tpd_COMPHOLNDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLNDOTHr"])) - 8;
                        drEmpPayTranDtl["Tpd_COMPHOLNDHr"] = 8;
                    }
                }

                if (drEmpPayTranDtlPrev != null && Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLOTHr"]) > 0)
                {
                    if (LBRHRFORMULA == "FORMULA1")
                    {
                        //Restore values of the payroll transaction column
                        if (dHr
                            + dOTHr
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLOTHr"]) <= 8)
                        {
                            CompanyHolidayHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLOTHr"]));
                        }
                        else
                        {
                            CompanyHolidayOTHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLOTHr"])) - 8;
                            CompanyHolidayHr -= 8;
                        }
                        bHasAddedCurrentHrs = true; //For proper distribution of hours if HRFRCLBRHR is enabled

                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLOTHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLOTHr"]) <= 8)
                        {
                            CompanyHolidayHr += Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLOTHr"]);
                        }
                        else
                        {
                            CompanyHolidayOTHr += (Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLOTHr"]))
                                                - 8;
                            CompanyHolidayHr += 8;

                            drEmpPayTranDtl["Tpd_COMPHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLOTHr"])
                                                                                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLOTHr"]))
                                                                                        - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_COMPHOLHr"] = 8 - (Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLHr"])
                                                                                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLOTHr"]));
                        }
                    }
                    else if (LBRHRFORMULA == "FORMULA2")
                    {
                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLOTHr"])
                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLOTHr"]) <= 8)
                        {
                            drEmpPayTranDtl["Tpd_COMPHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLOTHr"])
                                                                                    + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_COMPHOLOTHr"] = 0;
                        }
                        else
                        {
                            drEmpPayTranDtl["Tpd_COMPHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_COMPHOLOTHr"])
                                                                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLOTHr"]))
                                                                                            - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_COMPHOLHr"] = 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_COMPHOLHr"]);
                        }
                    }
                }
            }
            #endregion
            #region Restday Legal Holiday
            else if (DayCode.Equals("HOL") && Restday)
            {
                dHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]);
                dOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"]);
                dNDHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLNDHr"]);
                dNDOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLNDOTHr"]);

                if (hrType == HourType.RegHour)
                {
                    drEmpPayTranDtl["Tpd_RESTLEGHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]) + Amount;
                }
                else if (hrType == HourType.OTHour)
                {
                    drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"]) + Amount;
                }
                else if (hrType == HourType.NDHour)
                {
                    drEmpPayTranDtl["Tpd_RESTLEGHOLNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLNDHr"]) + Amount;
                }
                else if (hrType == HourType.NDOTHour)
                {
                    drEmpPayTranDtl["Tpd_RESTLEGHOLNDOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLNDOTHr"]) + Amount;
                }

                if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"]) <= 8)
                {
                    drEmpPayTranDtl["Tpd_RESTLEGHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"]);
                    drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"] = 0;
                }
                else
                {
                    drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"])) - 8;
                    drEmpPayTranDtl["Tpd_RESTLEGHOLHr"] = 8;
                }

                //Night Diff
                if (Convert.ToBoolean(NDALL) == true && PrevDayCode != "" && PrevDayCode != DayCode)
                {
                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLNDOTHr"]) <= 8)
                    {
                        drEmpPayTranDtl["Tpd_RESTLEGHOLNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLNDOTHr"]);
                        drEmpPayTranDtl["Tpd_RESTLEGHOLNDOTHr"] = 0;
                    }
                    else
                    {
                        drEmpPayTranDtl["Tpd_RESTLEGHOLNDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLNDOTHr"])) - 8;
                        drEmpPayTranDtl["Tpd_RESTLEGHOLNDHr"] = 8;
                    }
                }

                if (drEmpPayTranDtlPrev != null && Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLOTHr"]) > 0)
                {
                    if (LBRHRFORMULA == "FORMULA1")
                    {
                        //Restore values of the payroll transaction column
                        if (dHr
                            + dOTHr
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLOTHr"]) <= 8)
                        {
                            RestdayLegalHolidayHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLOTHr"]));
                        }
                        else
                        {
                            RestdayLegalHolidayOTHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLOTHr"])) - 8;
                            RestdayLegalHolidayHr -= 8;
                        }
                        bHasAddedCurrentHrs = true; //Added (6/10/2013) For proper distribution of hours if HRFRCLBRHR is enabled

                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLOTHr"]) <= 8)
                        {
                            RestdayLegalHolidayHr += Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLOTHr"]);
                        }
                        else
                        {
                            RestdayLegalHolidayOTHr += (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLOTHr"]))
                                                - 8;
                            RestdayLegalHolidayHr += 8;

                            drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"])
                                                                                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLOTHr"]))
                                                                                        - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTLEGHOLHr"] = 8 - (Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLHr"])
                                                                                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLOTHr"]));
                        }
                    }
                    else if (LBRHRFORMULA == "FORMULA2")
                    {
                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"])
                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLOTHr"]) <= 8)
                        {
                            drEmpPayTranDtl["Tpd_RESTLEGHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"])
                                                                                    + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"] = 0;
                        }
                        else
                        {
                            drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTLEGHOLOTHr"])
                                                                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLOTHr"]))
                                                                                            - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTLEGHOLHr"] = 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTLEGHOLHr"]);
                        }
                    }
                }
            }
            #endregion
            #region Restday Special Holiday
            else if (DayCode.Equals("SPL") && Restday)
            {
                dHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]);
                dOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"]);
                dNDHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLNDHr"]);
                dNDOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLNDOTHr"]);

                if (hrType == HourType.RegHour)
                {
                    drEmpPayTranDtl["Tpd_RESTSPLHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]) + Amount;
                }
                else if (hrType == HourType.OTHour)
                {
                    drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"]) + Amount;
                }
                else if (hrType == HourType.NDHour)
                {
                    drEmpPayTranDtl["Tpd_RESTSPLHOLNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLNDHr"]) + Amount;
                }
                else if (hrType == HourType.NDOTHour)
                {
                    drEmpPayTranDtl["Tpd_RESTSPLHOLNDOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLNDOTHr"]) + Amount;
                }

                if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"]) <= 8)
                {
                    drEmpPayTranDtl["Tpd_RESTSPLHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"]);
                    drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"] = 0;
                }
                else
                {
                    drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"])) - 8;
                    drEmpPayTranDtl["Tpd_RESTSPLHOLHr"] = 8;
                }

                //Night Diff
                if (Convert.ToBoolean(NDALL) == true && PrevDayCode != "" && PrevDayCode != DayCode)
                {
                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLNDOTHr"]) <= 8)
                    {
                        drEmpPayTranDtl["Tpd_RESTSPLHOLNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLNDOTHr"]);
                        drEmpPayTranDtl["Tpd_RESTSPLHOLNDOTHr"] = 0;
                    }
                    else
                    {
                        drEmpPayTranDtl["Tpd_RESTSPLHOLNDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLNDOTHr"])) - 8;
                        drEmpPayTranDtl["Tpd_RESTSPLHOLNDHr"] = 8;
                    }
                }

                if (drEmpPayTranDtlPrev != null && Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLOTHr"]) > 0)
                {
                    if (LBRHRFORMULA == "FORMULA1")
                    {
                        //Restore values of the payroll transaction column
                        if (dHr
                            + dOTHr
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLOTHr"]) <= 8)
                        {
                            RestdaySpecialHolidayHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLOTHr"]));
                        }
                        else
                        {
                            RestdaySpecialHolidayOTHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLOTHr"])) - 8;
                            RestdaySpecialHolidayHr -= 8;
                        }
                        bHasAddedCurrentHrs = true; //Added (6/10/2013) For proper distribution of hours if HRFRCLBRHR is enabled

                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLOTHr"]) <= 8)
                        {
                            RestdaySpecialHolidayHr += Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLOTHr"]);
                        }
                        else
                        {
                            RestdaySpecialHolidayOTHr += (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLOTHr"]))
                                                - 8;
                            RestdaySpecialHolidayHr += 8;

                            drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"])
                                                                                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLOTHr"]))
                                                                                        - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTSPLHOLHr"] = 8 - (Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLHr"])
                                                                                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLOTHr"]));
                        }
                    }
                    else if (LBRHRFORMULA == "FORMULA2")
                    {
                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"])
                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLOTHr"]) <= 8)
                        {
                            drEmpPayTranDtl["Tpd_RESTSPLHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"])
                                                                                    + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"] = 0;
                        }
                        else
                        {
                            drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTSPLHOLOTHr"])
                                                                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLOTHr"]))
                                                                                            - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTSPLHOLHr"] = 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTSPLHOLHr"]);
                        }
                    }
                }
            }
            #endregion
            #region Restday Company Holiday
            else if (DayCode.Equals("COMP") && Restday)
            {
                dHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]);
                dOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"]);
                dNDHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLNDHr"]);
                dNDOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLNDOTHr"]);

                if (hrType == HourType.RegHour)
                {
                    drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]) + Amount;
                }
                else if (hrType == HourType.OTHour)
                {
                    drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"]) + Amount;
                }
                else if (hrType == HourType.NDHour)
                {
                    drEmpPayTranDtl["Tpd_RESTCOMPHOLNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLNDHr"]) + Amount;
                }
                else if (hrType == HourType.NDOTHour)
                {
                    drEmpPayTranDtl["Tpd_RESTCOMPHOLNDOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLNDOTHr"]) + Amount;
                }

                if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"]) <= 8)
                {
                    drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"]);
                    drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"] = 0;
                }
                else
                {
                    drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"])) - 8;
                    drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"] = 8;
                }

                //Night Diff
                if (Convert.ToBoolean(NDALL) == true && PrevDayCode != "" && PrevDayCode != DayCode)
                {
                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLNDOTHr"]) <= 8)
                    {
                        drEmpPayTranDtl["Tpd_RESTCOMPHOLNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLNDOTHr"]);
                        drEmpPayTranDtl["Tpd_RESTCOMPHOLNDOTHr"] = 0;
                    }
                    else
                    {
                        drEmpPayTranDtl["Tpd_RESTCOMPHOLNDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLNDOTHr"])) - 8;
                        drEmpPayTranDtl["Tpd_RESTCOMPHOLNDHr"] = 8;
                    }
                }

                if (drEmpPayTranDtlPrev != null && Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLOTHr"]) > 0)
                {
                    if (LBRHRFORMULA == "FORMULA1")
                    {
                        //Restore values of the payroll transaction column
                        if (dHr
                            + dOTHr
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLOTHr"]) <= 8)
                        {
                            RestdayCompanyHolidayHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLOTHr"]));
                        }
                        else
                        {
                            RestdayCompanyHolidayOTHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLOTHr"])) - 8;
                            RestdayCompanyHolidayHr -= 8;
                        }
                        bHasAddedCurrentHrs = true; // For proper distribution of hours if HRFRCLBRHR is enabled

                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLOTHr"]) <= 8)
                        {
                            RestdayCompanyHolidayHr += Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLOTHr"]);
                        }
                        else
                        {
                            RestdayCompanyHolidayOTHr += (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLOTHr"]))
                                                - 8;
                            RestdayCompanyHolidayHr += 8;

                            drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"])
                                                                                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLOTHr"]))
                                                                                        - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"] = 8 - (Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLHr"])
                                                                                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLOTHr"]));
                        }
                    }
                    else if (LBRHRFORMULA == "FORMULA2")
                    {
                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"])
                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLOTHr"]) <= 8)
                        {
                            drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"])
                                                                                    + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"] = 0;
                        }
                        else
                        {
                            drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTCOMPHOLOTHr"])
                                                                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLOTHr"]))
                                                                                            - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTCOMPHOLHr"] = 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTCOMPHOLHr"]);
                        }
                    }
                }
            }
            #endregion
            #region Restday Plant Shutdown
            else if (DayCode.Equals("PSD") && Restday)
            {
                dHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDHr"]);
                dOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDOTHr"]);
                dNDHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDNDHr"]);
                dNDOTHr = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDNDOTHr"]);

                if (hrType == HourType.RegHour)
                {
                    drEmpPayTranDtl["Tpd_RESTPSDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDHr"]) + Amount;
                }
                else if (hrType == HourType.OTHour)
                {
                    drEmpPayTranDtl["Tpd_RESTPSDOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDOTHr"]) + Amount;
                }
                else if (hrType == HourType.NDHour)
                {
                    drEmpPayTranDtl["Tpd_RESTPSDNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDNDHr"]) + Amount;
                }
                else if (hrType == HourType.NDOTHour)
                {
                    drEmpPayTranDtl["Tpd_RESTPSDNDOTHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDNDOTHr"]) + Amount;
                }

                if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDOTHr"]) <= 8)
                {
                    drEmpPayTranDtl["Tpd_RESTPSDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDOTHr"]);
                    drEmpPayTranDtl["Tpd_RESTPSDOTHr"] = 0;
                }
                else
                {
                    drEmpPayTranDtl["Tpd_RESTPSDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDOTHr"])) - 8;
                    drEmpPayTranDtl["Tpd_RESTPSDHr"] = 8;
                }

                //Night Diff
                if (Convert.ToBoolean(NDALL) == true && PrevDayCode != "" && PrevDayCode != DayCode)
                {
                    if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDNDOTHr"]) <= 8)
                    {
                        drEmpPayTranDtl["Tpd_RESTPSDNDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDNDOTHr"]);
                        drEmpPayTranDtl["Tpd_RESTPSDNDOTHr"] = 0;
                    }
                    else
                    {
                        drEmpPayTranDtl["Tpd_RESTPSDNDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDNDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDNDOTHr"])) - 8;
                        drEmpPayTranDtl["Tpd_RESTPSDNDHr"] = 8;
                    }
                }

                if (drEmpPayTranDtlPrev != null && Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDOTHr"]) > 0)
                {
                    if (LBRHRFORMULA == "FORMULA1")
                    {
                        //Restore values of the payroll transaction column
                        if (dHr
                            + dOTHr
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDOTHr"]) <= 8)
                        {
                            RestdayPlantShutdownHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDOTHr"]));
                        }
                        else
                        {
                            RestdayPlantShutdownOTHr -= (dHr + dOTHr + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDOTHr"])) - 8;
                            RestdayPlantShutdownHr -= 8;
                        }
                        bHasAddedCurrentHrs = true; //Added (6/10/2013) For proper distribution of hours if HRFRCLBRHR is enabled

                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDOTHr"])
                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDOTHr"]) <= 8)
                        {
                            RestdayPlantShutdownHr += Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDOTHr"]);
                        }
                        else
                        {
                            RestdayPlantShutdownOTHr += (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDOTHr"])
                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDOTHr"]))
                                                - 8;
                            RestdayPlantShutdownHr += 8;

                            drEmpPayTranDtl["Tpd_RESTPSDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDOTHr"])
                                                                                            + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDOTHr"]))
                                                                                        - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTPSDHr"] = 8 - (Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDHr"])
                                                                                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDOTHr"]));
                        }
                    }
                    else if (LBRHRFORMULA == "FORMULA2")
                    {
                        if (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDOTHr"])
                        + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDOTHr"]) <= 8)
                        {
                            drEmpPayTranDtl["Tpd_RESTPSDHr"] = Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDOTHr"])
                                                                                    + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTPSDOTHr"] = 0;
                        }
                        else
                        {
                            drEmpPayTranDtl["Tpd_RESTPSDOTHr"] = (Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtl["Tpd_RESTPSDOTHr"])
                                                                                                + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDHr"]) + Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDOTHr"]))
                                                                                            - 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDOTHr"]);
                            drEmpPayTranDtl["Tpd_RESTPSDHr"] = 8 - Convert.ToDouble(drEmpPayTranDtlPrev["Tpd_RESTPSDHr"]);
                        }
                    }
                }
            }
            #endregion
            #region Fillers
            else if (bHasDayCodeExt)
            {
                string fillerHrCol, fillerOTHrCol, fillerNDHrCol, fillerOTNDHrCol;
                string fillerHrColD, fillerOTHrColD, fillerNDHrColD, fillerOTNDHrColD; //gcd
                double dRegAmt, dOTAmt;
                foreach (DataRow drFiller in dtDayCodeFillers.Rows)
                {
                    dRegAmt = 0;
                    dOTAmt = 0;

                    fillerHrCol     = string.Format("Tph_Misc{0}Hr", drFiller["Mmd_MiscDayID"]);
                    fillerOTHrCol   = string.Format("Tph_Misc{0}OTHr", drFiller["Mmd_MiscDayID"]);
                    fillerNDHrCol   = string.Format("Tph_Misc{0}NDHr", drFiller["Mmd_MiscDayID"]);
                    fillerOTNDHrCol = string.Format("Tph_Misc{0}NDOTHr", drFiller["Mmd_MiscDayID"]);

                    fillerHrColD     = string.Format("Tpd_Misc{0}Hr", drFiller["Mmd_MiscDayID"]);
                    fillerOTHrColD   = string.Format("Tpd_Misc{0}OTHr", drFiller["Mmd_MiscDayID"]);
                    fillerNDHrColD   = string.Format("Tpd_Misc{0}NDHr", drFiller["Mmd_MiscDayID"]);
                    fillerOTNDHrColD = string.Format("Tpd_Misc{0}NDOTHr", drFiller["Mmd_MiscDayID"]);

                    if (DayCode.Equals(drFiller["Mmd_DayCode"].ToString()) && Convert.ToBoolean(drFiller["Mmd_RestDayFlag"]) == Restday)
                    {
                        //Initialize Reg Hr and OT Hr
                        drEmpPayTranHdrMisc[fillerHrCol] = Convert.ToDouble(drEmpPayTranHdrMisc[fillerHrCol]) - Convert.ToDouble(drEmpPayTranDtlMisc[fillerHrColD]);
                        drEmpPayTranHdrMisc[fillerOTHrCol] = Convert.ToDouble(drEmpPayTranHdrMisc[fillerOTHrCol]) - Convert.ToDouble(drEmpPayTranDtlMisc[fillerOTHrColD]);

                        if (hrType == HourType.RegHour)
                        {
                            //drEmpPayTranHdrMisc[fillerHrCol] = Convert.ToDouble(drEmpPayTranHdrMisc[fillerHrCol]) + Amount;
                            drEmpPayTranDtlMisc[fillerHrColD] = Convert.ToDouble(drEmpPayTranDtlMisc[fillerHrColD]) + Amount;
                        }
                        else if (hrType == HourType.OTHour)
                        {
                            //drEmpPayTranHdrMisc[fillerOTHrCol] = Convert.ToDouble(drEmpPayTranHdrMisc[fillerOTHrCol]) + Amount;
                            drEmpPayTranDtlMisc[fillerOTHrColD] = Convert.ToDouble(drEmpPayTranDtlMisc[fillerOTHrColD]) + Amount;
                        }
                        else if (hrType == HourType.NDHour)
                        {
                            drEmpPayTranHdrMisc[fillerNDHrCol] = Convert.ToDouble(drEmpPayTranHdrMisc[fillerNDHrCol]) + Amount;
                            drEmpPayTranDtlMisc[fillerNDHrColD] = Convert.ToDouble(drEmpPayTranDtlMisc[fillerNDHrColD]) + Amount;
                        }
                        else if (hrType == HourType.NDOTHour)
                        {
                            drEmpPayTranHdrMisc[fillerOTNDHrCol] = Convert.ToDouble(drEmpPayTranHdrMisc[fillerOTNDHrCol]) + Amount;
                            drEmpPayTranDtlMisc[fillerOTNDHrColD] = Convert.ToDouble(drEmpPayTranDtlMisc[fillerOTNDHrColD]) + Amount;
                        }

                        //Evaluate if excess 8 hours
                        if (Convert.ToDouble(drEmpPayTranDtlMisc[fillerHrColD]) + Convert.ToDouble(drEmpPayTranDtlMisc[fillerOTHrColD]) <= 8)
                        {
                            drEmpPayTranDtlMisc[fillerHrColD]   = Convert.ToDouble(drEmpPayTranDtlMisc[fillerHrColD]) + Convert.ToDouble(drEmpPayTranDtlMisc[fillerOTHrColD]);
                            drEmpPayTranDtlMisc[fillerOTHrColD] = 0;
                            dRegAmt = Convert.ToDouble(drEmpPayTranDtlMisc[fillerHrColD]);
                            dOTAmt  = Convert.ToDouble(drEmpPayTranDtlMisc[fillerOTHrColD]);
                        }
                        else
                        {
                            drEmpPayTranDtlMisc[fillerOTHrColD] = (Convert.ToDouble(drEmpPayTranDtlMisc[fillerHrColD]) + Convert.ToDouble(drEmpPayTranDtlMisc[fillerOTHrColD])) - 8;
                            drEmpPayTranDtlMisc[fillerHrColD]   = 8;
                            dRegAmt = Convert.ToDouble(drEmpPayTranDtlMisc[fillerHrColD]);
                            dOTAmt  = Convert.ToDouble(drEmpPayTranDtlMisc[fillerOTHrColD]);
                        }

                        //Update Reg Hr and OT Hr
                        drEmpPayTranHdrMisc[fillerHrCol]   = Convert.ToDouble(drEmpPayTranHdrMisc[fillerHrCol]) + dRegAmt;
                        drEmpPayTranHdrMisc[fillerOTHrCol] = Convert.ToDouble(drEmpPayTranHdrMisc[fillerOTHrCol]) + dOTAmt;
                    }
                }
            }
            #endregion
        }
        #endregion

        #region RegLeaveAbs functions
        public void AddToRegLeaveAbs(string strStartTime, string strEndTime, int iStartMin, int iEndMin, RegLeaveAbsType RegLeaveAbsType, string strRemarks, bool bIsGraveyard)
        {
            AddToRegLeaveAbs(0, strStartTime, strEndTime, iStartMin, iEndMin, 0, 0, 0,  "", false, false, "", RegLeaveAbsType, strRemarks, true, "", bIsGraveyard);
        }
        public void AddToRegLeaveAbs(string strStartTime, string strEndTime, int iStartMin, int iEndMin, int iConvMins, RegLeaveAbsType RegLeaveAbsType, string strRemarks, bool bIsGraveyard)
        {
            AddToRegLeaveAbs(0, strStartTime, strEndTime, iStartMin, iEndMin, iConvMins, 0, 0, "", false, false, "", RegLeaveAbsType, strRemarks, true, "", bIsGraveyard);
        }
        public void AddToRegLeaveAbs(string strStartTime, string strEndTime, int iStartMin, int iEndMin, int iActualStartMin, int iActualEndMin, RegLeaveAbsType RegLeaveAbsType, string strRemarks, bool bStatus, bool bIsGraveyard)
        {
            AddToRegLeaveAbs(0, strStartTime, strEndTime, iStartMin, iEndMin, 0, iActualStartMin, iActualEndMin, "", false, false, "", RegLeaveAbsType, strRemarks, bStatus, "", bIsGraveyard);
        }
        public void AddToRegLeaveAbs(string strStartTime, string strEndTime, int iStartMin, int iEndMin, int iActualStartMin, int iActualEndMin, string strLeaveType, bool bPaidLeave, bool bWithCredit, string strDayUnit, RegLeaveAbsType RegLeaveAbsType, string strRemarks, bool bStatus, bool bIsGraveyard)
        {
            AddToRegLeaveAbs(0, strStartTime, strEndTime, iStartMin, iEndMin, 0, iActualStartMin, iActualEndMin, strLeaveType, bPaidLeave, bWithCredit, strDayUnit, RegLeaveAbsType, strRemarks, bStatus, "", bIsGraveyard);
        }
        public void AddToRegLeaveAbs(int iPocket, string strStartTime, string strEndTime, int iStartMin, int iEndMin, int iActualStartMin, int iActualEndMin, string strLeaveType, bool bPaidLeave, bool bWithCredit, string strDayUnit, RegLeaveAbsType RegLeaveAbsType, string strRemarks, bool bStatus, string strRegLeaveAbsIndicator, bool bIsGraveyard)
        {
            AddToRegLeaveAbs(iPocket, strStartTime, strEndTime, iStartMin, iEndMin, 0, iActualStartMin, iActualEndMin, strLeaveType, bPaidLeave, bWithCredit, strDayUnit, RegLeaveAbsType, strRemarks, bStatus, strRegLeaveAbsIndicator, bIsGraveyard);
        }
        public void AddToRegLeaveAbs(int iPocket, string strStartTime, string strEndTime, int iStartMin, int iEndMin, int iConvMins, int iActualStartMin, int iActualEndMin, string strLeaveType, bool bPaidLeave, bool bWithCredit, string strDayUnit, RegLeaveAbsType RegLeaveAbsType, string strRemarks, bool bStatus, string strRegLeaveAbsIndicator, bool bIsGraveyard)
        {
            int tmpStartTime = ConvertFromGraveyardTime(iStartMin, bIsGraveyard);
            int tmpEndTime = ConvertFromGraveyardTime(iEndMin, bIsGraveyard);

            clRegLeaveAbsType clRegLeaveAbsType = new clRegLeaveAbsType();
            clRegLeaveAbsType.iPocket                   = iPocket;
            clRegLeaveAbsType.strBeginTime              = ((bIsGraveyard && iStartMin > GRAVEYARD24 && tmpStartTime != iStartMin) ? GetHourStrFromMins(tmpStartTime) : strStartTime);
            clRegLeaveAbsType.strEndTime                = ((bIsGraveyard && iEndMin > GRAVEYARD24 && tmpEndTime != iEndMin) ? GetHourStrFromMins(tmpEndTime) : strEndTime);
            clRegLeaveAbsType.iConvBeginMin             = iStartMin;
            clRegLeaveAbsType.iConvEndMin               = iEndMin;
            clRegLeaveAbsType.iConvMin                  = iConvMins;
            clRegLeaveAbsType.iActualStartMin           = iActualStartMin;
            clRegLeaveAbsType.iActualEndMin             = iActualEndMin;
            clRegLeaveAbsType.strLeaveType              = strLeaveType;
            clRegLeaveAbsType.bPaidLeave                = bPaidLeave;
            clRegLeaveAbsType.bWithCredit               = bWithCredit;
            clRegLeaveAbsType.strDayUnit                = strDayUnit;
            clRegLeaveAbsType.strRegLeaveAbsType        = RegLeaveAbsType;
            clRegLeaveAbsType.strRemarks                = strRemarks;
            clRegLeaveAbsType.bStatus                   = bStatus;
            clRegLeaveAbsType.strRegLeaveAbsIndicator   = strRegLeaveAbsIndicator;
            if (RegLeaveAbsType == RegLeaveAbsType.OVT && strRemarks != "PB")
                listOvt.Add(clRegLeaveAbsType);
            else
                listRegLeaveAbs.Add(clRegLeaveAbsType);
        }
        public void InitializeRegLeaveAbs()
        {
            listRegLeaveAbs.Clear();
            listOvt.Clear();
        }
        private void RegLeaveAbsAddToList(string strStartTime, string strEndTime, int iStartTime, int iEndTime
            , int iShiftTimeIn1, int iShiftTimeOut1, int iShiftTimeIn2, int iShiftTimeOut2, int iShiftMin, bool bIsGraveyard)
        {
            for (int iList = 0; iList < listRegLeaveAbs.Count; iList++)
            {
                int iTemp = 0;
                iTemp = GetOTHoursInMinutes(listRegLeaveAbs[iList].iConvBeginMin, listRegLeaveAbs[iList].iConvEndMin, iShiftTimeIn1, iShiftTimeOut1);
                iTemp += GetOTHoursInMinutes(listRegLeaveAbs[iList].iConvBeginMin, listRegLeaveAbs[iList].iConvEndMin, iShiftTimeIn2, iShiftTimeOut2);

                if ((iTemp >= iShiftMin || listRegLeaveAbs[iList].strDayUnit == "WH")
                    && listRegLeaveAbs[iList].strRegLeaveAbsType == RegLeaveAbsType.LVE)
                {
                    AddToRegLeaveAbs(0, strStartTime, strEndTime, iStartTime, iEndTime, 0, 0, listRegLeaveAbs[iList].strLeaveType, listRegLeaveAbs[iList].bPaidLeave, listRegLeaveAbs[iList].bWithCredit, listRegLeaveAbs[iList].strDayUnit, RegLeaveAbsType.LVE, (listRegLeaveAbs[iList].bPaidLeave ? "PL" : "UL"), true, "", bIsGraveyard);
                    break;
                }
            }
        }

        private void NightDiffAddToList(int iStartTime, int iEndTime, int BaseStartTime, int BaseEndTime, double NDFraction, string strRemarks, bool bIsGraveyard)
        {
            ActualStart = 0;
            ActualEnd   = 0;
            OTMins      = 0;
            OTMins = GetOTHoursInTime(iStartTime, iEndTime, BaseStartTime, BaseEndTime, ref ActualStart, ref ActualEnd);
            if (OTMins > 0)
            {
                ActualStart = Convert.ToInt32(Math.Ceiling(Convert.ToDouble(ActualStart) / NDFraction) * NDFraction);
                ActualEnd = Convert.ToInt32(Math.Floor(Convert.ToDouble(ActualEnd) / NDFraction) * NDFraction);
                OTMins = GetOTHoursInMinutes(ActualStart, ActualEnd, BaseStartTime, BaseEndTime);
                AddToRegLeaveAbs(GetHourStrFromMins(ActualStart), GetHourStrFromMins(ActualEnd), ActualStart, ActualEnd, OTMins, RegLeaveAbsType.NDF, strRemarks, bIsGraveyard);
            }
        }
        private string FormatRegLeaveAbsResult()
        {
            string strValue = "";
            for(int i = 0; i < listRegLeaveAbs.Count; i++)
            {
                double dHours = Math.Round((Convert.ToDouble(listRegLeaveAbs[i].iConvMin) / 60.0), 6);
                if (dHours != 0)
                {
                    string strtemp = listRegLeaveAbs[i].strBeginTime + "|" + listRegLeaveAbs[i].strEndTime + "|" + dHours + "|" + listRegLeaveAbs[i].strRegLeaveAbsType.ToString() + "|" + listRegLeaveAbs[i].strRemarks;

                    if (strValue != "")
                        strValue += "," + strtemp;
                    else
                        strValue = strtemp;
                }
            }
            return strValue;
        }
        #endregion

        #region Timekeeping Utilities
        public int GetOTHoursInMinutes(string strStartOT, string strEndOT, string strStartPunch, string strEndPunch)
        {
            int iStartOT = GetMinsFromHourStr(strStartOT);
            int iEndOT = GetMinsFromHourStr(strEndOT);
            int iStartPunch = GetMinsFromHourStr(strStartPunch);
            int iEndPunch = GetMinsFromHourStr(strEndPunch);
            int iTimeStart, iTimeEnd;

            iTimeStart = (iStartOT > iStartPunch) ? iStartOT : iStartPunch; //Get Max
            iTimeEnd = (iEndOT < iEndPunch) ? iEndOT : iEndPunch; //Get Min

            if (iTimeEnd > iTimeStart)
            {
                return iTimeEnd - iTimeStart;
            }
            else
            {
                return 0;
            }
        }

        public int GetOTHoursInMinutes(int iStartOT, int iEndOT, int iStartPunch, int iEndPunch)
        {
            int iTimeStart, iTimeEnd;

            iTimeStart = (iStartOT > iStartPunch) ? iStartOT : iStartPunch; //Get Max
            iTimeEnd = (iEndOT < iEndPunch) ? iEndOT : iEndPunch; //Get Min

            if (iTimeEnd > iTimeStart)
            {
                return iTimeEnd - iTimeStart;
            }
            else
            {
                return 0;
            }
        }

        public int GetOTHoursInTime(int iStartOT, int iEndOT, int iStartPunch, int iEndPunch, ref int iTimeStart, ref int iTimeEnd)
        {
            iTimeStart = (iStartOT > iStartPunch) ? iStartOT : iStartPunch; //Get Max
            iTimeEnd = (iEndOT < iEndPunch) ? iEndOT : iEndPunch; //Get Min

            if (iTimeEnd > iTimeStart)
            {
                return iTimeEnd - iTimeStart;
            }
            else
            {
                return 0;
            }
        }

        public void GetOTHoursExcludedTime(int iStartOT, int iEndOT, int iStartPunch, int iEndPunch, ref int iTimeStart1, ref int iTimeEnd1, ref int iTimeStart2, ref int iTimeEnd2)
        {
            iTimeStart1 = (iEndOT > iStartPunch) ? iEndOT : iStartPunch; //Get Max
            iTimeEnd1 = (iStartOT > iEndPunch) ? iStartOT : iEndPunch; //Get Max

            iTimeStart2 = (iEndOT < iStartPunch) ? iEndOT : iStartPunch; //Get Min
            iTimeEnd2 = (iStartOT < iEndPunch) ? iStartOT : iEndPunch; //Get Min
        }

        public int GetHourDiffInMinutes(string strTimeOut, string strTimeIn)
        {
            int iTimeIn = GetMinsFromHourStr(strTimeIn);
            int iTimeOut = GetMinsFromHourStr(strTimeOut);

            if (iTimeOut < iTimeIn)
            {
                return 0;
            }
            else
            {
                return iTimeOut - iTimeIn;
            }
        }

        public string GetHourStrFromMins(int minutes)
        {
            int iHours, iMinutes;
            string strHours, strMinutes;

            iHours = minutes / 60;
            strHours = iHours.ToString();
            iMinutes = minutes % 60;
            strMinutes = iMinutes.ToString();

            // Pad left zeros
            if (strHours.Length < 2)
            {
                strHours = "0" + strHours;
            }
            if (strMinutes.Length < 2)
            {
                strMinutes = "0" + strMinutes;
            }

            // Concatenate hour and minutes
            return strHours + strMinutes;
        }

        public int GetMinsFromHourStr(string hour)
        {
            if (hour.Length == 4)
                return (Convert.ToInt32(hour.Substring(0, 2)) * 60) + Convert.ToInt32(hour.Substring(2, 2));
            else
                return 0;
        }

        public string AddMinutesToHourStr(string baseHour, int minutes)
        {
            int iSumInMins = GetMinsFromHourStr(baseHour) + minutes;
            return GetHourStrFromMins(iSumInMins);
        }

        public string AddMinutesToMinStr(string baseMin, int minutes)
        {
            int iSumInMins = Convert.ToInt32(baseMin) + minutes;
            return Convert.ToString(iSumInMins);
        }

        public int ConvertToGraveyardTime(int iMinutes, bool bIsGraveyard)
        {
            if (bIsGraveyard)
            {
                iMinutes += GRAVEYARD24;
            }
            return iMinutes;
        }

        public int ConvertFromGraveyardTime(int iMinutes, bool bIsGraveyard)
        {
            if (bIsGraveyard)
            {
                iMinutes -= GRAVEYARD24;
            }
            return iMinutes;
        }
        #endregion

    }
}
